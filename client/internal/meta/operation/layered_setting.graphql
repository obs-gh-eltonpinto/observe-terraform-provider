fragment LayeredSetting on LayeredSetting {
    # @genqlient(flatten: true)
    settingAndTargetScope {
        ...SettingAndTargetScope
    }
    # @genqlient(flatten: true)
    value {
        ...PrimitiveValue
    }
    # I want a WorkspaceObject fragment, but some objects
    # include managedById, and some don't, so that would
    # generate inconsistent schema.
    id
    name
    description
    iconUrl
    workspaceId
    managedById
    folderId
}

fragment SettingAndTargetScope on SettingAndTargetScope {
    setting
    # @genqlient(flatten: true)
    target {
        ...LayeredSettingTarget
    }
}

fragment LayeredSettingTarget on LayeredSettingTarget {
    customerId
    workspaceId
    folderId
    appId
    monitorId
    worksheetId
    dashboardId
    datasetId
    userId
}

fragment PrimitiveValue on PrimitiveValue {
    bool
    float64
    int64
    string
    timestamp
    duration
}

# @genqlient(for: "LayeredSettingInput.managedById", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.customerId", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.workspaceId", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.folderId", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.appId", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.monitorId", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.worksheetId", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.dashboardId", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.datasetId", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.userId", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.bool", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.float64", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.int64", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.string", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.timestamp", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.duration", omitempty: true)
mutation createLayeredSetting(
    $setting: LayeredSettingInput!
) {
    # this will return a slice
    # @genqlient(flatten: true)
    layeredSettings: createLayeredSettings(settings: [$setting]) {
    	...LayeredSetting
    }
}

query getLayeredSetting($id: ObjectId!) {
    # @genqlient(flatten: true)
    layeredSetting: layeredSetting(id: $id) {
    	...LayeredSetting
    }
}

# @genqlient(for: "LayeredSettingInput.managedById", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.customerId", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.workspaceId", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.folderId", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.appId", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.monitorId", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.worksheetId", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.dashboardId", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.datasetId", omitempty: true)
# @genqlient(for: "LayeredSettingTargetInput.userId", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.bool", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.float64", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.int64", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.string", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.timestamp", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.duration", omitempty: true)
mutation updateLayeredSetting(
    $setting: LayeredSettingInput!
) {
    # this returns a slice
    # @genqlient(flatten: true)
    layeredSettings: updateLayeredSettings(settings: [$setting]) {
        ...LayeredSetting
    }
}

mutation deleteLayeredSetting($id: ObjectId!) {
    # flatten doesn't work here, because it only works on spreads
    deleteLayeredSettings: deleteLayeredSettings(ids: [$id]) {
        # TODO: if graphql ever gets "flat chain syntax," hoist this to the top level
        # @genqlient(flatten: true)
        resultStatus: result {
            ...ResultStatus
        }
    }
}
