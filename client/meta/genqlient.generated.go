// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package meta

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
	"github.com/observeinc/terraform-provider-observe/client/meta/types"
)

type ActionInput struct {
	Name             *string               `json:"name"`
	IconUrl          *string               `json:"iconUrl"`
	Description      *string               `json:"description"`
	RateLimit        *types.DurationScalar `json:"rateLimit"`
	NotifyOnClose    *bool                 `json:"notifyOnClose"`
	NotifyOnReminder *bool                 `json:"notifyOnReminder"`
	Email            *EmailActionInput     `json:"email"`
	Webhook          *WebhookActionInput   `json:"webhook"`
}

// GetName returns ActionInput.Name, and is useful for accessing the field via an interface.
func (v *ActionInput) GetName() *string { return v.Name }

// GetIconUrl returns ActionInput.IconUrl, and is useful for accessing the field via an interface.
func (v *ActionInput) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns ActionInput.Description, and is useful for accessing the field via an interface.
func (v *ActionInput) GetDescription() *string { return v.Description }

// GetRateLimit returns ActionInput.RateLimit, and is useful for accessing the field via an interface.
func (v *ActionInput) GetRateLimit() *types.DurationScalar { return v.RateLimit }

// GetNotifyOnClose returns ActionInput.NotifyOnClose, and is useful for accessing the field via an interface.
func (v *ActionInput) GetNotifyOnClose() *bool { return v.NotifyOnClose }

// GetNotifyOnReminder returns ActionInput.NotifyOnReminder, and is useful for accessing the field via an interface.
func (v *ActionInput) GetNotifyOnReminder() *bool { return v.NotifyOnReminder }

// GetEmail returns ActionInput.Email, and is useful for accessing the field via an interface.
func (v *ActionInput) GetEmail() *EmailActionInput { return v.Email }

// GetWebhook returns ActionInput.Webhook, and is useful for accessing the field via an interface.
func (v *ActionInput) GetWebhook() *WebhookActionInput { return v.Webhook }

type AggregateFunction string

const (
	// On Average
	AggregateFunctionAvg AggregateFunction = "Avg"
	// In Total
	AggregateFunctionSum AggregateFunction = "Sum"
	// At All Times (unintuitive but true!)
	AggregateFunctionMin AggregateFunction = "Min"
	// At Least Once (unintuitive but true!)
	AggregateFunctionMax AggregateFunction = "Max"
)

// App includes the GraphQL fields of App requested by the fragment App.
// The GraphQL type's documentation follows.
//
// App represents an installed instance of an AppModule
type App struct {
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	IconUrl     *string           `json:"iconUrl"`
	Description *string           `json:"description"`
	WorkspaceId string            `json:"workspaceId"`
	FolderId    string            `json:"folderId"`
	Config      AppConfig         `json:"config"`
	Status      AppStatus         `json:"status"`
	Outputs     *types.JsonObject `json:"outputs"`
}

// GetId returns App.Id, and is useful for accessing the field via an interface.
func (v *App) GetId() string { return v.Id }

// GetName returns App.Name, and is useful for accessing the field via an interface.
func (v *App) GetName() string { return v.Name }

// GetIconUrl returns App.IconUrl, and is useful for accessing the field via an interface.
func (v *App) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns App.Description, and is useful for accessing the field via an interface.
func (v *App) GetDescription() *string { return v.Description }

// GetWorkspaceId returns App.WorkspaceId, and is useful for accessing the field via an interface.
func (v *App) GetWorkspaceId() string { return v.WorkspaceId }

// GetFolderId returns App.FolderId, and is useful for accessing the field via an interface.
func (v *App) GetFolderId() string { return v.FolderId }

// GetConfig returns App.Config, and is useful for accessing the field via an interface.
func (v *App) GetConfig() AppConfig { return v.Config }

// GetStatus returns App.Status, and is useful for accessing the field via an interface.
func (v *App) GetStatus() AppStatus { return v.Status }

// GetOutputs returns App.Outputs, and is useful for accessing the field via an interface.
func (v *App) GetOutputs() *types.JsonObject { return v.Outputs }

// AppConfig includes the requested fields of the GraphQL type AppConfig.
type AppConfig struct {
	ModuleId string `json:"moduleId"`
	Version  string `json:"version"`
}

// GetModuleId returns AppConfig.ModuleId, and is useful for accessing the field via an interface.
func (v *AppConfig) GetModuleId() string { return v.ModuleId }

// GetVersion returns AppConfig.Version, and is useful for accessing the field via an interface.
func (v *AppConfig) GetVersion() string { return v.Version }

type AppInput struct {
	ModuleId  string             `json:"moduleId"`
	Version   string             `json:"version"`
	Variables []AppVariableInput `json:"variables"`
	FolderId  *string            `json:"folderId"`
}

// GetModuleId returns AppInput.ModuleId, and is useful for accessing the field via an interface.
func (v *AppInput) GetModuleId() string { return v.ModuleId }

// GetVersion returns AppInput.Version, and is useful for accessing the field via an interface.
func (v *AppInput) GetVersion() string { return v.Version }

// GetVariables returns AppInput.Variables, and is useful for accessing the field via an interface.
func (v *AppInput) GetVariables() []AppVariableInput { return v.Variables }

// GetFolderId returns AppInput.FolderId, and is useful for accessing the field via an interface.
func (v *AppInput) GetFolderId() *string { return v.FolderId }

type AppState string

const (
	AppStateInitializing AppState = "Initializing"
	AppStateInstalling   AppState = "Installing"
	AppStateInstalled    AppState = "Installed"
	AppStateDeleting     AppState = "Deleting"
	AppStateError        AppState = "Error"
)

// AppStatus includes the requested fields of the GraphQL type AppStatus.
type AppStatus struct {
	State AppState `json:"state"`
	// The detailed internal error message if an app is in Error state. Not suitable for external user consumption.
	InternalError *string `json:"internalError"`
}

// GetState returns AppStatus.State, and is useful for accessing the field via an interface.
func (v *AppStatus) GetState() AppState { return v.State }

// GetInternalError returns AppStatus.InternalError, and is useful for accessing the field via an interface.
func (v *AppStatus) GetInternalError() *string { return v.InternalError }

type AppVariableInput struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns AppVariableInput.Name, and is useful for accessing the field via an interface.
func (v *AppVariableInput) GetName() string { return v.Name }

// GetValue returns AppVariableInput.Value, and is useful for accessing the field via an interface.
func (v *AppVariableInput) GetValue() string { return v.Value }

// Board includes the GraphQL fields of Board requested by the fragment Board.
type Board struct {
	Id        string           `json:"id"`
	DatasetId string           `json:"datasetId"`
	Name      *string          `json:"name"`
	Type      BoardType        `json:"type"`
	BoardJson types.JsonObject `json:"boardJson"`
	Source    *string          `json:"source"`
}

// GetId returns Board.Id, and is useful for accessing the field via an interface.
func (v *Board) GetId() string { return v.Id }

// GetDatasetId returns Board.DatasetId, and is useful for accessing the field via an interface.
func (v *Board) GetDatasetId() string { return v.DatasetId }

// GetName returns Board.Name, and is useful for accessing the field via an interface.
func (v *Board) GetName() *string { return v.Name }

// GetType returns Board.Type, and is useful for accessing the field via an interface.
func (v *Board) GetType() BoardType { return v.Type }

// GetBoardJson returns Board.BoardJson, and is useful for accessing the field via an interface.
func (v *Board) GetBoardJson() types.JsonObject { return v.BoardJson }

// GetSource returns Board.Source, and is useful for accessing the field via an interface.
func (v *Board) GetSource() *string { return v.Source }

type BoardInput struct {
	Name      *string           `json:"name"`
	IsDefault *bool             `json:"isDefault"`
	Board     *types.JsonObject `json:"board"`
	Source    *string           `json:"source"`
}

// GetName returns BoardInput.Name, and is useful for accessing the field via an interface.
func (v *BoardInput) GetName() *string { return v.Name }

// GetIsDefault returns BoardInput.IsDefault, and is useful for accessing the field via an interface.
func (v *BoardInput) GetIsDefault() *bool { return v.IsDefault }

// GetBoard returns BoardInput.Board, and is useful for accessing the field via an interface.
func (v *BoardInput) GetBoard() *types.JsonObject { return v.Board }

// GetSource returns BoardInput.Source, and is useful for accessing the field via an interface.
func (v *BoardInput) GetSource() *string { return v.Source }

type BoardType string

const (
	BoardTypeSet       BoardType = "Set"
	BoardTypeSingleton BoardType = "Singleton"
)

// Bookmark includes the GraphQL fields of Bookmark requested by the fragment Bookmark.
type Bookmark struct {
	Id           string     `json:"id"`
	Name         string     `json:"name"`
	IconUrl      string     `json:"iconUrl"`
	TargetId     string     `json:"targetId"`
	TargetIdKind ObjectKind `json:"targetIdKind"`
	GroupId      string     `json:"groupId"`
}

// GetId returns Bookmark.Id, and is useful for accessing the field via an interface.
func (v *Bookmark) GetId() string { return v.Id }

// GetName returns Bookmark.Name, and is useful for accessing the field via an interface.
func (v *Bookmark) GetName() string { return v.Name }

// GetIconUrl returns Bookmark.IconUrl, and is useful for accessing the field via an interface.
func (v *Bookmark) GetIconUrl() string { return v.IconUrl }

// GetTargetId returns Bookmark.TargetId, and is useful for accessing the field via an interface.
func (v *Bookmark) GetTargetId() string { return v.TargetId }

// GetTargetIdKind returns Bookmark.TargetIdKind, and is useful for accessing the field via an interface.
func (v *Bookmark) GetTargetIdKind() ObjectKind { return v.TargetIdKind }

// GetGroupId returns Bookmark.GroupId, and is useful for accessing the field via an interface.
func (v *Bookmark) GetGroupId() string { return v.GroupId }

// BookmarkGroup includes the GraphQL fields of BookmarkGroup requested by the fragment BookmarkGroup.
type BookmarkGroup struct {
	Id          string `json:"id"`
	Name        string `json:"name"`
	IconUrl     string `json:"iconUrl"`
	WorkspaceId string `json:"workspaceId"`
}

// GetId returns BookmarkGroup.Id, and is useful for accessing the field via an interface.
func (v *BookmarkGroup) GetId() string { return v.Id }

// GetName returns BookmarkGroup.Name, and is useful for accessing the field via an interface.
func (v *BookmarkGroup) GetName() string { return v.Name }

// GetIconUrl returns BookmarkGroup.IconUrl, and is useful for accessing the field via an interface.
func (v *BookmarkGroup) GetIconUrl() string { return v.IconUrl }

// GetWorkspaceId returns BookmarkGroup.WorkspaceId, and is useful for accessing the field via an interface.
func (v *BookmarkGroup) GetWorkspaceId() string { return v.WorkspaceId }

type BookmarkGroupInput struct {
	Name         *string                    `json:"name"`
	IconUrl      *string                    `json:"iconUrl"`
	WorkspaceId  *string                    `json:"workspaceId"`
	Presentation *BookmarkGroupPresentation `json:"presentation"`
}

// GetName returns BookmarkGroupInput.Name, and is useful for accessing the field via an interface.
func (v *BookmarkGroupInput) GetName() *string { return v.Name }

// GetIconUrl returns BookmarkGroupInput.IconUrl, and is useful for accessing the field via an interface.
func (v *BookmarkGroupInput) GetIconUrl() *string { return v.IconUrl }

// GetWorkspaceId returns BookmarkGroupInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *BookmarkGroupInput) GetWorkspaceId() *string { return v.WorkspaceId }

// GetPresentation returns BookmarkGroupInput.Presentation, and is useful for accessing the field via an interface.
func (v *BookmarkGroupInput) GetPresentation() *BookmarkGroupPresentation { return v.Presentation }

type BookmarkGroupPresentation string

const (
	BookmarkGroupPresentationPercustomerworkspace BookmarkGroupPresentation = "PerCustomerWorkspace"
	BookmarkGroupPresentationPeruserworkspace     BookmarkGroupPresentation = "PerUserWorkspace"
	BookmarkGroupPresentationPeruser              BookmarkGroupPresentation = "PerUser"
	BookmarkGroupPresentationHidden               BookmarkGroupPresentation = "Hidden"
)

// Bookmarks have their own identity, but they don't have "last changed by"
// or "created by" timestamps / user auditing, as they are more lightweight.
type BookmarkInput struct {
	Name             *string          `json:"name"`
	IconUrl          *string          `json:"iconUrl"`
	UrlStateId       *string          `json:"urlStateId"`
	TargetId         *string          `json:"targetId"`
	TargetResourceId *ResourceIdInput `json:"targetResourceId"`
	GroupId          *string          `json:"groupId"`
}

// GetName returns BookmarkInput.Name, and is useful for accessing the field via an interface.
func (v *BookmarkInput) GetName() *string { return v.Name }

// GetIconUrl returns BookmarkInput.IconUrl, and is useful for accessing the field via an interface.
func (v *BookmarkInput) GetIconUrl() *string { return v.IconUrl }

// GetUrlStateId returns BookmarkInput.UrlStateId, and is useful for accessing the field via an interface.
func (v *BookmarkInput) GetUrlStateId() *string { return v.UrlStateId }

// GetTargetId returns BookmarkInput.TargetId, and is useful for accessing the field via an interface.
func (v *BookmarkInput) GetTargetId() *string { return v.TargetId }

// GetTargetResourceId returns BookmarkInput.TargetResourceId, and is useful for accessing the field via an interface.
func (v *BookmarkInput) GetTargetResourceId() *ResourceIdInput { return v.TargetResourceId }

// GetGroupId returns BookmarkInput.GroupId, and is useful for accessing the field via an interface.
func (v *BookmarkInput) GetGroupId() *string { return v.GroupId }

type ChangeType string

const (
	ChangeTypeAbsolute ChangeType = "Absolute"
	ChangeTypeRelative ChangeType = "Relative"
)

// Channel includes the GraphQL fields of Channel requested by the fragment Channel.
type Channel struct {
	Id          string                   `json:"id"`
	Name        string                   `json:"name"`
	IconUrl     string                   `json:"iconUrl"`
	Description string                   `json:"description"`
	WorkspaceId string                   `json:"workspaceId"`
	Monitors    []ChannelMonitorsMonitor `json:"monitors"`
}

// GetId returns Channel.Id, and is useful for accessing the field via an interface.
func (v *Channel) GetId() string { return v.Id }

// GetName returns Channel.Name, and is useful for accessing the field via an interface.
func (v *Channel) GetName() string { return v.Name }

// GetIconUrl returns Channel.IconUrl, and is useful for accessing the field via an interface.
func (v *Channel) GetIconUrl() string { return v.IconUrl }

// GetDescription returns Channel.Description, and is useful for accessing the field via an interface.
func (v *Channel) GetDescription() string { return v.Description }

// GetWorkspaceId returns Channel.WorkspaceId, and is useful for accessing the field via an interface.
func (v *Channel) GetWorkspaceId() string { return v.WorkspaceId }

// GetMonitors returns Channel.Monitors, and is useful for accessing the field via an interface.
func (v *Channel) GetMonitors() []ChannelMonitorsMonitor { return v.Monitors }

// ChannelAction includes the GraphQL fields of ChannelAction requested by the fragment ChannelAction.
//
// ChannelAction is implemented by the following types:
// ChannelActionEmailAction
// ChannelActionWebhookAction
// ChannelActionUnknownAction
type ChannelAction interface {
	implementsGraphQLInterfaceChannelAction()
	// GetId returns the interface-field "id" from its implementation.
	GetId() string
	// GetName returns the interface-field "name" from its implementation.
	GetName() string
	// GetIconUrl returns the interface-field "iconUrl" from its implementation.
	GetIconUrl() string
	// GetDescription returns the interface-field "description" from its implementation.
	GetDescription() string
	// GetNotifyOnClose returns the interface-field "notifyOnClose" from its implementation.
	GetNotifyOnClose() bool
	// GetWorkspaceId returns the interface-field "workspaceId" from its implementation.
	GetWorkspaceId() string
	// GetChannels returns the interface-field "channels" from its implementation.
	GetChannels() []ChannelActionChannelsChannel
	// GetRateLimit returns the interface-field "rateLimit" from its implementation.
	GetRateLimit() types.DurationScalar
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ChannelActionEmailAction) implementsGraphQLInterfaceChannelAction()   {}
func (v *ChannelActionWebhookAction) implementsGraphQLInterfaceChannelAction() {}
func (v *ChannelActionUnknownAction) implementsGraphQLInterfaceChannelAction() {}

func __unmarshalChannelAction(b []byte, v *ChannelAction) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "EmailAction":
		*v = new(ChannelActionEmailAction)
		return json.Unmarshal(b, *v)
	case "WebhookAction":
		*v = new(ChannelActionWebhookAction)
		return json.Unmarshal(b, *v)
	case "UnknownAction":
		*v = new(ChannelActionUnknownAction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ChannelAction.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ChannelAction: "%v"`, tn.TypeName)
	}
}

func __marshalChannelAction(v *ChannelAction) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ChannelActionEmailAction:
		typename = "EmailAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ChannelActionEmailAction
		}{typename, v}
		return json.Marshal(result)
	case *ChannelActionWebhookAction:
		typename = "WebhookAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ChannelActionWebhookAction
		}{typename, v}
		return json.Marshal(result)
	case *ChannelActionUnknownAction:
		typename = "UnknownAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ChannelActionUnknownAction
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ChannelAction: "%T"`, v)
	}
}

// ChannelActionChannelsChannel includes the requested fields of the GraphQL type Channel.
type ChannelActionChannelsChannel struct {
	Id string `json:"id"`
}

// GetId returns ChannelActionChannelsChannel.Id, and is useful for accessing the field via an interface.
func (v *ChannelActionChannelsChannel) GetId() string { return v.Id }

// ChannelAction includes the GraphQL fields of EmailAction requested by the fragment ChannelAction.
type ChannelActionEmailAction struct {
	Id              string                         `json:"id"`
	Name            string                         `json:"name"`
	IconUrl         string                         `json:"iconUrl"`
	Description     string                         `json:"description"`
	NotifyOnClose   bool                           `json:"notifyOnClose"`
	WorkspaceId     string                         `json:"workspaceId"`
	Channels        []ChannelActionChannelsChannel `json:"channels"`
	RateLimit       types.DurationScalar           `json:"rateLimit"`
	Typename        *string                        `json:"__typename"`
	TargetAddresses []string                       `json:"targetAddresses"`
	SubjectTemplate string                         `json:"subjectTemplate"`
	BodyTemplate    string                         `json:"bodyTemplate"`
	IsHtml          bool                           `json:"isHtml"`
}

// GetId returns ChannelActionEmailAction.Id, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetId() string { return v.Id }

// GetName returns ChannelActionEmailAction.Name, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetName() string { return v.Name }

// GetIconUrl returns ChannelActionEmailAction.IconUrl, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetIconUrl() string { return v.IconUrl }

// GetDescription returns ChannelActionEmailAction.Description, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetDescription() string { return v.Description }

// GetNotifyOnClose returns ChannelActionEmailAction.NotifyOnClose, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetNotifyOnClose() bool { return v.NotifyOnClose }

// GetWorkspaceId returns ChannelActionEmailAction.WorkspaceId, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetWorkspaceId() string { return v.WorkspaceId }

// GetChannels returns ChannelActionEmailAction.Channels, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetChannels() []ChannelActionChannelsChannel { return v.Channels }

// GetRateLimit returns ChannelActionEmailAction.RateLimit, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetRateLimit() types.DurationScalar { return v.RateLimit }

// GetTypename returns ChannelActionEmailAction.Typename, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetTypename() *string { return v.Typename }

// GetTargetAddresses returns ChannelActionEmailAction.TargetAddresses, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetTargetAddresses() []string { return v.TargetAddresses }

// GetSubjectTemplate returns ChannelActionEmailAction.SubjectTemplate, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetSubjectTemplate() string { return v.SubjectTemplate }

// GetBodyTemplate returns ChannelActionEmailAction.BodyTemplate, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetBodyTemplate() string { return v.BodyTemplate }

// GetIsHtml returns ChannelActionEmailAction.IsHtml, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetIsHtml() bool { return v.IsHtml }

// ChannelActionHeadersWebhookHeader includes the requested fields of the GraphQL type WebhookHeader.
type ChannelActionHeadersWebhookHeader struct {
	Header        string `json:"header"`
	ValueTemplate string `json:"valueTemplate"`
}

// GetHeader returns ChannelActionHeadersWebhookHeader.Header, and is useful for accessing the field via an interface.
func (v *ChannelActionHeadersWebhookHeader) GetHeader() string { return v.Header }

// GetValueTemplate returns ChannelActionHeadersWebhookHeader.ValueTemplate, and is useful for accessing the field via an interface.
func (v *ChannelActionHeadersWebhookHeader) GetValueTemplate() string { return v.ValueTemplate }

// ChannelAction includes the GraphQL fields of UnknownAction requested by the fragment ChannelAction.
type ChannelActionUnknownAction struct {
	Id            string                         `json:"id"`
	Name          string                         `json:"name"`
	IconUrl       string                         `json:"iconUrl"`
	Description   string                         `json:"description"`
	NotifyOnClose bool                           `json:"notifyOnClose"`
	WorkspaceId   string                         `json:"workspaceId"`
	Channels      []ChannelActionChannelsChannel `json:"channels"`
	RateLimit     types.DurationScalar           `json:"rateLimit"`
	Typename      *string                        `json:"__typename"`
}

// GetId returns ChannelActionUnknownAction.Id, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetId() string { return v.Id }

// GetName returns ChannelActionUnknownAction.Name, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetName() string { return v.Name }

// GetIconUrl returns ChannelActionUnknownAction.IconUrl, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetIconUrl() string { return v.IconUrl }

// GetDescription returns ChannelActionUnknownAction.Description, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetDescription() string { return v.Description }

// GetNotifyOnClose returns ChannelActionUnknownAction.NotifyOnClose, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetNotifyOnClose() bool { return v.NotifyOnClose }

// GetWorkspaceId returns ChannelActionUnknownAction.WorkspaceId, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetWorkspaceId() string { return v.WorkspaceId }

// GetChannels returns ChannelActionUnknownAction.Channels, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetChannels() []ChannelActionChannelsChannel { return v.Channels }

// GetRateLimit returns ChannelActionUnknownAction.RateLimit, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetRateLimit() types.DurationScalar { return v.RateLimit }

// GetTypename returns ChannelActionUnknownAction.Typename, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetTypename() *string { return v.Typename }

// ChannelAction includes the GraphQL fields of WebhookAction requested by the fragment ChannelAction.
type ChannelActionWebhookAction struct {
	Id            string                              `json:"id"`
	Name          string                              `json:"name"`
	IconUrl       string                              `json:"iconUrl"`
	Description   string                              `json:"description"`
	NotifyOnClose bool                                `json:"notifyOnClose"`
	WorkspaceId   string                              `json:"workspaceId"`
	Channels      []ChannelActionChannelsChannel      `json:"channels"`
	RateLimit     types.DurationScalar                `json:"rateLimit"`
	Typename      *string                             `json:"__typename"`
	UrlTemplate   string                              `json:"urlTemplate"`
	BodyTemplate  string                              `json:"bodyTemplate"`
	Method        string                              `json:"method"`
	Headers       []ChannelActionHeadersWebhookHeader `json:"headers"`
}

// GetId returns ChannelActionWebhookAction.Id, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetId() string { return v.Id }

// GetName returns ChannelActionWebhookAction.Name, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetName() string { return v.Name }

// GetIconUrl returns ChannelActionWebhookAction.IconUrl, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetIconUrl() string { return v.IconUrl }

// GetDescription returns ChannelActionWebhookAction.Description, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetDescription() string { return v.Description }

// GetNotifyOnClose returns ChannelActionWebhookAction.NotifyOnClose, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetNotifyOnClose() bool { return v.NotifyOnClose }

// GetWorkspaceId returns ChannelActionWebhookAction.WorkspaceId, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetWorkspaceId() string { return v.WorkspaceId }

// GetChannels returns ChannelActionWebhookAction.Channels, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetChannels() []ChannelActionChannelsChannel { return v.Channels }

// GetRateLimit returns ChannelActionWebhookAction.RateLimit, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetRateLimit() types.DurationScalar { return v.RateLimit }

// GetTypename returns ChannelActionWebhookAction.Typename, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetTypename() *string { return v.Typename }

// GetUrlTemplate returns ChannelActionWebhookAction.UrlTemplate, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetUrlTemplate() string { return v.UrlTemplate }

// GetBodyTemplate returns ChannelActionWebhookAction.BodyTemplate, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetBodyTemplate() string { return v.BodyTemplate }

// GetMethod returns ChannelActionWebhookAction.Method, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetMethod() string { return v.Method }

// GetHeaders returns ChannelActionWebhookAction.Headers, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetHeaders() []ChannelActionHeadersWebhookHeader {
	return v.Headers
}

type ChannelInput struct {
	Name        *string `json:"name"`
	IconUrl     *string `json:"iconUrl"`
	Description *string `json:"description"`
}

// GetName returns ChannelInput.Name, and is useful for accessing the field via an interface.
func (v *ChannelInput) GetName() *string { return v.Name }

// GetIconUrl returns ChannelInput.IconUrl, and is useful for accessing the field via an interface.
func (v *ChannelInput) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns ChannelInput.Description, and is useful for accessing the field via an interface.
func (v *ChannelInput) GetDescription() *string { return v.Description }

// ChannelMonitorsMonitor includes the requested fields of the GraphQL type Monitor.
type ChannelMonitorsMonitor struct {
	Id string `json:"id"`
}

// GetId returns ChannelMonitorsMonitor.Id, and is useful for accessing the field via an interface.
func (v *ChannelMonitorsMonitor) GetId() string { return v.Id }

type ColumnAndValueInput struct {
	Name  string  `json:"name"`
	Value *string `json:"value"`
}

// GetName returns ColumnAndValueInput.Name, and is useful for accessing the field via an interface.
func (v *ColumnAndValueInput) GetName() string { return v.Name }

// GetValue returns ColumnAndValueInput.Value, and is useful for accessing the field via an interface.
func (v *ColumnAndValueInput) GetValue() *string { return v.Value }

type ColumnOrderInput struct {
	ColumnName string `json:"columnName"`
	// default is descending, which is great for timestamps
	Ascending    *bool         `json:"ascending"`
	NullOrdering *NullOrdering `json:"nullOrdering"`
}

// GetColumnName returns ColumnOrderInput.ColumnName, and is useful for accessing the field via an interface.
func (v *ColumnOrderInput) GetColumnName() string { return v.ColumnName }

// GetAscending returns ColumnOrderInput.Ascending, and is useful for accessing the field via an interface.
func (v *ColumnOrderInput) GetAscending() *bool { return v.Ascending }

// GetNullOrdering returns ColumnOrderInput.NullOrdering, and is useful for accessing the field via an interface.
func (v *ColumnOrderInput) GetNullOrdering() *NullOrdering { return v.NullOrdering }

type CompareFunction string

const (
	CompareFunctionEqual          CompareFunction = "Equal"
	CompareFunctionNotequal       CompareFunction = "NotEqual"
	CompareFunctionGreater        CompareFunction = "Greater"
	CompareFunctionGreaterorequal CompareFunction = "GreaterOrEqual"
	CompareFunctionLess           CompareFunction = "Less"
	CompareFunctionLessorequal    CompareFunction = "LessOrEqual"
	// lower value inclusive, upper value exclusive
	CompareFunctionIninterval CompareFunction = "InInterval"
	// lower value exclusive, upper value inclusive
	CompareFunctionNotininterval CompareFunction = "NotInInterval"
	CompareFunctionIsnull        CompareFunction = "IsNull"
	CompareFunctionIsnotnull     CompareFunction = "IsNotNull"
)

type CursorCacheMode string

const (
	CursorCacheModeAlwayscache     CursorCacheMode = "AlwaysCache"
	CursorCacheModeAlwaysdontcache CursorCacheMode = "AlwaysDontCache"
	// This mode will cache the cursor if not all data is returned by the initial
	// query. Specifically, cursor will be cached if any of the following
	// conditions is true:
	// 1) initialRows != -1 && the query returns more rows than requested
	// 2) initialRows == -1 && the query returns rollup results and the rollup
	// filter is not in "all" mode.
	CursorCacheModeCacheifmoredata CursorCacheMode = "CacheIfMoreData"
)

// Dashboard includes the GraphQL fields of Dashboard requested by the fragment Dashboard.
type Dashboard struct {
	Id              string                                     `json:"id"`
	Name            string                                     `json:"name"`
	IconUrl         *string                                    `json:"iconUrl"`
	WorkspaceId     string                                     `json:"workspaceId"`
	ManagedById     *string                                    `json:"managedById"`
	FolderId        string                                     `json:"folderId"`
	Layout          *types.JsonObject                          `json:"layout"`
	Stages          []DashboardStagesStageQuery                `json:"stages"`
	Parameters      []DashboardParametersParameterSpec         `json:"parameters"`
	ParameterValues []DashboardParameterValuesParameterBinding `json:"parameterValues"`
}

// GetId returns Dashboard.Id, and is useful for accessing the field via an interface.
func (v *Dashboard) GetId() string { return v.Id }

// GetName returns Dashboard.Name, and is useful for accessing the field via an interface.
func (v *Dashboard) GetName() string { return v.Name }

// GetIconUrl returns Dashboard.IconUrl, and is useful for accessing the field via an interface.
func (v *Dashboard) GetIconUrl() *string { return v.IconUrl }

// GetWorkspaceId returns Dashboard.WorkspaceId, and is useful for accessing the field via an interface.
func (v *Dashboard) GetWorkspaceId() string { return v.WorkspaceId }

// GetManagedById returns Dashboard.ManagedById, and is useful for accessing the field via an interface.
func (v *Dashboard) GetManagedById() *string { return v.ManagedById }

// GetFolderId returns Dashboard.FolderId, and is useful for accessing the field via an interface.
func (v *Dashboard) GetFolderId() string { return v.FolderId }

// GetLayout returns Dashboard.Layout, and is useful for accessing the field via an interface.
func (v *Dashboard) GetLayout() *types.JsonObject { return v.Layout }

// GetStages returns Dashboard.Stages, and is useful for accessing the field via an interface.
func (v *Dashboard) GetStages() []DashboardStagesStageQuery { return v.Stages }

// GetParameters returns Dashboard.Parameters, and is useful for accessing the field via an interface.
func (v *Dashboard) GetParameters() []DashboardParametersParameterSpec { return v.Parameters }

// GetParameterValues returns Dashboard.ParameterValues, and is useful for accessing the field via an interface.
func (v *Dashboard) GetParameterValues() []DashboardParameterValuesParameterBinding {
	return v.ParameterValues
}

type DashboardInput struct {
	// if id is not specified, a new dashboard is created
	Id              *string                 `json:"id"`
	Name            *string                 `json:"name"`
	Description     *string                 `json:"description"`
	IconUrl         *string                 `json:"iconUrl"`
	WorkspaceId     *string                 `json:"workspaceId"`
	ManagedById     *string                 `json:"managedById"`
	FolderId        *string                 `json:"folderId"`
	Layout          *types.JsonObject       `json:"layout"`
	Stages          []StageQueryInput       `json:"stages"`
	Parameters      []ParameterSpecInput    `json:"parameters"`
	ParameterValues []ParameterBindingInput `json:"parameterValues"`
}

// GetId returns DashboardInput.Id, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetId() *string { return v.Id }

// GetName returns DashboardInput.Name, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetName() *string { return v.Name }

// GetDescription returns DashboardInput.Description, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetDescription() *string { return v.Description }

// GetIconUrl returns DashboardInput.IconUrl, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetIconUrl() *string { return v.IconUrl }

// GetWorkspaceId returns DashboardInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetWorkspaceId() *string { return v.WorkspaceId }

// GetManagedById returns DashboardInput.ManagedById, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetManagedById() *string { return v.ManagedById }

// GetFolderId returns DashboardInput.FolderId, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetFolderId() *string { return v.FolderId }

// GetLayout returns DashboardInput.Layout, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetLayout() *types.JsonObject { return v.Layout }

// GetStages returns DashboardInput.Stages, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetStages() []StageQueryInput { return v.Stages }

// GetParameters returns DashboardInput.Parameters, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetParameters() []ParameterSpecInput { return v.Parameters }

// GetParameterValues returns DashboardInput.ParameterValues, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetParameterValues() []ParameterBindingInput { return v.ParameterValues }

// DashboardParameterValuesParameterBinding includes the requested fields of the GraphQL type ParameterBinding.
type DashboardParameterValuesParameterBinding struct {
	Id    string                                        `json:"id"`
	Value DashboardParameterValuesParameterBindingValue `json:"value"`
}

// GetId returns DashboardParameterValuesParameterBinding.Id, and is useful for accessing the field via an interface.
func (v *DashboardParameterValuesParameterBinding) GetId() string { return v.Id }

// GetValue returns DashboardParameterValuesParameterBinding.Value, and is useful for accessing the field via an interface.
func (v *DashboardParameterValuesParameterBinding) GetValue() DashboardParameterValuesParameterBindingValue {
	return v.Value
}

// DashboardParameterValuesParameterBindingValue includes the requested fields of the GraphQL type Value.
type DashboardParameterValuesParameterBindingValue struct {
	valueFields `json:"-"`
}

// GetBool returns DashboardParameterValuesParameterBindingValue.Bool, and is useful for accessing the field via an interface.
func (v *DashboardParameterValuesParameterBindingValue) GetBool() *bool { return v.valueFields.Bool }

// GetFloat64 returns DashboardParameterValuesParameterBindingValue.Float64, and is useful for accessing the field via an interface.
func (v *DashboardParameterValuesParameterBindingValue) GetFloat64() *float64 {
	return v.valueFields.Float64
}

// GetInt64 returns DashboardParameterValuesParameterBindingValue.Int64, and is useful for accessing the field via an interface.
func (v *DashboardParameterValuesParameterBindingValue) GetInt64() *types.Int64Scalar {
	return v.valueFields.Int64
}

// GetString returns DashboardParameterValuesParameterBindingValue.String, and is useful for accessing the field via an interface.
func (v *DashboardParameterValuesParameterBindingValue) GetString() *string {
	return v.valueFields.String
}

// GetArray returns DashboardParameterValuesParameterBindingValue.Array, and is useful for accessing the field via an interface.
func (v *DashboardParameterValuesParameterBindingValue) GetArray() *valueFieldsArrayValueArray {
	return v.valueFields.Array
}

// GetLink returns DashboardParameterValuesParameterBindingValue.Link, and is useful for accessing the field via an interface.
func (v *DashboardParameterValuesParameterBindingValue) GetLink() *valueFieldsLinkValueLink {
	return v.valueFields.Link
}

// GetDatasetref returns DashboardParameterValuesParameterBindingValue.Datasetref, and is useful for accessing the field via an interface.
func (v *DashboardParameterValuesParameterBindingValue) GetDatasetref() *valueFieldsDatasetrefValueDatasetref {
	return v.valueFields.Datasetref
}

func (v *DashboardParameterValuesParameterBindingValue) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DashboardParameterValuesParameterBindingValue
		graphql.NoUnmarshalJSON
	}
	firstPass.DashboardParameterValuesParameterBindingValue = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.valueFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDashboardParameterValuesParameterBindingValue struct {
	Bool *bool `json:"bool"`

	Float64 *float64 `json:"float64"`

	Int64 *types.Int64Scalar `json:"int64"`

	String *string `json:"string"`

	Array *valueFieldsArrayValueArray `json:"array"`

	Link *valueFieldsLinkValueLink `json:"link"`

	Datasetref *valueFieldsDatasetrefValueDatasetref `json:"datasetref"`
}

func (v *DashboardParameterValuesParameterBindingValue) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DashboardParameterValuesParameterBindingValue) __premarshalJSON() (*__premarshalDashboardParameterValuesParameterBindingValue, error) {
	var retval __premarshalDashboardParameterValuesParameterBindingValue

	retval.Bool = v.valueFields.Bool
	retval.Float64 = v.valueFields.Float64
	retval.Int64 = v.valueFields.Int64
	retval.String = v.valueFields.String
	retval.Array = v.valueFields.Array
	retval.Link = v.valueFields.Link
	retval.Datasetref = v.valueFields.Datasetref
	return &retval, nil
}

// DashboardParametersParameterSpec includes the requested fields of the GraphQL type ParameterSpec.
type DashboardParametersParameterSpec struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	// optional default value
	DefaultValue *DashboardParametersParameterSpecDefaultValue          `json:"defaultValue"`
	ValueKind    DashboardParametersParameterSpecValueKindValueTypeSpec `json:"valueKind"`
}

// GetId returns DashboardParametersParameterSpec.Id, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpec) GetId() string { return v.Id }

// GetName returns DashboardParametersParameterSpec.Name, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpec) GetName() string { return v.Name }

// GetDefaultValue returns DashboardParametersParameterSpec.DefaultValue, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpec) GetDefaultValue() *DashboardParametersParameterSpecDefaultValue {
	return v.DefaultValue
}

// GetValueKind returns DashboardParametersParameterSpec.ValueKind, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpec) GetValueKind() DashboardParametersParameterSpecValueKindValueTypeSpec {
	return v.ValueKind
}

// DashboardParametersParameterSpecDefaultValue includes the requested fields of the GraphQL type Value.
type DashboardParametersParameterSpecDefaultValue struct {
	valueFields `json:"-"`
}

// GetBool returns DashboardParametersParameterSpecDefaultValue.Bool, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecDefaultValue) GetBool() *bool { return v.valueFields.Bool }

// GetFloat64 returns DashboardParametersParameterSpecDefaultValue.Float64, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecDefaultValue) GetFloat64() *float64 {
	return v.valueFields.Float64
}

// GetInt64 returns DashboardParametersParameterSpecDefaultValue.Int64, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecDefaultValue) GetInt64() *types.Int64Scalar {
	return v.valueFields.Int64
}

// GetString returns DashboardParametersParameterSpecDefaultValue.String, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecDefaultValue) GetString() *string {
	return v.valueFields.String
}

// GetArray returns DashboardParametersParameterSpecDefaultValue.Array, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecDefaultValue) GetArray() *valueFieldsArrayValueArray {
	return v.valueFields.Array
}

// GetLink returns DashboardParametersParameterSpecDefaultValue.Link, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecDefaultValue) GetLink() *valueFieldsLinkValueLink {
	return v.valueFields.Link
}

// GetDatasetref returns DashboardParametersParameterSpecDefaultValue.Datasetref, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecDefaultValue) GetDatasetref() *valueFieldsDatasetrefValueDatasetref {
	return v.valueFields.Datasetref
}

func (v *DashboardParametersParameterSpecDefaultValue) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DashboardParametersParameterSpecDefaultValue
		graphql.NoUnmarshalJSON
	}
	firstPass.DashboardParametersParameterSpecDefaultValue = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.valueFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDashboardParametersParameterSpecDefaultValue struct {
	Bool *bool `json:"bool"`

	Float64 *float64 `json:"float64"`

	Int64 *types.Int64Scalar `json:"int64"`

	String *string `json:"string"`

	Array *valueFieldsArrayValueArray `json:"array"`

	Link *valueFieldsLinkValueLink `json:"link"`

	Datasetref *valueFieldsDatasetrefValueDatasetref `json:"datasetref"`
}

func (v *DashboardParametersParameterSpecDefaultValue) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DashboardParametersParameterSpecDefaultValue) __premarshalJSON() (*__premarshalDashboardParametersParameterSpecDefaultValue, error) {
	var retval __premarshalDashboardParametersParameterSpecDefaultValue

	retval.Bool = v.valueFields.Bool
	retval.Float64 = v.valueFields.Float64
	retval.Int64 = v.valueFields.Int64
	retval.String = v.valueFields.String
	retval.Array = v.valueFields.Array
	retval.Link = v.valueFields.Link
	retval.Datasetref = v.valueFields.Datasetref
	return &retval, nil
}

// DashboardParametersParameterSpecValueKindValueTypeSpec includes the requested fields of the GraphQL type ValueTypeSpec.
type DashboardParametersParameterSpecValueKindValueTypeSpec struct {
	Type            ValueType                                                                         `json:"type"`
	KeyForDatasetId *string                                                                           `json:"keyForDatasetId"`
	ArrayItemType   *DashboardParametersParameterSpecValueKindValueTypeSpecArrayItemTypeValueTypeSpec `json:"arrayItemType"`
}

// GetType returns DashboardParametersParameterSpecValueKindValueTypeSpec.Type, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecValueKindValueTypeSpec) GetType() ValueType { return v.Type }

// GetKeyForDatasetId returns DashboardParametersParameterSpecValueKindValueTypeSpec.KeyForDatasetId, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecValueKindValueTypeSpec) GetKeyForDatasetId() *string {
	return v.KeyForDatasetId
}

// GetArrayItemType returns DashboardParametersParameterSpecValueKindValueTypeSpec.ArrayItemType, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecValueKindValueTypeSpec) GetArrayItemType() *DashboardParametersParameterSpecValueKindValueTypeSpecArrayItemTypeValueTypeSpec {
	return v.ArrayItemType
}

// DashboardParametersParameterSpecValueKindValueTypeSpecArrayItemTypeValueTypeSpec includes the requested fields of the GraphQL type ValueTypeSpec.
type DashboardParametersParameterSpecValueKindValueTypeSpecArrayItemTypeValueTypeSpec struct {
	Type            ValueType `json:"type"`
	KeyForDatasetId *string   `json:"keyForDatasetId"`
}

// GetType returns DashboardParametersParameterSpecValueKindValueTypeSpecArrayItemTypeValueTypeSpec.Type, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecValueKindValueTypeSpecArrayItemTypeValueTypeSpec) GetType() ValueType {
	return v.Type
}

// GetKeyForDatasetId returns DashboardParametersParameterSpecValueKindValueTypeSpecArrayItemTypeValueTypeSpec.KeyForDatasetId, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecValueKindValueTypeSpecArrayItemTypeValueTypeSpec) GetKeyForDatasetId() *string {
	return v.KeyForDatasetId
}

// DashboardStagesStageQuery includes the requested fields of the GraphQL type StageQuery.
type DashboardStagesStageQuery struct {
	Id       *string                                          `json:"id"`
	Input    []*DashboardStagesStageQueryInputInputDefinition `json:"input"`
	Params   *types.JsonObject                                `json:"params"`
	Layout   *types.JsonObject                                `json:"layout"`
	Pipeline string                                           `json:"pipeline"`
}

// GetId returns DashboardStagesStageQuery.Id, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQuery) GetId() *string { return v.Id }

// GetInput returns DashboardStagesStageQuery.Input, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQuery) GetInput() []*DashboardStagesStageQueryInputInputDefinition {
	return v.Input
}

// GetParams returns DashboardStagesStageQuery.Params, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQuery) GetParams() *types.JsonObject { return v.Params }

// GetLayout returns DashboardStagesStageQuery.Layout, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQuery) GetLayout() *types.JsonObject { return v.Layout }

// GetPipeline returns DashboardStagesStageQuery.Pipeline, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQuery) GetPipeline() string { return v.Pipeline }

// DashboardStagesStageQueryInputInputDefinition includes the requested fields of the GraphQL type InputDefinition.
type DashboardStagesStageQueryInputInputDefinition struct {
	// Assign the short and unique user mnemonic for this input, used in @tableref expressions
	InputName string    `json:"inputName"`
	InputRole InputRole `json:"inputRole"`
	// One of the input definition fields is used; the others are null
	// because GO doesn't have unions.
	DatasetId   *string `json:"datasetId"`
	DatasetPath *string `json:"datasetPath"`
	// Only set stageId to reference input that comes from an actual stage in the same query
	StageId *string `json:"stageId"`
}

// GetInputName returns DashboardStagesStageQueryInputInputDefinition.InputName, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQueryInputInputDefinition) GetInputName() string { return v.InputName }

// GetInputRole returns DashboardStagesStageQueryInputInputDefinition.InputRole, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQueryInputInputDefinition) GetInputRole() InputRole { return v.InputRole }

// GetDatasetId returns DashboardStagesStageQueryInputInputDefinition.DatasetId, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQueryInputInputDefinition) GetDatasetId() *string { return v.DatasetId }

// GetDatasetPath returns DashboardStagesStageQueryInputInputDefinition.DatasetPath, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQueryInputInputDefinition) GetDatasetPath() *string {
	return v.DatasetPath
}

// GetStageId returns DashboardStagesStageQueryInputInputDefinition.StageId, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQueryInputInputDefinition) GetStageId() *string { return v.StageId }

// Dataset includes the GraphQL fields of Dataset requested by the fragment Dataset.
type Dataset struct {
	WorkspaceId string `json:"workspaceId"`
	Id          string `json:"id"`
	// deprecated in favor of name
	Label                         string                                   `json:"label"`
	FreshnessDesired              *types.Int64Scalar                       `json:"freshnessDesired"`
	Description                   *string                                  `json:"description"`
	IconUrl                       *string                                  `json:"iconUrl"`
	Version                       types.TimeScalar                         `json:"version"`
	LastSaved                     types.TimeScalar                         `json:"lastSaved"`
	PathCost                      *types.Int64Scalar                       `json:"pathCost"`
	Source                        *string                                  `json:"source"`
	ManagedById                   *string                                  `json:"managedById"`
	OnDemandMaterializationLength *types.Int64Scalar                       `json:"onDemandMaterializationLength"`
	ForeignKeys                   []DatasetForeignKeysForeignKey           `json:"foreignKeys"`
	Transform                     *DatasetTransform                        `json:"transform"`
	Typedef                       DatasetTypedef                           `json:"typedef"`
	SourceTable                   *DatasetSourceTableSourceTableDefinition `json:"sourceTable"`
}

// GetWorkspaceId returns Dataset.WorkspaceId, and is useful for accessing the field via an interface.
func (v *Dataset) GetWorkspaceId() string { return v.WorkspaceId }

// GetId returns Dataset.Id, and is useful for accessing the field via an interface.
func (v *Dataset) GetId() string { return v.Id }

// GetLabel returns Dataset.Label, and is useful for accessing the field via an interface.
func (v *Dataset) GetLabel() string { return v.Label }

// GetFreshnessDesired returns Dataset.FreshnessDesired, and is useful for accessing the field via an interface.
func (v *Dataset) GetFreshnessDesired() *types.Int64Scalar { return v.FreshnessDesired }

// GetDescription returns Dataset.Description, and is useful for accessing the field via an interface.
func (v *Dataset) GetDescription() *string { return v.Description }

// GetIconUrl returns Dataset.IconUrl, and is useful for accessing the field via an interface.
func (v *Dataset) GetIconUrl() *string { return v.IconUrl }

// GetVersion returns Dataset.Version, and is useful for accessing the field via an interface.
func (v *Dataset) GetVersion() types.TimeScalar { return v.Version }

// GetLastSaved returns Dataset.LastSaved, and is useful for accessing the field via an interface.
func (v *Dataset) GetLastSaved() types.TimeScalar { return v.LastSaved }

// GetPathCost returns Dataset.PathCost, and is useful for accessing the field via an interface.
func (v *Dataset) GetPathCost() *types.Int64Scalar { return v.PathCost }

// GetSource returns Dataset.Source, and is useful for accessing the field via an interface.
func (v *Dataset) GetSource() *string { return v.Source }

// GetManagedById returns Dataset.ManagedById, and is useful for accessing the field via an interface.
func (v *Dataset) GetManagedById() *string { return v.ManagedById }

// GetOnDemandMaterializationLength returns Dataset.OnDemandMaterializationLength, and is useful for accessing the field via an interface.
func (v *Dataset) GetOnDemandMaterializationLength() *types.Int64Scalar {
	return v.OnDemandMaterializationLength
}

// GetForeignKeys returns Dataset.ForeignKeys, and is useful for accessing the field via an interface.
func (v *Dataset) GetForeignKeys() []DatasetForeignKeysForeignKey { return v.ForeignKeys }

// GetTransform returns Dataset.Transform, and is useful for accessing the field via an interface.
func (v *Dataset) GetTransform() *DatasetTransform { return v.Transform }

// GetTypedef returns Dataset.Typedef, and is useful for accessing the field via an interface.
func (v *Dataset) GetTypedef() DatasetTypedef { return v.Typedef }

// GetSourceTable returns Dataset.SourceTable, and is useful for accessing the field via an interface.
func (v *Dataset) GetSourceTable() *DatasetSourceTableSourceTableDefinition { return v.SourceTable }

type DatasetDefinitionInput struct {
	Dataset  DatasetInput                    `json:"dataset"`
	Schema   []DatasetFieldDefInput          `json:"schema"`
	Metadata *DatasetDefinitionMetadataInput `json:"metadata"`
}

// GetDataset returns DatasetDefinitionInput.Dataset, and is useful for accessing the field via an interface.
func (v *DatasetDefinitionInput) GetDataset() DatasetInput { return v.Dataset }

// GetSchema returns DatasetDefinitionInput.Schema, and is useful for accessing the field via an interface.
func (v *DatasetDefinitionInput) GetSchema() []DatasetFieldDefInput { return v.Schema }

// GetMetadata returns DatasetDefinitionInput.Metadata, and is useful for accessing the field via an interface.
func (v *DatasetDefinitionInput) GetMetadata() *DatasetDefinitionMetadataInput { return v.Metadata }

// All of the values of DatasetDefinitionMetadataInput are optional, but you
// can't, for example, reference a dataset from another dataset until you define
// its primary key, and it won't be an event dataset without having a
// validFromField.
type DatasetDefinitionMetadataInput struct {
	ValidFromField *string    `json:"validFromField"`
	ValidToField   *string    `json:"validToField"`
	LabelField     *string    `json:"labelField"`
	PrimaryKey     []string   `json:"primaryKey"`
	Keys           [][]string `json:"keys"`
}

// GetValidFromField returns DatasetDefinitionMetadataInput.ValidFromField, and is useful for accessing the field via an interface.
func (v *DatasetDefinitionMetadataInput) GetValidFromField() *string { return v.ValidFromField }

// GetValidToField returns DatasetDefinitionMetadataInput.ValidToField, and is useful for accessing the field via an interface.
func (v *DatasetDefinitionMetadataInput) GetValidToField() *string { return v.ValidToField }

// GetLabelField returns DatasetDefinitionMetadataInput.LabelField, and is useful for accessing the field via an interface.
func (v *DatasetDefinitionMetadataInput) GetLabelField() *string { return v.LabelField }

// GetPrimaryKey returns DatasetDefinitionMetadataInput.PrimaryKey, and is useful for accessing the field via an interface.
func (v *DatasetDefinitionMetadataInput) GetPrimaryKey() []string { return v.PrimaryKey }

// GetKeys returns DatasetDefinitionMetadataInput.Keys, and is useful for accessing the field via an interface.
func (v *DatasetDefinitionMetadataInput) GetKeys() [][]string { return v.Keys }

type DatasetFieldDefInput struct {
	Name         string                `json:"name"`
	Type         DatasetFieldTypeInput `json:"type"`
	IsEnum       *bool                 `json:"isEnum"`
	IsSearchable *bool                 `json:"isSearchable"`
	IsHidden     *bool                 `json:"isHidden"`
	IsConst      *bool                 `json:"isConst"`
	IsMetric     *bool                 `json:"isMetric"`
}

// GetName returns DatasetFieldDefInput.Name, and is useful for accessing the field via an interface.
func (v *DatasetFieldDefInput) GetName() string { return v.Name }

// GetType returns DatasetFieldDefInput.Type, and is useful for accessing the field via an interface.
func (v *DatasetFieldDefInput) GetType() DatasetFieldTypeInput { return v.Type }

// GetIsEnum returns DatasetFieldDefInput.IsEnum, and is useful for accessing the field via an interface.
func (v *DatasetFieldDefInput) GetIsEnum() *bool { return v.IsEnum }

// GetIsSearchable returns DatasetFieldDefInput.IsSearchable, and is useful for accessing the field via an interface.
func (v *DatasetFieldDefInput) GetIsSearchable() *bool { return v.IsSearchable }

// GetIsHidden returns DatasetFieldDefInput.IsHidden, and is useful for accessing the field via an interface.
func (v *DatasetFieldDefInput) GetIsHidden() *bool { return v.IsHidden }

// GetIsConst returns DatasetFieldDefInput.IsConst, and is useful for accessing the field via an interface.
func (v *DatasetFieldDefInput) GetIsConst() *bool { return v.IsConst }

// GetIsMetric returns DatasetFieldDefInput.IsMetric, and is useful for accessing the field via an interface.
func (v *DatasetFieldDefInput) GetIsMetric() *bool { return v.IsMetric }

type DatasetFieldTypeInput struct {
	Rep      string               `json:"rep"`
	Def      *DatasetTypedefInput `json:"def"`
	Nullable *bool                `json:"nullable,omitempty"`
}

// GetRep returns DatasetFieldTypeInput.Rep, and is useful for accessing the field via an interface.
func (v *DatasetFieldTypeInput) GetRep() string { return v.Rep }

// GetDef returns DatasetFieldTypeInput.Def, and is useful for accessing the field via an interface.
func (v *DatasetFieldTypeInput) GetDef() *DatasetTypedefInput { return v.Def }

// GetNullable returns DatasetFieldTypeInput.Nullable, and is useful for accessing the field via an interface.
func (v *DatasetFieldTypeInput) GetNullable() *bool { return v.Nullable }

// DatasetForeignKeysForeignKey includes the requested fields of the GraphQL type ForeignKey.
type DatasetForeignKeysForeignKey struct {
	Label         *string            `json:"label"`
	TargetDataset *types.Int64Scalar `json:"targetDataset"`
	SrcFields     []string           `json:"srcFields"`
	DstFields     []string           `json:"dstFields"`
}

// GetLabel returns DatasetForeignKeysForeignKey.Label, and is useful for accessing the field via an interface.
func (v *DatasetForeignKeysForeignKey) GetLabel() *string { return v.Label }

// GetTargetDataset returns DatasetForeignKeysForeignKey.TargetDataset, and is useful for accessing the field via an interface.
func (v *DatasetForeignKeysForeignKey) GetTargetDataset() *types.Int64Scalar { return v.TargetDataset }

// GetSrcFields returns DatasetForeignKeysForeignKey.SrcFields, and is useful for accessing the field via an interface.
func (v *DatasetForeignKeysForeignKey) GetSrcFields() []string { return v.SrcFields }

// GetDstFields returns DatasetForeignKeysForeignKey.DstFields, and is useful for accessing the field via an interface.
func (v *DatasetForeignKeysForeignKey) GetDstFields() []string { return v.DstFields }

type DatasetInput struct {
	// if id is not specified, a new dataset is created
	Id          *string `json:"id"`
	Label       string  `json:"label"`
	Description *string `json:"description"`
	// Format - source/comment. Examples - monitor/471142069, web/user created.
	Source *string `json:"source"`
	// Used only when id is specified - that is to say, only when the dataset is updated.
	OverwriteSource  *bool              `json:"overwriteSource"`
	Deleted          *bool              `json:"deleted,omitempty"`
	LatencyDesired   *types.Int64Scalar `json:"latencyDesired"`
	FreshnessDesired *types.Int64Scalar `json:"freshnessDesired"`
	IconUrl          *string            `json:"iconUrl"`
	Layout           *types.JsonObject  `json:"layout"`
	PathCost         *types.Int64Scalar `json:"pathCost"`
	// Max on-demand materialization length for the dataset (in nanoseconds). If not set
	// will use the default value in transformer config.
	OnDemandMaterializationLength *types.Int64Scalar `json:"onDemandMaterializationLength"`
	// Optional id of the object this dataset is managed by: app, datastream, monitor etc.
	ManagedById *string `json:"managedById"`
}

// GetId returns DatasetInput.Id, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetId() *string { return v.Id }

// GetLabel returns DatasetInput.Label, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetLabel() string { return v.Label }

// GetDescription returns DatasetInput.Description, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetDescription() *string { return v.Description }

// GetSource returns DatasetInput.Source, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetSource() *string { return v.Source }

// GetOverwriteSource returns DatasetInput.OverwriteSource, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetOverwriteSource() *bool { return v.OverwriteSource }

// GetDeleted returns DatasetInput.Deleted, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetDeleted() *bool { return v.Deleted }

// GetLatencyDesired returns DatasetInput.LatencyDesired, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetLatencyDesired() *types.Int64Scalar { return v.LatencyDesired }

// GetFreshnessDesired returns DatasetInput.FreshnessDesired, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetFreshnessDesired() *types.Int64Scalar { return v.FreshnessDesired }

// GetIconUrl returns DatasetInput.IconUrl, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetIconUrl() *string { return v.IconUrl }

// GetLayout returns DatasetInput.Layout, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetLayout() *types.JsonObject { return v.Layout }

// GetPathCost returns DatasetInput.PathCost, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetPathCost() *types.Int64Scalar { return v.PathCost }

// GetOnDemandMaterializationLength returns DatasetInput.OnDemandMaterializationLength, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetOnDemandMaterializationLength() *types.Int64Scalar {
	return v.OnDemandMaterializationLength
}

// GetManagedById returns DatasetInput.ManagedById, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetManagedById() *string { return v.ManagedById }

// DatasetSourceTableSourceTableDefinition includes the requested fields of the GraphQL type SourceTableDefinition.
type DatasetSourceTableSourceTableDefinition struct {
	Schema                string                                                                    `json:"schema"`
	TableName             string                                                                    `json:"tableName"`
	SourceUpdateTableName *string                                                                   `json:"sourceUpdateTableName"`
	IsInsertOnly          *bool                                                                     `json:"isInsertOnly"`
	BatchSeqField         *string                                                                   `json:"batchSeqField"`
	ValidFromField        *string                                                                   `json:"validFromField"`
	Fields                []DatasetSourceTableSourceTableDefinitionFieldsSourceTableFieldDefinition `json:"fields"`
}

// GetSchema returns DatasetSourceTableSourceTableDefinition.Schema, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinition) GetSchema() string { return v.Schema }

// GetTableName returns DatasetSourceTableSourceTableDefinition.TableName, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinition) GetTableName() string { return v.TableName }

// GetSourceUpdateTableName returns DatasetSourceTableSourceTableDefinition.SourceUpdateTableName, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinition) GetSourceUpdateTableName() *string {
	return v.SourceUpdateTableName
}

// GetIsInsertOnly returns DatasetSourceTableSourceTableDefinition.IsInsertOnly, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinition) GetIsInsertOnly() *bool { return v.IsInsertOnly }

// GetBatchSeqField returns DatasetSourceTableSourceTableDefinition.BatchSeqField, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinition) GetBatchSeqField() *string { return v.BatchSeqField }

// GetValidFromField returns DatasetSourceTableSourceTableDefinition.ValidFromField, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinition) GetValidFromField() *string {
	return v.ValidFromField
}

// GetFields returns DatasetSourceTableSourceTableDefinition.Fields, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinition) GetFields() []DatasetSourceTableSourceTableDefinitionFieldsSourceTableFieldDefinition {
	return v.Fields
}

// DatasetSourceTableSourceTableDefinitionFieldsSourceTableFieldDefinition includes the requested fields of the GraphQL type SourceTableFieldDefinition.
type DatasetSourceTableSourceTableDefinitionFieldsSourceTableFieldDefinition struct {
	Name    string `json:"name"`
	SqlType string `json:"sqlType"`
}

// GetName returns DatasetSourceTableSourceTableDefinitionFieldsSourceTableFieldDefinition.Name, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinitionFieldsSourceTableFieldDefinition) GetName() string {
	return v.Name
}

// GetSqlType returns DatasetSourceTableSourceTableDefinitionFieldsSourceTableFieldDefinition.SqlType, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinitionFieldsSourceTableFieldDefinition) GetSqlType() string {
	return v.SqlType
}

// DatasetTransform includes the requested fields of the GraphQL type Transform.
type DatasetTransform struct {
	Current *DatasetTransformCurrentTransformVersion `json:"current"`
}

// GetCurrent returns DatasetTransform.Current, and is useful for accessing the field via an interface.
func (v *DatasetTransform) GetCurrent() *DatasetTransformCurrentTransformVersion { return v.Current }

// DatasetTransformCurrentTransformVersion includes the requested fields of the GraphQL type TransformVersion.
type DatasetTransformCurrentTransformVersion struct {
	Query DatasetTransformCurrentTransformVersionQueryMultiStageQuery `json:"query"`
}

// GetQuery returns DatasetTransformCurrentTransformVersion.Query, and is useful for accessing the field via an interface.
func (v *DatasetTransformCurrentTransformVersion) GetQuery() DatasetTransformCurrentTransformVersionQueryMultiStageQuery {
	return v.Query
}

// DatasetTransformCurrentTransformVersionQueryMultiStageQuery includes the requested fields of the GraphQL type MultiStageQuery.
type DatasetTransformCurrentTransformVersionQueryMultiStageQuery struct {
	OutputStage string        `json:"outputStage"`
	Stages      []*StageQuery `json:"stages"`
}

// GetOutputStage returns DatasetTransformCurrentTransformVersionQueryMultiStageQuery.OutputStage, and is useful for accessing the field via an interface.
func (v *DatasetTransformCurrentTransformVersionQueryMultiStageQuery) GetOutputStage() string {
	return v.OutputStage
}

// GetStages returns DatasetTransformCurrentTransformVersionQueryMultiStageQuery.Stages, and is useful for accessing the field via an interface.
func (v *DatasetTransformCurrentTransformVersionQueryMultiStageQuery) GetStages() []*StageQuery {
	return v.Stages
}

// DatasetTypedef includes the requested fields of the GraphQL type Typedef.
type DatasetTypedef struct {
	Label string                          `json:"label"`
	Def   *DatasetTypedefDefObjectTypedef `json:"def"`
}

// GetLabel returns DatasetTypedef.Label, and is useful for accessing the field via an interface.
func (v *DatasetTypedef) GetLabel() string { return v.Label }

// GetDef returns DatasetTypedef.Def, and is useful for accessing the field via an interface.
func (v *DatasetTypedef) GetDef() *DatasetTypedefDefObjectTypedef { return v.Def }

// DatasetTypedefDefObjectTypedef includes the requested fields of the GraphQL type ObjectTypedef.
type DatasetTypedefDefObjectTypedef struct {
	Anykey *bool                                                `json:"anykey"`
	Fields []DatasetTypedefDefObjectTypedefFieldsObjectFieldDef `json:"fields"`
}

// GetAnykey returns DatasetTypedefDefObjectTypedef.Anykey, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedef) GetAnykey() *bool { return v.Anykey }

// GetFields returns DatasetTypedefDefObjectTypedef.Fields, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedef) GetFields() []DatasetTypedefDefObjectTypedefFieldsObjectFieldDef {
	return v.Fields
}

// DatasetTypedefDefObjectTypedefFieldsObjectFieldDef includes the requested fields of the GraphQL type ObjectFieldDef.
type DatasetTypedefDefObjectTypedefFieldsObjectFieldDef struct {
	Name         string                                                                `json:"name"`
	Type         DatasetTypedefDefObjectTypedefFieldsObjectFieldDefTypeObjectFieldType `json:"type"`
	IsEnum       *bool                                                                 `json:"isEnum"`
	IsSearchable *bool                                                                 `json:"isSearchable"`
	IsHidden     *bool                                                                 `json:"isHidden"`
	IsConst      *bool                                                                 `json:"isConst"`
	IsMetric     *bool                                                                 `json:"isMetric"`
}

// GetName returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDef.Name, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDef) GetName() string { return v.Name }

// GetType returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDef.Type, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDef) GetType() DatasetTypedefDefObjectTypedefFieldsObjectFieldDefTypeObjectFieldType {
	return v.Type
}

// GetIsEnum returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDef.IsEnum, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDef) GetIsEnum() *bool { return v.IsEnum }

// GetIsSearchable returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDef.IsSearchable, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDef) GetIsSearchable() *bool {
	return v.IsSearchable
}

// GetIsHidden returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDef.IsHidden, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDef) GetIsHidden() *bool { return v.IsHidden }

// GetIsConst returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDef.IsConst, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDef) GetIsConst() *bool { return v.IsConst }

// GetIsMetric returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDef.IsMetric, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDef) GetIsMetric() *bool { return v.IsMetric }

// DatasetTypedefDefObjectTypedefFieldsObjectFieldDefTypeObjectFieldType includes the requested fields of the GraphQL type ObjectFieldType.
type DatasetTypedefDefObjectTypedefFieldsObjectFieldDefTypeObjectFieldType struct {
	Rep      string `json:"rep"`
	Nullable *bool  `json:"nullable"`
}

// GetRep returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDefTypeObjectFieldType.Rep, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDefTypeObjectFieldType) GetRep() string {
	return v.Rep
}

// GetNullable returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDefTypeObjectFieldType.Nullable, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDefTypeObjectFieldType) GetNullable() *bool {
	return v.Nullable
}

type DatasetTypedefInput struct {
	Anykey *bool                  `json:"anykey"`
	Fields []DatasetFieldDefInput `json:"fields"`
}

// GetAnykey returns DatasetTypedefInput.Anykey, and is useful for accessing the field via an interface.
func (v *DatasetTypedefInput) GetAnykey() *bool { return v.Anykey }

// GetFields returns DatasetTypedefInput.Fields, and is useful for accessing the field via an interface.
func (v *DatasetTypedefInput) GetFields() []DatasetFieldDefInput { return v.Fields }

// Datastream includes the GraphQL fields of Datastream requested by the fragment Datastream.
type Datastream struct {
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	IconUrl     *string `json:"iconUrl"`
	Description *string `json:"description"`
	WorkspaceId string  `json:"workspaceId"`
	DatasetId   string  `json:"datasetId"`
}

// GetId returns Datastream.Id, and is useful for accessing the field via an interface.
func (v *Datastream) GetId() string { return v.Id }

// GetName returns Datastream.Name, and is useful for accessing the field via an interface.
func (v *Datastream) GetName() string { return v.Name }

// GetIconUrl returns Datastream.IconUrl, and is useful for accessing the field via an interface.
func (v *Datastream) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns Datastream.Description, and is useful for accessing the field via an interface.
func (v *Datastream) GetDescription() *string { return v.Description }

// GetWorkspaceId returns Datastream.WorkspaceId, and is useful for accessing the field via an interface.
func (v *Datastream) GetWorkspaceId() string { return v.WorkspaceId }

// GetDatasetId returns Datastream.DatasetId, and is useful for accessing the field via an interface.
func (v *Datastream) GetDatasetId() string { return v.DatasetId }

type DatastreamInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	IconUrl     *string `json:"iconUrl"`
	Disabled    *bool   `json:"disabled"`
}

// GetName returns DatastreamInput.Name, and is useful for accessing the field via an interface.
func (v *DatastreamInput) GetName() string { return v.Name }

// GetDescription returns DatastreamInput.Description, and is useful for accessing the field via an interface.
func (v *DatastreamInput) GetDescription() *string { return v.Description }

// GetIconUrl returns DatastreamInput.IconUrl, and is useful for accessing the field via an interface.
func (v *DatastreamInput) GetIconUrl() *string { return v.IconUrl }

// GetDisabled returns DatastreamInput.Disabled, and is useful for accessing the field via an interface.
func (v *DatastreamInput) GetDisabled() *bool { return v.Disabled }

// DatastreamToken includes the GraphQL fields of DatastreamToken requested by the fragment DatastreamToken.
type DatastreamToken struct {
	Id           string  `json:"id"`
	Name         string  `json:"name"`
	Description  *string `json:"description"`
	Disabled     bool    `json:"disabled"`
	DatastreamId string  `json:"datastreamId"`
	// only populated for creates
	Secret *string `json:"secret"`
}

// GetId returns DatastreamToken.Id, and is useful for accessing the field via an interface.
func (v *DatastreamToken) GetId() string { return v.Id }

// GetName returns DatastreamToken.Name, and is useful for accessing the field via an interface.
func (v *DatastreamToken) GetName() string { return v.Name }

// GetDescription returns DatastreamToken.Description, and is useful for accessing the field via an interface.
func (v *DatastreamToken) GetDescription() *string { return v.Description }

// GetDisabled returns DatastreamToken.Disabled, and is useful for accessing the field via an interface.
func (v *DatastreamToken) GetDisabled() bool { return v.Disabled }

// GetDatastreamId returns DatastreamToken.DatastreamId, and is useful for accessing the field via an interface.
func (v *DatastreamToken) GetDatastreamId() string { return v.DatastreamId }

// GetSecret returns DatastreamToken.Secret, and is useful for accessing the field via an interface.
func (v *DatastreamToken) GetSecret() *string { return v.Secret }

type DatastreamTokenAppMetadataInput struct {
	AppId          string  `json:"appId"`
	ModuleId       *string `json:"moduleId"`
	Instructions   string  `json:"instructions"`
	DatasourceName string  `json:"datasourceName"`
}

// GetAppId returns DatastreamTokenAppMetadataInput.AppId, and is useful for accessing the field via an interface.
func (v *DatastreamTokenAppMetadataInput) GetAppId() string { return v.AppId }

// GetModuleId returns DatastreamTokenAppMetadataInput.ModuleId, and is useful for accessing the field via an interface.
func (v *DatastreamTokenAppMetadataInput) GetModuleId() *string { return v.ModuleId }

// GetInstructions returns DatastreamTokenAppMetadataInput.Instructions, and is useful for accessing the field via an interface.
func (v *DatastreamTokenAppMetadataInput) GetInstructions() string { return v.Instructions }

// GetDatasourceName returns DatastreamTokenAppMetadataInput.DatasourceName, and is useful for accessing the field via an interface.
func (v *DatastreamTokenAppMetadataInput) GetDatasourceName() string { return v.DatasourceName }

type DatastreamTokenInput struct {
	Name        string                           `json:"name"`
	Description *string                          `json:"description"`
	Disabled    *bool                            `json:"disabled"`
	AppMetadata *DatastreamTokenAppMetadataInput `json:"appMetadata"`
}

// GetName returns DatastreamTokenInput.Name, and is useful for accessing the field via an interface.
func (v *DatastreamTokenInput) GetName() string { return v.Name }

// GetDescription returns DatastreamTokenInput.Description, and is useful for accessing the field via an interface.
func (v *DatastreamTokenInput) GetDescription() *string { return v.Description }

// GetDisabled returns DatastreamTokenInput.Disabled, and is useful for accessing the field via an interface.
func (v *DatastreamTokenInput) GetDisabled() *bool { return v.Disabled }

// GetAppMetadata returns DatastreamTokenInput.AppMetadata, and is useful for accessing the field via an interface.
func (v *DatastreamTokenInput) GetAppMetadata() *DatastreamTokenAppMetadataInput {
	return v.AppMetadata
}

type DefaultStatsInput struct {
	// Something which is a string, or which is inferred to be an ID, will
	// return a list of the top K values + counts
	TopKCount *types.Int64Scalar `json:"topKCount"`
	// Maximum number of histograms to return.
	//
	// Ingeger, float, duration columns return histograms.
	//
	// Set to 0 to disable histograms.
	// Set to <0 for an unlimited number of histograms.
	// Set to null to let the backend decide a suitable limit.
	MaxNbHistograms *types.Int64Scalar `json:"maxNbHistograms"`
	// Number of buckets per histogram.
	//
	// Set to 0 to disable histograms.
	// Set to null to let the backend decide.
	HistogramCount *types.Int64Scalar `json:"histogramCount"`
	// Number of buckets per sparkline.
	//
	// Integer, float, timestamp, duration columns return a sparkline.
	// The aggregate function is chosen by the backend based on the type of
	// column.
	//
	// Set to 0 to disable sparklines.
	// Set to null to let the backend decide.
	SparklineBucketCount *types.Int64Scalar `json:"sparklineBucketCount"`
	// The function used to summarize buckets can be chosen; default is avg()
	SparklineFunction *string `json:"sparklineFunction"`
	// If timestamp columns are included, they will be returned as
	// sparkline(count) (notwithstanding any sparklineFunction for float values)
	IncludeTimestampColumns *bool `json:"includeTimestampColumns"`
	// Whether to generate compound TopK for link columns. Note that this will
	// disable the normal TopK results for link columns.
	UseCompoundTopKForLinks *bool `json:"useCompoundTopKForLinks"`
}

// GetTopKCount returns DefaultStatsInput.TopKCount, and is useful for accessing the field via an interface.
func (v *DefaultStatsInput) GetTopKCount() *types.Int64Scalar { return v.TopKCount }

// GetMaxNbHistograms returns DefaultStatsInput.MaxNbHistograms, and is useful for accessing the field via an interface.
func (v *DefaultStatsInput) GetMaxNbHistograms() *types.Int64Scalar { return v.MaxNbHistograms }

// GetHistogramCount returns DefaultStatsInput.HistogramCount, and is useful for accessing the field via an interface.
func (v *DefaultStatsInput) GetHistogramCount() *types.Int64Scalar { return v.HistogramCount }

// GetSparklineBucketCount returns DefaultStatsInput.SparklineBucketCount, and is useful for accessing the field via an interface.
func (v *DefaultStatsInput) GetSparklineBucketCount() *types.Int64Scalar {
	return v.SparklineBucketCount
}

// GetSparklineFunction returns DefaultStatsInput.SparklineFunction, and is useful for accessing the field via an interface.
func (v *DefaultStatsInput) GetSparklineFunction() *string { return v.SparklineFunction }

// GetIncludeTimestampColumns returns DefaultStatsInput.IncludeTimestampColumns, and is useful for accessing the field via an interface.
func (v *DefaultStatsInput) GetIncludeTimestampColumns() *bool { return v.IncludeTimestampColumns }

// GetUseCompoundTopKForLinks returns DefaultStatsInput.UseCompoundTopKForLinks, and is useful for accessing the field via an interface.
func (v *DefaultStatsInput) GetUseCompoundTopKForLinks() *bool { return v.UseCompoundTopKForLinks }

type DeferredDatasetReferenceInput struct {
	DatasetId *string `json:"datasetId"`
	// A path may specify "Workspace.Datasetname", or it may just specify
	// Datasetname, in which case it is relative to the Workspace that the
	// Potential Foreign Key lives in.
	DatasetPath *string `json:"datasetPath"`
}

// GetDatasetId returns DeferredDatasetReferenceInput.DatasetId, and is useful for accessing the field via an interface.
func (v *DeferredDatasetReferenceInput) GetDatasetId() *string { return v.DatasetId }

// GetDatasetPath returns DeferredDatasetReferenceInput.DatasetPath, and is useful for accessing the field via an interface.
func (v *DeferredDatasetReferenceInput) GetDatasetPath() *string { return v.DatasetPath }

// DeferredForeignKey includes the GraphQL fields of DeferredForeignKey requested by the fragment DeferredForeignKey.
type DeferredForeignKey struct {
	Id            string                                                   `json:"id"`
	WorkspaceId   string                                                   `json:"workspaceId"`
	SourceDataset *DeferredForeignKeySourceDatasetDeferredDatasetReference `json:"sourceDataset"`
	TargetDataset *DeferredForeignKeyTargetDatasetDeferredDatasetReference `json:"targetDataset"`
	SrcFields     []string                                                 `json:"srcFields"`
	DstFields     []string                                                 `json:"dstFields"`
	Label         *string                                                  `json:"label"`
	Resolution    *DeferredForeignKeyResolutionResolvedForeignKey          `json:"resolution"`
	Status        DeferredForeignKeyStatus                                 `json:"status"`
}

// GetId returns DeferredForeignKey.Id, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetId() string { return v.Id }

// GetWorkspaceId returns DeferredForeignKey.WorkspaceId, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetWorkspaceId() string { return v.WorkspaceId }

// GetSourceDataset returns DeferredForeignKey.SourceDataset, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetSourceDataset() *DeferredForeignKeySourceDatasetDeferredDatasetReference {
	return v.SourceDataset
}

// GetTargetDataset returns DeferredForeignKey.TargetDataset, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetTargetDataset() *DeferredForeignKeyTargetDatasetDeferredDatasetReference {
	return v.TargetDataset
}

// GetSrcFields returns DeferredForeignKey.SrcFields, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetSrcFields() []string { return v.SrcFields }

// GetDstFields returns DeferredForeignKey.DstFields, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetDstFields() []string { return v.DstFields }

// GetLabel returns DeferredForeignKey.Label, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetLabel() *string { return v.Label }

// GetResolution returns DeferredForeignKey.Resolution, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetResolution() *DeferredForeignKeyResolutionResolvedForeignKey {
	return v.Resolution
}

// GetStatus returns DeferredForeignKey.Status, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetStatus() DeferredForeignKeyStatus { return v.Status }

type DeferredForeignKeyInput struct {
	SourceDataset *DeferredDatasetReferenceInput `json:"sourceDataset"`
	TargetDataset *DeferredDatasetReferenceInput `json:"targetDataset"`
	SrcFields     []string                       `json:"srcFields"`
	DstFields     []string                       `json:"dstFields"`
	// The API will make up a label if it's specified as empty.
	Label *string `json:"label"`
}

// GetSourceDataset returns DeferredForeignKeyInput.SourceDataset, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyInput) GetSourceDataset() *DeferredDatasetReferenceInput {
	return v.SourceDataset
}

// GetTargetDataset returns DeferredForeignKeyInput.TargetDataset, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyInput) GetTargetDataset() *DeferredDatasetReferenceInput {
	return v.TargetDataset
}

// GetSrcFields returns DeferredForeignKeyInput.SrcFields, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyInput) GetSrcFields() []string { return v.SrcFields }

// GetDstFields returns DeferredForeignKeyInput.DstFields, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyInput) GetDstFields() []string { return v.DstFields }

// GetLabel returns DeferredForeignKeyInput.Label, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyInput) GetLabel() *string { return v.Label }

// DeferredForeignKeyResolutionResolvedForeignKey includes the requested fields of the GraphQL type ResolvedForeignKey.
type DeferredForeignKeyResolutionResolvedForeignKey struct {
	SourceId string `json:"sourceId"`
	TargetId string `json:"targetId"`
}

// GetSourceId returns DeferredForeignKeyResolutionResolvedForeignKey.SourceId, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyResolutionResolvedForeignKey) GetSourceId() string { return v.SourceId }

// GetTargetId returns DeferredForeignKeyResolutionResolvedForeignKey.TargetId, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyResolutionResolvedForeignKey) GetTargetId() string { return v.TargetId }

// DeferredForeignKeySourceDatasetDeferredDatasetReference includes the requested fields of the GraphQL type DeferredDatasetReference.
type DeferredForeignKeySourceDatasetDeferredDatasetReference struct {
	DatasetId *string `json:"datasetId"`
}

// GetDatasetId returns DeferredForeignKeySourceDatasetDeferredDatasetReference.DatasetId, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeySourceDatasetDeferredDatasetReference) GetDatasetId() *string {
	return v.DatasetId
}

// DeferredForeignKeyStatus includes the requested fields of the GraphQL type DeferredForeignKeyStatus.
type DeferredForeignKeyStatus struct {
	ErrorText string `json:"errorText"`
}

// GetErrorText returns DeferredForeignKeyStatus.ErrorText, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyStatus) GetErrorText() string { return v.ErrorText }

// DeferredForeignKeyTargetDatasetDeferredDatasetReference includes the requested fields of the GraphQL type DeferredDatasetReference.
type DeferredForeignKeyTargetDatasetDeferredDatasetReference struct {
	DatasetId *string `json:"datasetId"`
}

// GetDatasetId returns DeferredForeignKeyTargetDatasetDeferredDatasetReference.DatasetId, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyTargetDatasetDeferredDatasetReference) GetDatasetId() *string {
	return v.DatasetId
}

type DependencyHandlingInput struct {
	SaveMode *SaveMode `json:"saveMode"`
	// For saveMode UpdateDatasetAndDependenciesUnlessNewErrors, here are errors that don't count as "new"
	IgnoreSpecificErrors []string `json:"ignoreSpecificErrors"`
}

// GetSaveMode returns DependencyHandlingInput.SaveMode, and is useful for accessing the field via an interface.
func (v *DependencyHandlingInput) GetSaveMode() *SaveMode { return v.SaveMode }

// GetIgnoreSpecificErrors returns DependencyHandlingInput.IgnoreSpecificErrors, and is useful for accessing the field via an interface.
func (v *DependencyHandlingInput) GetIgnoreSpecificErrors() []string { return v.IgnoreSpecificErrors }

type EmailActionInput struct {
	TargetUsers     []types.UserIdScalar `json:"targetUsers"`
	TargetAddresses []string             `json:"targetAddresses"`
	SubjectTemplate *string              `json:"subjectTemplate"`
	BodyTemplate    *string              `json:"bodyTemplate"`
	IsHtml          *bool                `json:"isHtml"`
}

// GetTargetUsers returns EmailActionInput.TargetUsers, and is useful for accessing the field via an interface.
func (v *EmailActionInput) GetTargetUsers() []types.UserIdScalar { return v.TargetUsers }

// GetTargetAddresses returns EmailActionInput.TargetAddresses, and is useful for accessing the field via an interface.
func (v *EmailActionInput) GetTargetAddresses() []string { return v.TargetAddresses }

// GetSubjectTemplate returns EmailActionInput.SubjectTemplate, and is useful for accessing the field via an interface.
func (v *EmailActionInput) GetSubjectTemplate() *string { return v.SubjectTemplate }

// GetBodyTemplate returns EmailActionInput.BodyTemplate, and is useful for accessing the field via an interface.
func (v *EmailActionInput) GetBodyTemplate() *string { return v.BodyTemplate }

// GetIsHtml returns EmailActionInput.IsHtml, and is useful for accessing the field via an interface.
func (v *EmailActionInput) GetIsHtml() *bool { return v.IsHtml }

type FacetFunction string

const (
	FacetFunctionEquals         FacetFunction = "Equals"
	FacetFunctionNotequal       FacetFunction = "NotEqual"
	FacetFunctionContains       FacetFunction = "Contains"
	FacetFunctionDoesnotcontain FacetFunction = "DoesNotContain"
	FacetFunctionIsnull         FacetFunction = "IsNull"
	FacetFunctionIsnotnull      FacetFunction = "IsNotNull"
)

// Folder includes the GraphQL fields of Folder requested by the fragment Folder.
type Folder struct {
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	IconUrl     *string `json:"iconUrl"`
	Description *string `json:"description"`
	WorkspaceId string  `json:"workspaceId"`
}

// GetId returns Folder.Id, and is useful for accessing the field via an interface.
func (v *Folder) GetId() string { return v.Id }

// GetName returns Folder.Name, and is useful for accessing the field via an interface.
func (v *Folder) GetName() string { return v.Name }

// GetIconUrl returns Folder.IconUrl, and is useful for accessing the field via an interface.
func (v *Folder) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns Folder.Description, and is useful for accessing the field via an interface.
func (v *Folder) GetDescription() *string { return v.Description }

// GetWorkspaceId returns Folder.WorkspaceId, and is useful for accessing the field via an interface.
func (v *Folder) GetWorkspaceId() string { return v.WorkspaceId }

type FolderInput struct {
	Name        *string `json:"name"`
	Description *string `json:"description"`
	IconUrl     *string `json:"iconUrl"`
}

// GetName returns FolderInput.Name, and is useful for accessing the field via an interface.
func (v *FolderInput) GetName() *string { return v.Name }

// GetDescription returns FolderInput.Description, and is useful for accessing the field via an interface.
func (v *FolderInput) GetDescription() *string { return v.Description }

// GetIconUrl returns FolderInput.IconUrl, and is useful for accessing the field via an interface.
func (v *FolderInput) GetIconUrl() *string { return v.IconUrl }

// HttpRequestConfig includes the GraphQL fields of PollerHTTPRequestConfig requested by the fragment HttpRequestConfig.
type HttpRequestConfig struct {
	Url      *string           `json:"url"`
	Method   *string           `json:"method"`
	Username *string           `json:"username"`
	Password *string           `json:"password"`
	Headers  *types.JsonObject `json:"headers"`
	Params   *types.JsonObject `json:"params"`
}

// GetUrl returns HttpRequestConfig.Url, and is useful for accessing the field via an interface.
func (v *HttpRequestConfig) GetUrl() *string { return v.Url }

// GetMethod returns HttpRequestConfig.Method, and is useful for accessing the field via an interface.
func (v *HttpRequestConfig) GetMethod() *string { return v.Method }

// GetUsername returns HttpRequestConfig.Username, and is useful for accessing the field via an interface.
func (v *HttpRequestConfig) GetUsername() *string { return v.Username }

// GetPassword returns HttpRequestConfig.Password, and is useful for accessing the field via an interface.
func (v *HttpRequestConfig) GetPassword() *string { return v.Password }

// GetHeaders returns HttpRequestConfig.Headers, and is useful for accessing the field via an interface.
func (v *HttpRequestConfig) GetHeaders() *types.JsonObject { return v.Headers }

// GetParams returns HttpRequestConfig.Params, and is useful for accessing the field via an interface.
func (v *HttpRequestConfig) GetParams() *types.JsonObject { return v.Params }

type InputDefinitionInput struct {
	// Assign the short and unique user mnemonic for this input, used in @tableref expressions
	InputName string `json:"inputName"`
	// If this input is to be used for a purpose other than "slurp data," then specify that here.
	InputRole *InputRole `json:"inputRole"`
	// Datasets defined by IDs refer to latest-published version of dataset.
	DatasetId *string `json:"datasetId"`
	// Format of datasetPath is projectlabel.datasetlabel
	DatasetPath *string `json:"datasetPath"`
	// Reference a previous query in the worksheet by label
	StageID *string `json:"stageID,omitempty"`
	StageId *string `json:"stageId,omitempty"`
	// If this input is parameterized, this will contain the ID of the parameter to substitute for this input. Parameters
	// are bound in the QueryParams for the query being issued with this input.
	ParameterId *string `json:"parameterId"`
}

// GetInputName returns InputDefinitionInput.InputName, and is useful for accessing the field via an interface.
func (v *InputDefinitionInput) GetInputName() string { return v.InputName }

// GetInputRole returns InputDefinitionInput.InputRole, and is useful for accessing the field via an interface.
func (v *InputDefinitionInput) GetInputRole() *InputRole { return v.InputRole }

// GetDatasetId returns InputDefinitionInput.DatasetId, and is useful for accessing the field via an interface.
func (v *InputDefinitionInput) GetDatasetId() *string { return v.DatasetId }

// GetDatasetPath returns InputDefinitionInput.DatasetPath, and is useful for accessing the field via an interface.
func (v *InputDefinitionInput) GetDatasetPath() *string { return v.DatasetPath }

// GetStageID returns InputDefinitionInput.StageID, and is useful for accessing the field via an interface.
func (v *InputDefinitionInput) GetStageID() *string { return v.StageID }

// GetStageId returns InputDefinitionInput.StageId, and is useful for accessing the field via an interface.
func (v *InputDefinitionInput) GetStageId() *string { return v.StageId }

// GetParameterId returns InputDefinitionInput.ParameterId, and is useful for accessing the field via an interface.
func (v *InputDefinitionInput) GetParameterId() *string { return v.ParameterId }

// Why do we separate "Data" bindings from "Reference" bindings? Why does this
// have to be pre-declared, rather than resolved at the end by the compiler?
//
// Because we have the hard rule that physical dataset IDs only exist in the
// API, not at the OPAL level, we wouldn't know which particular dataset you'd
// suggest to use, unless the input binding was pre-declared.  If we just made
// something up in GetTargetDatasetBinding() then how would we later know which
// shape to resolve it to?
//
// The user writes addfk "some name", id=@theThing.id
//
// We need to know what theThing really means. Hence, it needs a binding. Hence,
// when bindings are specified, we need to know whether you expect that to be
// 100% defined, or left pending.  We could allow a less concrete pipeline
// specification. Leave @theThing entirely unresolved, and only resolve it using
// some later operation that says "and wherever I called something @theThing,
// now I mean this thing!" (edited)
//
// Which means that we have to live with pipelines that are constantly in
// unresolved and unresolvable states, and only some pipelines can run. We also
// can no longer preview the data until that next step has been taken.
//
// I e, we assume each query (set of stages) compiles and links as a unit. There
// is no separate compilation, because the user experience and complexity of
// that abstraction seems unnecessary just to solve this one use case in this
// one alternative way.
type InputRole string

const (
	InputRoleDefault   InputRole = "Default"
	InputRoleData      InputRole = "Data"
	InputRoleReference InputRole = "Reference"
)

// Monitor includes the GraphQL fields of Monitor requested by the fragment Monitor.
type Monitor struct {
	WorkspaceId         string            `json:"workspaceId"`
	Id                  string            `json:"id"`
	Name                string            `json:"name"`
	Description         string            `json:"description"`
	IconUrl             string            `json:"iconUrl"`
	Disabled            bool              `json:"disabled"`
	FreshnessGoal       types.Int64Scalar `json:"freshnessGoal"`
	UseDefaultFreshness bool              `json:"useDefaultFreshness"`
	Source              string            `json:"source"`
	ManagedById         *string           `json:"managedById"`
	// The source stage may be empty, just specifying an input dataset,
	// or it may include actual transform work
	Query            MonitorQueryMultiStageQuery                      `json:"query"`
	Rule             MonitorRule                                      `json:"-"`
	NotificationSpec MonitorNotificationSpecNotificationSpecification `json:"notificationSpec"`
}

// GetWorkspaceId returns Monitor.WorkspaceId, and is useful for accessing the field via an interface.
func (v *Monitor) GetWorkspaceId() string { return v.WorkspaceId }

// GetId returns Monitor.Id, and is useful for accessing the field via an interface.
func (v *Monitor) GetId() string { return v.Id }

// GetName returns Monitor.Name, and is useful for accessing the field via an interface.
func (v *Monitor) GetName() string { return v.Name }

// GetDescription returns Monitor.Description, and is useful for accessing the field via an interface.
func (v *Monitor) GetDescription() string { return v.Description }

// GetIconUrl returns Monitor.IconUrl, and is useful for accessing the field via an interface.
func (v *Monitor) GetIconUrl() string { return v.IconUrl }

// GetDisabled returns Monitor.Disabled, and is useful for accessing the field via an interface.
func (v *Monitor) GetDisabled() bool { return v.Disabled }

// GetFreshnessGoal returns Monitor.FreshnessGoal, and is useful for accessing the field via an interface.
func (v *Monitor) GetFreshnessGoal() types.Int64Scalar { return v.FreshnessGoal }

// GetUseDefaultFreshness returns Monitor.UseDefaultFreshness, and is useful for accessing the field via an interface.
func (v *Monitor) GetUseDefaultFreshness() bool { return v.UseDefaultFreshness }

// GetSource returns Monitor.Source, and is useful for accessing the field via an interface.
func (v *Monitor) GetSource() string { return v.Source }

// GetManagedById returns Monitor.ManagedById, and is useful for accessing the field via an interface.
func (v *Monitor) GetManagedById() *string { return v.ManagedById }

// GetQuery returns Monitor.Query, and is useful for accessing the field via an interface.
func (v *Monitor) GetQuery() MonitorQueryMultiStageQuery { return v.Query }

// GetRule returns Monitor.Rule, and is useful for accessing the field via an interface.
func (v *Monitor) GetRule() MonitorRule { return v.Rule }

// GetNotificationSpec returns Monitor.NotificationSpec, and is useful for accessing the field via an interface.
func (v *Monitor) GetNotificationSpec() MonitorNotificationSpecNotificationSpecification {
	return v.NotificationSpec
}

func (v *Monitor) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*Monitor
		Rule json.RawMessage `json:"rule"`
		graphql.NoUnmarshalJSON
	}
	firstPass.Monitor = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Rule
		src := firstPass.Rule
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalMonitorRule(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal Monitor.Rule: %w", err)
			}
		}
	}
	return nil
}

type __premarshalMonitor struct {
	WorkspaceId string `json:"workspaceId"`

	Id string `json:"id"`

	Name string `json:"name"`

	Description string `json:"description"`

	IconUrl string `json:"iconUrl"`

	Disabled bool `json:"disabled"`

	FreshnessGoal types.Int64Scalar `json:"freshnessGoal"`

	UseDefaultFreshness bool `json:"useDefaultFreshness"`

	Source string `json:"source"`

	ManagedById *string `json:"managedById"`

	Query MonitorQueryMultiStageQuery `json:"query"`

	Rule json.RawMessage `json:"rule"`

	NotificationSpec MonitorNotificationSpecNotificationSpecification `json:"notificationSpec"`
}

func (v *Monitor) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *Monitor) __premarshalJSON() (*__premarshalMonitor, error) {
	var retval __premarshalMonitor

	retval.WorkspaceId = v.WorkspaceId
	retval.Id = v.Id
	retval.Name = v.Name
	retval.Description = v.Description
	retval.IconUrl = v.IconUrl
	retval.Disabled = v.Disabled
	retval.FreshnessGoal = v.FreshnessGoal
	retval.UseDefaultFreshness = v.UseDefaultFreshness
	retval.Source = v.Source
	retval.ManagedById = v.ManagedById
	retval.Query = v.Query
	{

		dst := &retval.Rule
		src := v.Rule
		var err error
		*dst, err = __marshalMonitorRule(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal Monitor.Rule: %w", err)
		}
	}
	retval.NotificationSpec = v.NotificationSpec
	return &retval, nil
}

type MonitorGroupByColumnPathInput struct {
	Column string `json:"column"`
	Path   string `json:"path"`
}

// GetColumn returns MonitorGroupByColumnPathInput.Column, and is useful for accessing the field via an interface.
func (v *MonitorGroupByColumnPathInput) GetColumn() string { return v.Column }

// GetPath returns MonitorGroupByColumnPathInput.Path, and is useful for accessing the field via an interface.
func (v *MonitorGroupByColumnPathInput) GetPath() string { return v.Path }

type MonitorGroupInfoInput struct {
	// GroupBy:
	// ┌───────────┬─────────┬──────────────────────────┬─────────────┬────────────┐
	// │GroupBy    │Resource │Link                      │Value column │Column Path │
	// ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
	// │groupName  │Empty    │Non-empty (FK label)      │Empty        │Empty       │
	// ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
	// │columns    │Empty    │Non-empty (FK Src fields) │Non-empty    │Empty       │
	// ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
	// │columnPath │Nil      │Nil                       │Nil          │Non-nil     │
	// └───────────┴─────────┴──────────────────────────┴─────────────┴────────────┘
	Columns    []string                       `json:"columns"`
	GroupName  string                         `json:"groupName"`
	ColumnPath *MonitorGroupByColumnPathInput `json:"columnPath"`
}

// GetColumns returns MonitorGroupInfoInput.Columns, and is useful for accessing the field via an interface.
func (v *MonitorGroupInfoInput) GetColumns() []string { return v.Columns }

// GetGroupName returns MonitorGroupInfoInput.GroupName, and is useful for accessing the field via an interface.
func (v *MonitorGroupInfoInput) GetGroupName() string { return v.GroupName }

// GetColumnPath returns MonitorGroupInfoInput.ColumnPath, and is useful for accessing the field via an interface.
func (v *MonitorGroupInfoInput) GetColumnPath() *MonitorGroupByColumnPathInput { return v.ColumnPath }

type MonitorGrouping string

const (
	MonitorGroupingNone       MonitorGrouping = "None"
	MonitorGroupingValue      MonitorGrouping = "Value"
	MonitorGroupingResource   MonitorGrouping = "Resource"
	MonitorGroupingLinktarget MonitorGrouping = "LinkTarget"
)

type MonitorInput struct {
	Name        *string `json:"name"`
	IconUrl     *string `json:"iconUrl"`
	Description *string `json:"description"`
	// Static comment for extra information about a monitor available in notification template.
	Comment *string `json:"comment"`
	// Examples - "terraform", "webui".
	Source *string `json:"source"`
	// Only when the monitor is updated.
	OverwriteSource *bool `json:"overwriteSource,omitempty"`
	// The optional id of the object that owns the monitor. Ex: the id of an app that installs the monitor.
	ManagedById *string `json:"managedById"`
	Disabled    *bool   `json:"disabled"`
	IsTemplate  *bool   `json:"isTemplate"`
	// Similar to dataset freshness goal, this is in Nanoseconds when received from UI.
	// Only changes setting if useDefaultFreshness is false
	FreshnessGoal *types.Int64Scalar `json:"freshnessGoal,omitempty"`
	// Defaults to true on creation if not specified
	UseDefaultFreshness *bool                           `json:"useDefaultFreshness"`
	Query               *MultiStageQueryInput           `json:"query"`
	Rule                *MonitorRuleInput               `json:"rule"`
	NotificationSpec    *NotificationSpecificationInput `json:"notificationSpec"`
	Channels            []string                        `json:"channels"`
}

// GetName returns MonitorInput.Name, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetName() *string { return v.Name }

// GetIconUrl returns MonitorInput.IconUrl, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns MonitorInput.Description, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetDescription() *string { return v.Description }

// GetComment returns MonitorInput.Comment, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetComment() *string { return v.Comment }

// GetSource returns MonitorInput.Source, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetSource() *string { return v.Source }

// GetOverwriteSource returns MonitorInput.OverwriteSource, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetOverwriteSource() *bool { return v.OverwriteSource }

// GetManagedById returns MonitorInput.ManagedById, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetManagedById() *string { return v.ManagedById }

// GetDisabled returns MonitorInput.Disabled, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetDisabled() *bool { return v.Disabled }

// GetIsTemplate returns MonitorInput.IsTemplate, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetIsTemplate() *bool { return v.IsTemplate }

// GetFreshnessGoal returns MonitorInput.FreshnessGoal, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetFreshnessGoal() *types.Int64Scalar { return v.FreshnessGoal }

// GetUseDefaultFreshness returns MonitorInput.UseDefaultFreshness, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetUseDefaultFreshness() *bool { return v.UseDefaultFreshness }

// GetQuery returns MonitorInput.Query, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetQuery() *MultiStageQueryInput { return v.Query }

// GetRule returns MonitorInput.Rule, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetRule() *MonitorRuleInput { return v.Rule }

// GetNotificationSpec returns MonitorInput.NotificationSpec, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetNotificationSpec() *NotificationSpecificationInput {
	return v.NotificationSpec
}

// GetChannels returns MonitorInput.Channels, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetChannels() []string { return v.Channels }

// MonitorNotificationSpecNotificationSpecification includes the requested fields of the GraphQL type NotificationSpecification.
type MonitorNotificationSpecNotificationSpecification struct {
	// should these go in each applicable Rule instead?
	Merge      *NotificationMerge     `json:"merge"`
	Importance NotificationImportance `json:"importance"`
}

// GetMerge returns MonitorNotificationSpecNotificationSpecification.Merge, and is useful for accessing the field via an interface.
func (v *MonitorNotificationSpecNotificationSpecification) GetMerge() *NotificationMerge {
	return v.Merge
}

// GetImportance returns MonitorNotificationSpecNotificationSpecification.Importance, and is useful for accessing the field via an interface.
func (v *MonitorNotificationSpecNotificationSpecification) GetImportance() NotificationImportance {
	return v.Importance
}

// MonitorQueryMultiStageQuery includes the requested fields of the GraphQL type MultiStageQuery.
type MonitorQueryMultiStageQuery struct {
	OutputStage string        `json:"outputStage"`
	Stages      []*StageQuery `json:"stages"`
}

// GetOutputStage returns MonitorQueryMultiStageQuery.OutputStage, and is useful for accessing the field via an interface.
func (v *MonitorQueryMultiStageQuery) GetOutputStage() string { return v.OutputStage }

// GetStages returns MonitorQueryMultiStageQuery.Stages, and is useful for accessing the field via an interface.
func (v *MonitorQueryMultiStageQuery) GetStages() []*StageQuery { return v.Stages }

// MonitorRule includes the requested fields of the GraphQL interface MonitorRule.
//
// MonitorRule is implemented by the following types:
// MonitorRuleMonitorRuleThreshold
// MonitorRuleMonitorRuleChange
// MonitorRuleMonitorRuleFacet
// MonitorRuleMonitorRuleCount
// MonitorRuleMonitorRulePromote
type MonitorRule interface {
	implementsGraphQLInterfaceMonitorRule()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetSourceColumn returns the interface-field "sourceColumn" from its implementation.
	GetSourceColumn() string
	// GetGroupByGroups returns the interface-field "groupByGroups" from its implementation.
	GetGroupByGroups() []MonitorRuleGroupByGroupsMonitorGroupInfo
}

func (v *MonitorRuleMonitorRuleThreshold) implementsGraphQLInterfaceMonitorRule() {}
func (v *MonitorRuleMonitorRuleChange) implementsGraphQLInterfaceMonitorRule()    {}
func (v *MonitorRuleMonitorRuleFacet) implementsGraphQLInterfaceMonitorRule()     {}
func (v *MonitorRuleMonitorRuleCount) implementsGraphQLInterfaceMonitorRule()     {}
func (v *MonitorRuleMonitorRulePromote) implementsGraphQLInterfaceMonitorRule()   {}

func __unmarshalMonitorRule(b []byte, v *MonitorRule) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "MonitorRuleThreshold":
		*v = new(MonitorRuleMonitorRuleThreshold)
		return json.Unmarshal(b, *v)
	case "MonitorRuleChange":
		*v = new(MonitorRuleMonitorRuleChange)
		return json.Unmarshal(b, *v)
	case "MonitorRuleFacet":
		*v = new(MonitorRuleMonitorRuleFacet)
		return json.Unmarshal(b, *v)
	case "MonitorRuleCount":
		*v = new(MonitorRuleMonitorRuleCount)
		return json.Unmarshal(b, *v)
	case "MonitorRulePromote":
		*v = new(MonitorRuleMonitorRulePromote)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing MonitorRule.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for MonitorRule: "%v"`, tn.TypeName)
	}
}

func __marshalMonitorRule(v *MonitorRule) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *MonitorRuleMonitorRuleThreshold:
		typename = "MonitorRuleThreshold"

		result := struct {
			TypeName string `json:"__typename"`
			*MonitorRuleMonitorRuleThreshold
		}{typename, v}
		return json.Marshal(result)
	case *MonitorRuleMonitorRuleChange:
		typename = "MonitorRuleChange"

		result := struct {
			TypeName string `json:"__typename"`
			*MonitorRuleMonitorRuleChange
		}{typename, v}
		return json.Marshal(result)
	case *MonitorRuleMonitorRuleFacet:
		typename = "MonitorRuleFacet"

		result := struct {
			TypeName string `json:"__typename"`
			*MonitorRuleMonitorRuleFacet
		}{typename, v}
		return json.Marshal(result)
	case *MonitorRuleMonitorRuleCount:
		typename = "MonitorRuleCount"

		result := struct {
			TypeName string `json:"__typename"`
			*MonitorRuleMonitorRuleCount
		}{typename, v}
		return json.Marshal(result)
	case *MonitorRuleMonitorRulePromote:
		typename = "MonitorRulePromote"

		result := struct {
			TypeName string `json:"__typename"`
			*MonitorRuleMonitorRulePromote
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for MonitorRule: "%T"`, v)
	}
}

type MonitorRuleChangeInput struct {
	ChangeType      *ChangeType      `json:"changeType"`
	CompareFunction *CompareFunction `json:"compareFunction"`
	// For Relative ChangeType, the value is a multiple -- 0.3 means 30% change
	CompareValues     []types.NumberScalar `json:"compareValues"`
	AggregateFunction *AggregateFunction   `json:"aggregateFunction"`
	// The comparison time is established as
	// from: now - lookbackTime - baselineTime
	// to:   now - lookbackTime
	// The triggering time is established as
	// from: now - lookbackTime
	// to:   now
	// (These may end up being approximate, depending on transform scheduling and such)
	LookbackTime *types.DurationScalar `json:"lookbackTime"`
	BaselineTime *types.DurationScalar `json:"baselineTime"`
}

// GetChangeType returns MonitorRuleChangeInput.ChangeType, and is useful for accessing the field via an interface.
func (v *MonitorRuleChangeInput) GetChangeType() *ChangeType { return v.ChangeType }

// GetCompareFunction returns MonitorRuleChangeInput.CompareFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleChangeInput) GetCompareFunction() *CompareFunction { return v.CompareFunction }

// GetCompareValues returns MonitorRuleChangeInput.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleChangeInput) GetCompareValues() []types.NumberScalar { return v.CompareValues }

// GetAggregateFunction returns MonitorRuleChangeInput.AggregateFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleChangeInput) GetAggregateFunction() *AggregateFunction {
	return v.AggregateFunction
}

// GetLookbackTime returns MonitorRuleChangeInput.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleChangeInput) GetLookbackTime() *types.DurationScalar { return v.LookbackTime }

// GetBaselineTime returns MonitorRuleChangeInput.BaselineTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleChangeInput) GetBaselineTime() *types.DurationScalar { return v.BaselineTime }

type MonitorRuleCountInput struct {
	CompareFunction *CompareFunction      `json:"compareFunction"`
	CompareValues   []types.NumberScalar  `json:"compareValues"`
	LookbackTime    *types.DurationScalar `json:"lookbackTime"`
}

// GetCompareFunction returns MonitorRuleCountInput.CompareFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleCountInput) GetCompareFunction() *CompareFunction { return v.CompareFunction }

// GetCompareValues returns MonitorRuleCountInput.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleCountInput) GetCompareValues() []types.NumberScalar { return v.CompareValues }

// GetLookbackTime returns MonitorRuleCountInput.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleCountInput) GetLookbackTime() *types.DurationScalar { return v.LookbackTime }

type MonitorRuleFacetInput struct {
	FacetFunction *FacetFunction        `json:"facetFunction"`
	FacetValues   []string              `json:"facetValues"`
	TimeFunction  *TimeFunction         `json:"timeFunction"`
	TimeValue     *types.NumberScalar   `json:"timeValue"`
	LookbackTime  *types.DurationScalar `json:"lookbackTime"`
}

// GetFacetFunction returns MonitorRuleFacetInput.FacetFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleFacetInput) GetFacetFunction() *FacetFunction { return v.FacetFunction }

// GetFacetValues returns MonitorRuleFacetInput.FacetValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleFacetInput) GetFacetValues() []string { return v.FacetValues }

// GetTimeFunction returns MonitorRuleFacetInput.TimeFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleFacetInput) GetTimeFunction() *TimeFunction { return v.TimeFunction }

// GetTimeValue returns MonitorRuleFacetInput.TimeValue, and is useful for accessing the field via an interface.
func (v *MonitorRuleFacetInput) GetTimeValue() *types.NumberScalar { return v.TimeValue }

// GetLookbackTime returns MonitorRuleFacetInput.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleFacetInput) GetLookbackTime() *types.DurationScalar { return v.LookbackTime }

// MonitorRuleGroupByGroupsMonitorGroupInfo includes the requested fields of the GraphQL type MonitorGroupInfo.
type MonitorRuleGroupByGroupsMonitorGroupInfo struct {
	GroupName string `json:"groupName"`
	// GroupBy:
	// ┌───────────┬─────────┬──────────────────────────┬─────────────┬────────────┐
	// │GroupBy    │Resource │Link                      │Value column │Column Path │
	// ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
	// │groupName  │Empty    │Non-empty (FK label)      │Empty        │Empty       │
	// ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
	// │columns    │Empty    │Non-empty (FK Src fields) │Non-empty    │Empty       │
	// ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
	// │columnPath │Nil      │Nil                       │Nil          │Non-nil     │
	// └───────────┴─────────┴──────────────────────────┴─────────────┴────────────┘
	Columns []string `json:"columns"`
}

// GetGroupName returns MonitorRuleGroupByGroupsMonitorGroupInfo.GroupName, and is useful for accessing the field via an interface.
func (v *MonitorRuleGroupByGroupsMonitorGroupInfo) GetGroupName() string { return v.GroupName }

// GetColumns returns MonitorRuleGroupByGroupsMonitorGroupInfo.Columns, and is useful for accessing the field via an interface.
func (v *MonitorRuleGroupByGroupsMonitorGroupInfo) GetColumns() []string { return v.Columns }

type MonitorRuleInput struct {
	Layout       *types.JsonObject `json:"layout"`
	SourceColumn *string           `json:"sourceColumn"`
	// Takes precedence over GroupByColumns -- will replace contents of GroupByColumns
	// Specify value columns with an MonitorGroupInfo with a nil datasetId
	GroupByGroups     []MonitorGroupInfoInput `json:"groupByGroups"`
	GroupBy           *MonitorGrouping        `json:"groupBy"`
	GroupByColumns    []string                `json:"groupByColumns"`
	GroupByDatasetIds []string                `json:"groupByDatasetIds"`
	// exactly one of these should be used
	ChangeRule    *MonitorRuleChangeInput    `json:"changeRule"`
	CountRule     *MonitorRuleCountInput     `json:"countRule"`
	FacetRule     *MonitorRuleFacetInput     `json:"facetRule"`
	ThresholdRule *MonitorRuleThresholdInput `json:"thresholdRule"`
	PromoteRule   *MonitorRulePromoteInput   `json:"promoteRule"`
}

// GetLayout returns MonitorRuleInput.Layout, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetLayout() *types.JsonObject { return v.Layout }

// GetSourceColumn returns MonitorRuleInput.SourceColumn, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetSourceColumn() *string { return v.SourceColumn }

// GetGroupByGroups returns MonitorRuleInput.GroupByGroups, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetGroupByGroups() []MonitorGroupInfoInput { return v.GroupByGroups }

// GetGroupBy returns MonitorRuleInput.GroupBy, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetGroupBy() *MonitorGrouping { return v.GroupBy }

// GetGroupByColumns returns MonitorRuleInput.GroupByColumns, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetGroupByColumns() []string { return v.GroupByColumns }

// GetGroupByDatasetIds returns MonitorRuleInput.GroupByDatasetIds, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetGroupByDatasetIds() []string { return v.GroupByDatasetIds }

// GetChangeRule returns MonitorRuleInput.ChangeRule, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetChangeRule() *MonitorRuleChangeInput { return v.ChangeRule }

// GetCountRule returns MonitorRuleInput.CountRule, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetCountRule() *MonitorRuleCountInput { return v.CountRule }

// GetFacetRule returns MonitorRuleInput.FacetRule, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetFacetRule() *MonitorRuleFacetInput { return v.FacetRule }

// GetThresholdRule returns MonitorRuleInput.ThresholdRule, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetThresholdRule() *MonitorRuleThresholdInput { return v.ThresholdRule }

// GetPromoteRule returns MonitorRuleInput.PromoteRule, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetPromoteRule() *MonitorRulePromoteInput { return v.PromoteRule }

// MonitorRuleMonitorRuleChange includes the requested fields of the GraphQL type MonitorRuleChange.
type MonitorRuleMonitorRuleChange struct {
	Typename        *string                                    `json:"__typename"`
	SourceColumn    string                                     `json:"sourceColumn"`
	GroupByGroups   []MonitorRuleGroupByGroupsMonitorGroupInfo `json:"groupByGroups"`
	ChangeType      ChangeType                                 `json:"changeType"`
	CompareFunction CompareFunction                            `json:"compareFunction"`
	// For Relative ChangeType, the value is a multiple -- 0.3 means 30% change
	CompareValues     []types.NumberScalar `json:"compareValues"`
	AggregateFunction AggregateFunction    `json:"aggregateFunction"`
	// The comparison time is established as
	// from: now - lookbackTime - baselineTime
	// to:   now - lookbackTime
	// The triggering time is established as
	// from: now - lookbackTime
	// to:   now
	// (These may end up being approximate, depending on transform scheduling and such)
	LookbackTime types.DurationScalar `json:"lookbackTime"`
	BaselineTime types.DurationScalar `json:"baselineTime"`
}

// GetTypename returns MonitorRuleMonitorRuleChange.Typename, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetTypename() *string { return v.Typename }

// GetSourceColumn returns MonitorRuleMonitorRuleChange.SourceColumn, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetSourceColumn() string { return v.SourceColumn }

// GetGroupByGroups returns MonitorRuleMonitorRuleChange.GroupByGroups, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetGroupByGroups() []MonitorRuleGroupByGroupsMonitorGroupInfo {
	return v.GroupByGroups
}

// GetChangeType returns MonitorRuleMonitorRuleChange.ChangeType, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetChangeType() ChangeType { return v.ChangeType }

// GetCompareFunction returns MonitorRuleMonitorRuleChange.CompareFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetCompareFunction() CompareFunction { return v.CompareFunction }

// GetCompareValues returns MonitorRuleMonitorRuleChange.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetCompareValues() []types.NumberScalar {
	return v.CompareValues
}

// GetAggregateFunction returns MonitorRuleMonitorRuleChange.AggregateFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetAggregateFunction() AggregateFunction {
	return v.AggregateFunction
}

// GetLookbackTime returns MonitorRuleMonitorRuleChange.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetLookbackTime() types.DurationScalar { return v.LookbackTime }

// GetBaselineTime returns MonitorRuleMonitorRuleChange.BaselineTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetBaselineTime() types.DurationScalar { return v.BaselineTime }

// MonitorRuleMonitorRuleCount includes the requested fields of the GraphQL type MonitorRuleCount.
type MonitorRuleMonitorRuleCount struct {
	Typename        *string                                    `json:"__typename"`
	SourceColumn    string                                     `json:"sourceColumn"`
	GroupByGroups   []MonitorRuleGroupByGroupsMonitorGroupInfo `json:"groupByGroups"`
	CompareFunction CompareFunction                            `json:"compareFunction"`
	CompareValues   []types.NumberScalar                       `json:"compareValues"`
	LookbackTime    types.DurationScalar                       `json:"lookbackTime"`
}

// GetTypename returns MonitorRuleMonitorRuleCount.Typename, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleCount) GetTypename() *string { return v.Typename }

// GetSourceColumn returns MonitorRuleMonitorRuleCount.SourceColumn, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleCount) GetSourceColumn() string { return v.SourceColumn }

// GetGroupByGroups returns MonitorRuleMonitorRuleCount.GroupByGroups, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleCount) GetGroupByGroups() []MonitorRuleGroupByGroupsMonitorGroupInfo {
	return v.GroupByGroups
}

// GetCompareFunction returns MonitorRuleMonitorRuleCount.CompareFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleCount) GetCompareFunction() CompareFunction { return v.CompareFunction }

// GetCompareValues returns MonitorRuleMonitorRuleCount.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleCount) GetCompareValues() []types.NumberScalar { return v.CompareValues }

// GetLookbackTime returns MonitorRuleMonitorRuleCount.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleCount) GetLookbackTime() types.DurationScalar { return v.LookbackTime }

// MonitorRuleMonitorRuleFacet includes the requested fields of the GraphQL type MonitorRuleFacet.
type MonitorRuleMonitorRuleFacet struct {
	Typename      *string                                    `json:"__typename"`
	SourceColumn  string                                     `json:"sourceColumn"`
	GroupByGroups []MonitorRuleGroupByGroupsMonitorGroupInfo `json:"groupByGroups"`
	FacetFunction FacetFunction                              `json:"facetFunction"`
	FacetValues   []string                                   `json:"facetValues"`
	TimeFunction  TimeFunction                               `json:"timeFunction"`
	// for example, "50" for "more than 50% of the time"
	TimeValue    *types.NumberScalar  `json:"timeValue"`
	LookbackTime types.DurationScalar `json:"lookbackTime"`
}

// GetTypename returns MonitorRuleMonitorRuleFacet.Typename, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleFacet) GetTypename() *string { return v.Typename }

// GetSourceColumn returns MonitorRuleMonitorRuleFacet.SourceColumn, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleFacet) GetSourceColumn() string { return v.SourceColumn }

// GetGroupByGroups returns MonitorRuleMonitorRuleFacet.GroupByGroups, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleFacet) GetGroupByGroups() []MonitorRuleGroupByGroupsMonitorGroupInfo {
	return v.GroupByGroups
}

// GetFacetFunction returns MonitorRuleMonitorRuleFacet.FacetFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleFacet) GetFacetFunction() FacetFunction { return v.FacetFunction }

// GetFacetValues returns MonitorRuleMonitorRuleFacet.FacetValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleFacet) GetFacetValues() []string { return v.FacetValues }

// GetTimeFunction returns MonitorRuleMonitorRuleFacet.TimeFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleFacet) GetTimeFunction() TimeFunction { return v.TimeFunction }

// GetTimeValue returns MonitorRuleMonitorRuleFacet.TimeValue, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleFacet) GetTimeValue() *types.NumberScalar { return v.TimeValue }

// GetLookbackTime returns MonitorRuleMonitorRuleFacet.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleFacet) GetLookbackTime() types.DurationScalar { return v.LookbackTime }

// MonitorRuleMonitorRulePromote includes the requested fields of the GraphQL type MonitorRulePromote.
type MonitorRuleMonitorRulePromote struct {
	Typename         *string                                    `json:"__typename"`
	SourceColumn     string                                     `json:"sourceColumn"`
	GroupByGroups    []MonitorRuleGroupByGroupsMonitorGroupInfo `json:"groupByGroups"`
	KindField        *string                                    `json:"kindField"`
	DescriptionField *string                                    `json:"descriptionField"`
	PrimaryKey       []string                                   `json:"primaryKey"`
}

// GetTypename returns MonitorRuleMonitorRulePromote.Typename, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRulePromote) GetTypename() *string { return v.Typename }

// GetSourceColumn returns MonitorRuleMonitorRulePromote.SourceColumn, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRulePromote) GetSourceColumn() string { return v.SourceColumn }

// GetGroupByGroups returns MonitorRuleMonitorRulePromote.GroupByGroups, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRulePromote) GetGroupByGroups() []MonitorRuleGroupByGroupsMonitorGroupInfo {
	return v.GroupByGroups
}

// GetKindField returns MonitorRuleMonitorRulePromote.KindField, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRulePromote) GetKindField() *string { return v.KindField }

// GetDescriptionField returns MonitorRuleMonitorRulePromote.DescriptionField, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRulePromote) GetDescriptionField() *string { return v.DescriptionField }

// GetPrimaryKey returns MonitorRuleMonitorRulePromote.PrimaryKey, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRulePromote) GetPrimaryKey() []string { return v.PrimaryKey }

// MonitorRuleMonitorRuleThreshold includes the requested fields of the GraphQL type MonitorRuleThreshold.
type MonitorRuleMonitorRuleThreshold struct {
	Typename             *string                                    `json:"__typename"`
	SourceColumn         string                                     `json:"sourceColumn"`
	GroupByGroups        []MonitorRuleGroupByGroupsMonitorGroupInfo `json:"groupByGroups"`
	CompareFunction      CompareFunction                            `json:"compareFunction"`
	CompareValues        []types.NumberScalar                       `json:"compareValues"`
	LookbackTime         types.DurationScalar                       `json:"lookbackTime"`
	ThresholdAggFunction ThresholdAggFunction                       `json:"thresholdAggFunction"`
}

// GetTypename returns MonitorRuleMonitorRuleThreshold.Typename, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleThreshold) GetTypename() *string { return v.Typename }

// GetSourceColumn returns MonitorRuleMonitorRuleThreshold.SourceColumn, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleThreshold) GetSourceColumn() string { return v.SourceColumn }

// GetGroupByGroups returns MonitorRuleMonitorRuleThreshold.GroupByGroups, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleThreshold) GetGroupByGroups() []MonitorRuleGroupByGroupsMonitorGroupInfo {
	return v.GroupByGroups
}

// GetCompareFunction returns MonitorRuleMonitorRuleThreshold.CompareFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleThreshold) GetCompareFunction() CompareFunction {
	return v.CompareFunction
}

// GetCompareValues returns MonitorRuleMonitorRuleThreshold.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleThreshold) GetCompareValues() []types.NumberScalar {
	return v.CompareValues
}

// GetLookbackTime returns MonitorRuleMonitorRuleThreshold.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleThreshold) GetLookbackTime() types.DurationScalar {
	return v.LookbackTime
}

// GetThresholdAggFunction returns MonitorRuleMonitorRuleThreshold.ThresholdAggFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleThreshold) GetThresholdAggFunction() ThresholdAggFunction {
	return v.ThresholdAggFunction
}

type MonitorRulePromoteInput struct {
	PrimaryKey       []string `json:"primaryKey"`
	DescriptionField *string  `json:"descriptionField"`
	KindField        *string  `json:"kindField"`
}

// GetPrimaryKey returns MonitorRulePromoteInput.PrimaryKey, and is useful for accessing the field via an interface.
func (v *MonitorRulePromoteInput) GetPrimaryKey() []string { return v.PrimaryKey }

// GetDescriptionField returns MonitorRulePromoteInput.DescriptionField, and is useful for accessing the field via an interface.
func (v *MonitorRulePromoteInput) GetDescriptionField() *string { return v.DescriptionField }

// GetKindField returns MonitorRulePromoteInput.KindField, and is useful for accessing the field via an interface.
func (v *MonitorRulePromoteInput) GetKindField() *string { return v.KindField }

type MonitorRuleThresholdInput struct {
	CompareFunction      *CompareFunction      `json:"compareFunction"`
	CompareValues        []types.NumberScalar  `json:"compareValues"`
	LookbackTime         *types.DurationScalar `json:"lookbackTime"`
	ThresholdAggFunction *ThresholdAggFunction `json:"thresholdAggFunction"`
}

// GetCompareFunction returns MonitorRuleThresholdInput.CompareFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleThresholdInput) GetCompareFunction() *CompareFunction { return v.CompareFunction }

// GetCompareValues returns MonitorRuleThresholdInput.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleThresholdInput) GetCompareValues() []types.NumberScalar { return v.CompareValues }

// GetLookbackTime returns MonitorRuleThresholdInput.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleThresholdInput) GetLookbackTime() *types.DurationScalar { return v.LookbackTime }

// GetThresholdAggFunction returns MonitorRuleThresholdInput.ThresholdAggFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleThresholdInput) GetThresholdAggFunction() *ThresholdAggFunction {
	return v.ThresholdAggFunction
}

type MultiStageQueryInput struct {
	OutputStage     string                  `json:"outputStage"`
	Stages          []StageQueryInput       `json:"stages"`
	Parameters      []ParameterSpecInput    `json:"parameters"`
	ParameterValues []ParameterBindingInput `json:"parameterValues"`
	Layout          *types.JsonObject       `json:"layout"`
}

// GetOutputStage returns MultiStageQueryInput.OutputStage, and is useful for accessing the field via an interface.
func (v *MultiStageQueryInput) GetOutputStage() string { return v.OutputStage }

// GetStages returns MultiStageQueryInput.Stages, and is useful for accessing the field via an interface.
func (v *MultiStageQueryInput) GetStages() []StageQueryInput { return v.Stages }

// GetParameters returns MultiStageQueryInput.Parameters, and is useful for accessing the field via an interface.
func (v *MultiStageQueryInput) GetParameters() []ParameterSpecInput { return v.Parameters }

// GetParameterValues returns MultiStageQueryInput.ParameterValues, and is useful for accessing the field via an interface.
func (v *MultiStageQueryInput) GetParameterValues() []ParameterBindingInput { return v.ParameterValues }

// GetLayout returns MultiStageQueryInput.Layout, and is useful for accessing the field via an interface.
func (v *MultiStageQueryInput) GetLayout() *types.JsonObject { return v.Layout }

type NotificationImportance string

const (
	NotificationImportanceInformational NotificationImportance = "Informational"
	NotificationImportanceImportant     NotificationImportance = "Important"
	NotificationImportanceMissing       NotificationImportance = "Missing"
)

type NotificationMerge string

const (
	NotificationMergeMerged   NotificationMerge = "Merged"
	NotificationMergeSeparate NotificationMerge = "Separate"
)

type NotificationSelection string

const (
	NotificationSelectionAny        NotificationSelection = "Any"
	NotificationSelectionAll        NotificationSelection = "All"
	NotificationSelectionPercentage NotificationSelection = "Percentage"
	NotificationSelectionCount      NotificationSelection = "Count"
)

type NotificationSpecificationInput struct {
	Importance        *NotificationImportance `json:"importance"`
	Merge             *NotificationMerge      `json:"merge"`
	Selection         *NotificationSelection  `json:"selection"`
	SelectionValue    *types.NumberScalar     `json:"selectionValue"`
	ReminderFrequency *types.DurationScalar   `json:"reminderFrequency"`
}

// GetImportance returns NotificationSpecificationInput.Importance, and is useful for accessing the field via an interface.
func (v *NotificationSpecificationInput) GetImportance() *NotificationImportance { return v.Importance }

// GetMerge returns NotificationSpecificationInput.Merge, and is useful for accessing the field via an interface.
func (v *NotificationSpecificationInput) GetMerge() *NotificationMerge { return v.Merge }

// GetSelection returns NotificationSpecificationInput.Selection, and is useful for accessing the field via an interface.
func (v *NotificationSpecificationInput) GetSelection() *NotificationSelection { return v.Selection }

// GetSelectionValue returns NotificationSpecificationInput.SelectionValue, and is useful for accessing the field via an interface.
func (v *NotificationSpecificationInput) GetSelectionValue() *types.NumberScalar {
	return v.SelectionValue
}

// GetReminderFrequency returns NotificationSpecificationInput.ReminderFrequency, and is useful for accessing the field via an interface.
func (v *NotificationSpecificationInput) GetReminderFrequency() *types.DurationScalar {
	return v.ReminderFrequency
}

type NullOrdering string

const (
	// Default: nulls are "small" for valid-from, "big" for valid-to, and "last"
	// for other fields.
	NullOrderingDefault NullOrdering = "Default"
	NullOrderingFirst   NullOrdering = "First"
	NullOrderingLast    NullOrdering = "Last"
)

// At some point in the future, we may have Segments as business objects,
// and be able to bookmark them. Technically, we can bookmark bookmark groups, but
// there is no current UI using that feature.
type ObjectKind string

const (
	ObjectKindDataset       ObjectKind = "Dataset"
	ObjectKindWorksheet     ObjectKind = "Worksheet"
	ObjectKindBookmarkgroup ObjectKind = "BookmarkGroup"
	ObjectKindMonitor       ObjectKind = "Monitor"
	ObjectKindResource      ObjectKind = "Resource"
	ObjectKindDashboard     ObjectKind = "Dashboard"
)

type PaginationInput struct {
	// Number of rows to return in paginatedResults of initial TaskResult. May
	// be set to 0, in which case paginatedResults will only contain a cursor
	// ID. Any value < 0 (say, -1) is interpreted as "all rows" (beware of
	// large results).
	InitialRows types.Int64Scalar `json:"initialRows"`
	// Initial rollup filter (default to "all" mode if nil).
	InitialRollupFilter *RollupFilterInput `json:"initialRollupFilter"`
	// If set to true, cache the cursor so that Query.cursor() can be used to
	// fetch additional rows beyond initialRows. Omitting or setting the
	// parameter to false saves back-end resources and is to be preferred if
	// the caller knows it will not call Query.cursor().
	CacheCursor *bool `json:"cacheCursor"`
	// Choose how the cursor is cached.
	CursorCacheMode *CursorCacheMode `json:"cursorCacheMode"`
}

// GetInitialRows returns PaginationInput.InitialRows, and is useful for accessing the field via an interface.
func (v *PaginationInput) GetInitialRows() types.Int64Scalar { return v.InitialRows }

// GetInitialRollupFilter returns PaginationInput.InitialRollupFilter, and is useful for accessing the field via an interface.
func (v *PaginationInput) GetInitialRollupFilter() *RollupFilterInput { return v.InitialRollupFilter }

// GetCacheCursor returns PaginationInput.CacheCursor, and is useful for accessing the field via an interface.
func (v *PaginationInput) GetCacheCursor() *bool { return v.CacheCursor }

// GetCursorCacheMode returns PaginationInput.CursorCacheMode, and is useful for accessing the field via an interface.
func (v *PaginationInput) GetCursorCacheMode() *CursorCacheMode { return v.CursorCacheMode }

// Parameter values for queries (and defaults) are specified with
// ParameterBindingInput.
//
// For APIs that take a raw StageInput array, the parameterValues argument is in
// parallel.  For APIs that take MultiStageQueryInput, parameterValues are part
// of that query.
type ParameterBindingInput struct {
	Id    string     `json:"id"`
	Value ValueInput `json:"value"`
}

// GetId returns ParameterBindingInput.Id, and is useful for accessing the field via an interface.
func (v *ParameterBindingInput) GetId() string { return v.Id }

// GetValue returns ParameterBindingInput.Value, and is useful for accessing the field via an interface.
func (v *ParameterBindingInput) GetValue() ValueInput { return v.Value }

// Whever you can "save" a worksheet-like entity, you can also save the
// parameters that go with it. This is so that the worksheet component in the FE
// can have a unified API to work against. You can also save the parameterValues
// to go with it as well.
type ParameterSpecInput struct {
	// opal usable id, ideally a valid C and JavaScript identifier
	Id string `json:"id"`
	// user-readable name
	Name string `json:"name"`
	// optional default value, must match valueKind if present
	DefaultValue *ValueInput        `json:"defaultValue"`
	ValueKind    ValueTypeSpecInput `json:"valueKind"`
}

// GetId returns ParameterSpecInput.Id, and is useful for accessing the field via an interface.
func (v *ParameterSpecInput) GetId() string { return v.Id }

// GetName returns ParameterSpecInput.Name, and is useful for accessing the field via an interface.
func (v *ParameterSpecInput) GetName() string { return v.Name }

// GetDefaultValue returns ParameterSpecInput.DefaultValue, and is useful for accessing the field via an interface.
func (v *ParameterSpecInput) GetDefaultValue() *ValueInput { return v.DefaultValue }

// GetValueKind returns ParameterSpecInput.ValueKind, and is useful for accessing the field via an interface.
func (v *ParameterSpecInput) GetValueKind() ValueTypeSpecInput { return v.ValueKind }

// Poller includes the GraphQL fields of Poller requested by the fragment Poller.
type Poller struct {
	Id           string       `json:"id"`
	WorkspaceId  string       `json:"workspaceId"`
	CustomerId   string       `json:"customerId"`
	DatastreamId *string      `json:"datastreamId"`
	Disabled     bool         `json:"disabled"`
	Kind         PollerKind   `json:"kind"`
	Config       PollerConfig `json:"-"`
}

// GetId returns Poller.Id, and is useful for accessing the field via an interface.
func (v *Poller) GetId() string { return v.Id }

// GetWorkspaceId returns Poller.WorkspaceId, and is useful for accessing the field via an interface.
func (v *Poller) GetWorkspaceId() string { return v.WorkspaceId }

// GetCustomerId returns Poller.CustomerId, and is useful for accessing the field via an interface.
func (v *Poller) GetCustomerId() string { return v.CustomerId }

// GetDatastreamId returns Poller.DatastreamId, and is useful for accessing the field via an interface.
func (v *Poller) GetDatastreamId() *string { return v.DatastreamId }

// GetDisabled returns Poller.Disabled, and is useful for accessing the field via an interface.
func (v *Poller) GetDisabled() bool { return v.Disabled }

// GetKind returns Poller.Kind, and is useful for accessing the field via an interface.
func (v *Poller) GetKind() PollerKind { return v.Kind }

// GetConfig returns Poller.Config, and is useful for accessing the field via an interface.
func (v *Poller) GetConfig() PollerConfig { return v.Config }

func (v *Poller) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*Poller
		Config json.RawMessage `json:"config"`
		graphql.NoUnmarshalJSON
	}
	firstPass.Poller = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Config
		src := firstPass.Config
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalPollerConfig(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal Poller.Config: %w", err)
			}
		}
	}
	return nil
}

type __premarshalPoller struct {
	Id string `json:"id"`

	WorkspaceId string `json:"workspaceId"`

	CustomerId string `json:"customerId"`

	DatastreamId *string `json:"datastreamId"`

	Disabled bool `json:"disabled"`

	Kind PollerKind `json:"kind"`

	Config json.RawMessage `json:"config"`
}

func (v *Poller) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *Poller) __premarshalJSON() (*__premarshalPoller, error) {
	var retval __premarshalPoller

	retval.Id = v.Id
	retval.WorkspaceId = v.WorkspaceId
	retval.CustomerId = v.CustomerId
	retval.DatastreamId = v.DatastreamId
	retval.Disabled = v.Disabled
	retval.Kind = v.Kind
	{

		dst := &retval.Config
		src := v.Config
		var err error
		*dst, err = __marshalPollerConfig(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal Poller.Config: %w", err)
		}
	}
	return &retval, nil
}

type PollerChunkInput struct {
	Enabled bool               `json:"enabled"`
	Size    *types.Int64Scalar `json:"size"`
}

// GetEnabled returns PollerChunkInput.Enabled, and is useful for accessing the field via an interface.
func (v *PollerChunkInput) GetEnabled() bool { return v.Enabled }

// GetSize returns PollerChunkInput.Size, and is useful for accessing the field via an interface.
func (v *PollerChunkInput) GetSize() *types.Int64Scalar { return v.Size }

// PollerConfig includes the requested fields of the GraphQL interface PollerConfig.
//
// PollerConfig is implemented by the following types:
// PollerConfigPollerPubSubConfig
// PollerConfigPollerHTTPConfig
// PollerConfigPollerGCPMonitoringConfig
// PollerConfigPollerMongoDBAtlasConfig
// PollerConfigPollerConfluentCloudConfig
type PollerConfig interface {
	implementsGraphQLInterfacePollerConfig()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetName returns the interface-field "name" from its implementation.
	GetName() *string
	// GetRetries returns the interface-field "retries" from its implementation.
	GetRetries() *types.Int64Scalar
	// GetInterval returns the interface-field "interval" from its implementation.
	GetInterval() *types.DurationScalar
	// GetTags returns the interface-field "tags" from its implementation.
	GetTags() *types.JsonObject
	// GetChunk returns the interface-field "chunk" from its implementation.
	GetChunk() *PollerConfigChunkPollerChunkConfig
}

func (v *PollerConfigPollerPubSubConfig) implementsGraphQLInterfacePollerConfig()         {}
func (v *PollerConfigPollerHTTPConfig) implementsGraphQLInterfacePollerConfig()           {}
func (v *PollerConfigPollerGCPMonitoringConfig) implementsGraphQLInterfacePollerConfig()  {}
func (v *PollerConfigPollerMongoDBAtlasConfig) implementsGraphQLInterfacePollerConfig()   {}
func (v *PollerConfigPollerConfluentCloudConfig) implementsGraphQLInterfacePollerConfig() {}

func __unmarshalPollerConfig(b []byte, v *PollerConfig) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "PollerPubSubConfig":
		*v = new(PollerConfigPollerPubSubConfig)
		return json.Unmarshal(b, *v)
	case "PollerHTTPConfig":
		*v = new(PollerConfigPollerHTTPConfig)
		return json.Unmarshal(b, *v)
	case "PollerGCPMonitoringConfig":
		*v = new(PollerConfigPollerGCPMonitoringConfig)
		return json.Unmarshal(b, *v)
	case "PollerMongoDBAtlasConfig":
		*v = new(PollerConfigPollerMongoDBAtlasConfig)
		return json.Unmarshal(b, *v)
	case "PollerConfluentCloudConfig":
		*v = new(PollerConfigPollerConfluentCloudConfig)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PollerConfig.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for PollerConfig: "%v"`, tn.TypeName)
	}
}

func __marshalPollerConfig(v *PollerConfig) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *PollerConfigPollerPubSubConfig:
		typename = "PollerPubSubConfig"

		result := struct {
			TypeName string `json:"__typename"`
			*PollerConfigPollerPubSubConfig
		}{typename, v}
		return json.Marshal(result)
	case *PollerConfigPollerHTTPConfig:
		typename = "PollerHTTPConfig"

		result := struct {
			TypeName string `json:"__typename"`
			*PollerConfigPollerHTTPConfig
		}{typename, v}
		return json.Marshal(result)
	case *PollerConfigPollerGCPMonitoringConfig:
		typename = "PollerGCPMonitoringConfig"

		result := struct {
			TypeName string `json:"__typename"`
			*PollerConfigPollerGCPMonitoringConfig
		}{typename, v}
		return json.Marshal(result)
	case *PollerConfigPollerMongoDBAtlasConfig:
		typename = "PollerMongoDBAtlasConfig"

		result := struct {
			TypeName string `json:"__typename"`
			*PollerConfigPollerMongoDBAtlasConfig
		}{typename, v}
		return json.Marshal(result)
	case *PollerConfigPollerConfluentCloudConfig:
		typename = "PollerConfluentCloudConfig"

		result := struct {
			TypeName string `json:"__typename"`
			*PollerConfigPollerConfluentCloudConfig
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for PollerConfig: "%T"`, v)
	}
}

// PollerConfigChunkPollerChunkConfig includes the requested fields of the GraphQL type PollerChunkConfig.
type PollerConfigChunkPollerChunkConfig struct {
	Enabled bool               `json:"enabled"`
	Size    *types.Int64Scalar `json:"size"`
}

// GetEnabled returns PollerConfigChunkPollerChunkConfig.Enabled, and is useful for accessing the field via an interface.
func (v *PollerConfigChunkPollerChunkConfig) GetEnabled() bool { return v.Enabled }

// GetSize returns PollerConfigChunkPollerChunkConfig.Size, and is useful for accessing the field via an interface.
func (v *PollerConfigChunkPollerChunkConfig) GetSize() *types.Int64Scalar { return v.Size }

// PollerConfigPollerConfluentCloudConfig includes the requested fields of the GraphQL type PollerConfluentCloudConfig.
type PollerConfigPollerConfluentCloudConfig struct {
	Typename *string                             `json:"__typename"`
	Name     *string                             `json:"name"`
	Retries  *types.Int64Scalar                  `json:"retries"`
	Interval *types.DurationScalar               `json:"interval"`
	Tags     *types.JsonObject                   `json:"tags"`
	Chunk    *PollerConfigChunkPollerChunkConfig `json:"chunk"`
}

// GetTypename returns PollerConfigPollerConfluentCloudConfig.Typename, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerConfluentCloudConfig) GetTypename() *string { return v.Typename }

// GetName returns PollerConfigPollerConfluentCloudConfig.Name, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerConfluentCloudConfig) GetName() *string { return v.Name }

// GetRetries returns PollerConfigPollerConfluentCloudConfig.Retries, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerConfluentCloudConfig) GetRetries() *types.Int64Scalar { return v.Retries }

// GetInterval returns PollerConfigPollerConfluentCloudConfig.Interval, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerConfluentCloudConfig) GetInterval() *types.DurationScalar {
	return v.Interval
}

// GetTags returns PollerConfigPollerConfluentCloudConfig.Tags, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerConfluentCloudConfig) GetTags() *types.JsonObject { return v.Tags }

// GetChunk returns PollerConfigPollerConfluentCloudConfig.Chunk, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerConfluentCloudConfig) GetChunk() *PollerConfigChunkPollerChunkConfig {
	return v.Chunk
}

// PollerConfigPollerGCPMonitoringConfig includes the requested fields of the GraphQL type PollerGCPMonitoringConfig.
type PollerConfigPollerGCPMonitoringConfig struct {
	Typename                  *string                             `json:"__typename"`
	Name                      *string                             `json:"name"`
	Retries                   *types.Int64Scalar                  `json:"retries"`
	Interval                  *types.DurationScalar               `json:"interval"`
	Tags                      *types.JsonObject                   `json:"tags"`
	Chunk                     *PollerConfigChunkPollerChunkConfig `json:"chunk"`
	ProjectId                 string                              `json:"projectId"`
	JsonKey                   types.JsonObject                    `json:"jsonKey"`
	IncludeMetricTypePrefixes []string                            `json:"includeMetricTypePrefixes"`
	ExcludeMetricTypePrefixes []string                            `json:"excludeMetricTypePrefixes"`
	RateLimit                 *types.Int64Scalar                  `json:"rateLimit"`
	TotalLimit                *types.Int64Scalar                  `json:"totalLimit"`
}

// GetTypename returns PollerConfigPollerGCPMonitoringConfig.Typename, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetTypename() *string { return v.Typename }

// GetName returns PollerConfigPollerGCPMonitoringConfig.Name, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetName() *string { return v.Name }

// GetRetries returns PollerConfigPollerGCPMonitoringConfig.Retries, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetRetries() *types.Int64Scalar { return v.Retries }

// GetInterval returns PollerConfigPollerGCPMonitoringConfig.Interval, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetInterval() *types.DurationScalar {
	return v.Interval
}

// GetTags returns PollerConfigPollerGCPMonitoringConfig.Tags, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetTags() *types.JsonObject { return v.Tags }

// GetChunk returns PollerConfigPollerGCPMonitoringConfig.Chunk, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetChunk() *PollerConfigChunkPollerChunkConfig {
	return v.Chunk
}

// GetProjectId returns PollerConfigPollerGCPMonitoringConfig.ProjectId, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetProjectId() string { return v.ProjectId }

// GetJsonKey returns PollerConfigPollerGCPMonitoringConfig.JsonKey, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetJsonKey() types.JsonObject { return v.JsonKey }

// GetIncludeMetricTypePrefixes returns PollerConfigPollerGCPMonitoringConfig.IncludeMetricTypePrefixes, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetIncludeMetricTypePrefixes() []string {
	return v.IncludeMetricTypePrefixes
}

// GetExcludeMetricTypePrefixes returns PollerConfigPollerGCPMonitoringConfig.ExcludeMetricTypePrefixes, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetExcludeMetricTypePrefixes() []string {
	return v.ExcludeMetricTypePrefixes
}

// GetRateLimit returns PollerConfigPollerGCPMonitoringConfig.RateLimit, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetRateLimit() *types.Int64Scalar { return v.RateLimit }

// GetTotalLimit returns PollerConfigPollerGCPMonitoringConfig.TotalLimit, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetTotalLimit() *types.Int64Scalar {
	return v.TotalLimit
}

// PollerConfigPollerHTTPConfig includes the requested fields of the GraphQL type PollerHTTPConfig.
type PollerConfigPollerHTTPConfig struct {
	Typename    *string                                                 `json:"__typename"`
	Name        *string                                                 `json:"name"`
	Retries     *types.Int64Scalar                                      `json:"retries"`
	Interval    *types.DurationScalar                                   `json:"interval"`
	Tags        *types.JsonObject                                       `json:"tags"`
	Chunk       *PollerConfigChunkPollerChunkConfig                     `json:"chunk"`
	Method      *string                                                 `json:"method"`
	Body        *string                                                 `json:"body"`
	Endpoint    *string                                                 `json:"endpoint"`
	ContentType *string                                                 `json:"contentType"`
	Headers     *types.JsonObject                                       `json:"headers"`
	Template    *HttpRequestConfig                                      `json:"template"`
	Requests    []HttpRequestConfig                                     `json:"requests"`
	Rules       []PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig `json:"rules"`
}

// GetTypename returns PollerConfigPollerHTTPConfig.Typename, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetTypename() *string { return v.Typename }

// GetName returns PollerConfigPollerHTTPConfig.Name, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetName() *string { return v.Name }

// GetRetries returns PollerConfigPollerHTTPConfig.Retries, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetRetries() *types.Int64Scalar { return v.Retries }

// GetInterval returns PollerConfigPollerHTTPConfig.Interval, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetInterval() *types.DurationScalar { return v.Interval }

// GetTags returns PollerConfigPollerHTTPConfig.Tags, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetTags() *types.JsonObject { return v.Tags }

// GetChunk returns PollerConfigPollerHTTPConfig.Chunk, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetChunk() *PollerConfigChunkPollerChunkConfig { return v.Chunk }

// GetMethod returns PollerConfigPollerHTTPConfig.Method, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetMethod() *string { return v.Method }

// GetBody returns PollerConfigPollerHTTPConfig.Body, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetBody() *string { return v.Body }

// GetEndpoint returns PollerConfigPollerHTTPConfig.Endpoint, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetEndpoint() *string { return v.Endpoint }

// GetContentType returns PollerConfigPollerHTTPConfig.ContentType, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetContentType() *string { return v.ContentType }

// GetHeaders returns PollerConfigPollerHTTPConfig.Headers, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetHeaders() *types.JsonObject { return v.Headers }

// GetTemplate returns PollerConfigPollerHTTPConfig.Template, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetTemplate() *HttpRequestConfig { return v.Template }

// GetRequests returns PollerConfigPollerHTTPConfig.Requests, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetRequests() []HttpRequestConfig { return v.Requests }

// GetRules returns PollerConfigPollerHTTPConfig.Rules, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetRules() []PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig {
	return v.Rules
}

// PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig includes the requested fields of the GraphQL type PollerHTTPRuleConfig.
type PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig struct {
	Match   *HttpRequestConfig                                                                   `json:"match"`
	Follow  *string                                                                              `json:"follow"`
	Decoder *PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfigDecoderPollerHTTPDecoderConfig `json:"decoder"`
}

// GetMatch returns PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig.Match, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig) GetMatch() *HttpRequestConfig {
	return v.Match
}

// GetFollow returns PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig.Follow, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig) GetFollow() *string { return v.Follow }

// GetDecoder returns PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig.Decoder, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig) GetDecoder() *PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfigDecoderPollerHTTPDecoderConfig {
	return v.Decoder
}

// PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfigDecoderPollerHTTPDecoderConfig includes the requested fields of the GraphQL type PollerHTTPDecoderConfig.
type PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfigDecoderPollerHTTPDecoderConfig struct {
	Type string `json:"type"`
}

// GetType returns PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfigDecoderPollerHTTPDecoderConfig.Type, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfigDecoderPollerHTTPDecoderConfig) GetType() string {
	return v.Type
}

// PollerConfigPollerMongoDBAtlasConfig includes the requested fields of the GraphQL type PollerMongoDBAtlasConfig.
type PollerConfigPollerMongoDBAtlasConfig struct {
	Typename      *string                             `json:"__typename"`
	Name          *string                             `json:"name"`
	Retries       *types.Int64Scalar                  `json:"retries"`
	Interval      *types.DurationScalar               `json:"interval"`
	Tags          *types.JsonObject                   `json:"tags"`
	Chunk         *PollerConfigChunkPollerChunkConfig `json:"chunk"`
	PublicKey     string                              `json:"publicKey"`
	PrivateKey    string                              `json:"privateKey"`
	IncludeGroups []string                            `json:"includeGroups"`
	ExcludeGroups []string                            `json:"excludeGroups"`
}

// GetTypename returns PollerConfigPollerMongoDBAtlasConfig.Typename, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetTypename() *string { return v.Typename }

// GetName returns PollerConfigPollerMongoDBAtlasConfig.Name, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetName() *string { return v.Name }

// GetRetries returns PollerConfigPollerMongoDBAtlasConfig.Retries, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetRetries() *types.Int64Scalar { return v.Retries }

// GetInterval returns PollerConfigPollerMongoDBAtlasConfig.Interval, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetInterval() *types.DurationScalar { return v.Interval }

// GetTags returns PollerConfigPollerMongoDBAtlasConfig.Tags, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetTags() *types.JsonObject { return v.Tags }

// GetChunk returns PollerConfigPollerMongoDBAtlasConfig.Chunk, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetChunk() *PollerConfigChunkPollerChunkConfig {
	return v.Chunk
}

// GetPublicKey returns PollerConfigPollerMongoDBAtlasConfig.PublicKey, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetPublicKey() string { return v.PublicKey }

// GetPrivateKey returns PollerConfigPollerMongoDBAtlasConfig.PrivateKey, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetPrivateKey() string { return v.PrivateKey }

// GetIncludeGroups returns PollerConfigPollerMongoDBAtlasConfig.IncludeGroups, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetIncludeGroups() []string { return v.IncludeGroups }

// GetExcludeGroups returns PollerConfigPollerMongoDBAtlasConfig.ExcludeGroups, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetExcludeGroups() []string { return v.ExcludeGroups }

// PollerConfigPollerPubSubConfig includes the requested fields of the GraphQL type PollerPubSubConfig.
type PollerConfigPollerPubSubConfig struct {
	Typename       *string                             `json:"__typename"`
	Name           *string                             `json:"name"`
	Retries        *types.Int64Scalar                  `json:"retries"`
	Interval       *types.DurationScalar               `json:"interval"`
	Tags           *types.JsonObject                   `json:"tags"`
	Chunk          *PollerConfigChunkPollerChunkConfig `json:"chunk"`
	ProjectId      string                              `json:"projectId"`
	JsonKey        types.JsonObject                    `json:"jsonKey"`
	SubscriptionId string                              `json:"subscriptionId"`
}

// GetTypename returns PollerConfigPollerPubSubConfig.Typename, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetTypename() *string { return v.Typename }

// GetName returns PollerConfigPollerPubSubConfig.Name, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetName() *string { return v.Name }

// GetRetries returns PollerConfigPollerPubSubConfig.Retries, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetRetries() *types.Int64Scalar { return v.Retries }

// GetInterval returns PollerConfigPollerPubSubConfig.Interval, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetInterval() *types.DurationScalar { return v.Interval }

// GetTags returns PollerConfigPollerPubSubConfig.Tags, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetTags() *types.JsonObject { return v.Tags }

// GetChunk returns PollerConfigPollerPubSubConfig.Chunk, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetChunk() *PollerConfigChunkPollerChunkConfig {
	return v.Chunk
}

// GetProjectId returns PollerConfigPollerPubSubConfig.ProjectId, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetProjectId() string { return v.ProjectId }

// GetJsonKey returns PollerConfigPollerPubSubConfig.JsonKey, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetJsonKey() types.JsonObject { return v.JsonKey }

// GetSubscriptionId returns PollerConfigPollerPubSubConfig.SubscriptionId, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetSubscriptionId() string { return v.SubscriptionId }

type PollerConfluentCloudInput struct {
	Key    string `json:"key"`
	Secret string `json:"secret"`
}

// GetKey returns PollerConfluentCloudInput.Key, and is useful for accessing the field via an interface.
func (v *PollerConfluentCloudInput) GetKey() string { return v.Key }

// GetSecret returns PollerConfluentCloudInput.Secret, and is useful for accessing the field via an interface.
func (v *PollerConfluentCloudInput) GetSecret() string { return v.Secret }

type PollerGCPMonitoringInput struct {
	ProjectId                 string             `json:"projectId"`
	JsonKey                   types.JsonObject   `json:"jsonKey"`
	IncludeMetricTypePrefixes []string           `json:"includeMetricTypePrefixes"`
	ExcludeMetricTypePrefixes []string           `json:"excludeMetricTypePrefixes"`
	RateLimit                 *types.Int64Scalar `json:"rateLimit"`
	TotalLimit                *types.Int64Scalar `json:"totalLimit"`
}

// GetProjectId returns PollerGCPMonitoringInput.ProjectId, and is useful for accessing the field via an interface.
func (v *PollerGCPMonitoringInput) GetProjectId() string { return v.ProjectId }

// GetJsonKey returns PollerGCPMonitoringInput.JsonKey, and is useful for accessing the field via an interface.
func (v *PollerGCPMonitoringInput) GetJsonKey() types.JsonObject { return v.JsonKey }

// GetIncludeMetricTypePrefixes returns PollerGCPMonitoringInput.IncludeMetricTypePrefixes, and is useful for accessing the field via an interface.
func (v *PollerGCPMonitoringInput) GetIncludeMetricTypePrefixes() []string {
	return v.IncludeMetricTypePrefixes
}

// GetExcludeMetricTypePrefixes returns PollerGCPMonitoringInput.ExcludeMetricTypePrefixes, and is useful for accessing the field via an interface.
func (v *PollerGCPMonitoringInput) GetExcludeMetricTypePrefixes() []string {
	return v.ExcludeMetricTypePrefixes
}

// GetRateLimit returns PollerGCPMonitoringInput.RateLimit, and is useful for accessing the field via an interface.
func (v *PollerGCPMonitoringInput) GetRateLimit() *types.Int64Scalar { return v.RateLimit }

// GetTotalLimit returns PollerGCPMonitoringInput.TotalLimit, and is useful for accessing the field via an interface.
func (v *PollerGCPMonitoringInput) GetTotalLimit() *types.Int64Scalar { return v.TotalLimit }

type PollerHTTPDecoderInput struct {
	Type string `json:"type"`
}

// GetType returns PollerHTTPDecoderInput.Type, and is useful for accessing the field via an interface.
func (v *PollerHTTPDecoderInput) GetType() string { return v.Type }

type PollerHTTPInput struct {
	Method      *string                  `json:"method"`
	Body        *string                  `json:"body"`
	Endpoint    *string                  `json:"endpoint"`
	ContentType *string                  `json:"contentType"`
	Headers     *types.JsonObject        `json:"headers"`
	Template    *PollerHTTPRequestInput  `json:"template"`
	Requests    []PollerHTTPRequestInput `json:"requests"`
	Rules       []PollerHTTPRuleInput    `json:"rules"`
}

// GetMethod returns PollerHTTPInput.Method, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetMethod() *string { return v.Method }

// GetBody returns PollerHTTPInput.Body, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetBody() *string { return v.Body }

// GetEndpoint returns PollerHTTPInput.Endpoint, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetEndpoint() *string { return v.Endpoint }

// GetContentType returns PollerHTTPInput.ContentType, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetContentType() *string { return v.ContentType }

// GetHeaders returns PollerHTTPInput.Headers, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetHeaders() *types.JsonObject { return v.Headers }

// GetTemplate returns PollerHTTPInput.Template, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetTemplate() *PollerHTTPRequestInput { return v.Template }

// GetRequests returns PollerHTTPInput.Requests, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetRequests() []PollerHTTPRequestInput { return v.Requests }

// GetRules returns PollerHTTPInput.Rules, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetRules() []PollerHTTPRuleInput { return v.Rules }

type PollerHTTPRequestInput struct {
	Url      *string           `json:"url"`
	Method   *string           `json:"method"`
	Username *string           `json:"username"`
	Password *string           `json:"password"`
	Headers  *types.JsonObject `json:"headers"`
	Params   *types.JsonObject `json:"params"`
}

// GetUrl returns PollerHTTPRequestInput.Url, and is useful for accessing the field via an interface.
func (v *PollerHTTPRequestInput) GetUrl() *string { return v.Url }

// GetMethod returns PollerHTTPRequestInput.Method, and is useful for accessing the field via an interface.
func (v *PollerHTTPRequestInput) GetMethod() *string { return v.Method }

// GetUsername returns PollerHTTPRequestInput.Username, and is useful for accessing the field via an interface.
func (v *PollerHTTPRequestInput) GetUsername() *string { return v.Username }

// GetPassword returns PollerHTTPRequestInput.Password, and is useful for accessing the field via an interface.
func (v *PollerHTTPRequestInput) GetPassword() *string { return v.Password }

// GetHeaders returns PollerHTTPRequestInput.Headers, and is useful for accessing the field via an interface.
func (v *PollerHTTPRequestInput) GetHeaders() *types.JsonObject { return v.Headers }

// GetParams returns PollerHTTPRequestInput.Params, and is useful for accessing the field via an interface.
func (v *PollerHTTPRequestInput) GetParams() *types.JsonObject { return v.Params }

type PollerHTTPRuleInput struct {
	Match   *PollerHTTPRequestInput `json:"match"`
	Decoder *PollerHTTPDecoderInput `json:"decoder"`
	Follow  *string                 `json:"follow"`
}

// GetMatch returns PollerHTTPRuleInput.Match, and is useful for accessing the field via an interface.
func (v *PollerHTTPRuleInput) GetMatch() *PollerHTTPRequestInput { return v.Match }

// GetDecoder returns PollerHTTPRuleInput.Decoder, and is useful for accessing the field via an interface.
func (v *PollerHTTPRuleInput) GetDecoder() *PollerHTTPDecoderInput { return v.Decoder }

// GetFollow returns PollerHTTPRuleInput.Follow, and is useful for accessing the field via an interface.
func (v *PollerHTTPRuleInput) GetFollow() *string { return v.Follow }

type PollerInput struct {
	Name         *string               `json:"name"`
	Retries      *types.Int64Scalar    `json:"retries"`
	Interval     *types.DurationScalar `json:"interval"`
	Chunk        *PollerChunkInput     `json:"chunk"`
	Tags         *types.JsonObject     `json:"tags"`
	DatastreamId *string               `json:"datastreamId"`
	// Config is mandatory, but varies based on the poller kind
	PubsubConfig         *PollerPubSubInput         `json:"pubsubConfig"`
	HttpConfig           *PollerHTTPInput           `json:"httpConfig"`
	GcpConfig            *PollerGCPMonitoringInput  `json:"gcpConfig"`
	MongoDBAtlasConfig   *PollerMongoDBAtlasInput   `json:"mongoDBAtlasConfig"`
	ConfluentCloudConfig *PollerConfluentCloudInput `json:"confluentCloudConfig"`
}

// GetName returns PollerInput.Name, and is useful for accessing the field via an interface.
func (v *PollerInput) GetName() *string { return v.Name }

// GetRetries returns PollerInput.Retries, and is useful for accessing the field via an interface.
func (v *PollerInput) GetRetries() *types.Int64Scalar { return v.Retries }

// GetInterval returns PollerInput.Interval, and is useful for accessing the field via an interface.
func (v *PollerInput) GetInterval() *types.DurationScalar { return v.Interval }

// GetChunk returns PollerInput.Chunk, and is useful for accessing the field via an interface.
func (v *PollerInput) GetChunk() *PollerChunkInput { return v.Chunk }

// GetTags returns PollerInput.Tags, and is useful for accessing the field via an interface.
func (v *PollerInput) GetTags() *types.JsonObject { return v.Tags }

// GetDatastreamId returns PollerInput.DatastreamId, and is useful for accessing the field via an interface.
func (v *PollerInput) GetDatastreamId() *string { return v.DatastreamId }

// GetPubsubConfig returns PollerInput.PubsubConfig, and is useful for accessing the field via an interface.
func (v *PollerInput) GetPubsubConfig() *PollerPubSubInput { return v.PubsubConfig }

// GetHttpConfig returns PollerInput.HttpConfig, and is useful for accessing the field via an interface.
func (v *PollerInput) GetHttpConfig() *PollerHTTPInput { return v.HttpConfig }

// GetGcpConfig returns PollerInput.GcpConfig, and is useful for accessing the field via an interface.
func (v *PollerInput) GetGcpConfig() *PollerGCPMonitoringInput { return v.GcpConfig }

// GetMongoDBAtlasConfig returns PollerInput.MongoDBAtlasConfig, and is useful for accessing the field via an interface.
func (v *PollerInput) GetMongoDBAtlasConfig() *PollerMongoDBAtlasInput { return v.MongoDBAtlasConfig }

// GetConfluentCloudConfig returns PollerInput.ConfluentCloudConfig, and is useful for accessing the field via an interface.
func (v *PollerInput) GetConfluentCloudConfig() *PollerConfluentCloudInput {
	return v.ConfluentCloudConfig
}

type PollerKind string

const (
	PollerKindPubsub         PollerKind = "PubSub"
	PollerKindHttp           PollerKind = "HTTP"
	PollerKindGcpmonitoring  PollerKind = "GCPMonitoring"
	PollerKindMongodbatlas   PollerKind = "MongoDBAtlas"
	PollerKindConfluentcloud PollerKind = "ConfluentCloud"
)

type PollerMongoDBAtlasInput struct {
	PublicKey     string   `json:"publicKey"`
	PrivateKey    string   `json:"privateKey"`
	IncludeGroups []string `json:"includeGroups"`
	ExcludeGroups []string `json:"excludeGroups"`
}

// GetPublicKey returns PollerMongoDBAtlasInput.PublicKey, and is useful for accessing the field via an interface.
func (v *PollerMongoDBAtlasInput) GetPublicKey() string { return v.PublicKey }

// GetPrivateKey returns PollerMongoDBAtlasInput.PrivateKey, and is useful for accessing the field via an interface.
func (v *PollerMongoDBAtlasInput) GetPrivateKey() string { return v.PrivateKey }

// GetIncludeGroups returns PollerMongoDBAtlasInput.IncludeGroups, and is useful for accessing the field via an interface.
func (v *PollerMongoDBAtlasInput) GetIncludeGroups() []string { return v.IncludeGroups }

// GetExcludeGroups returns PollerMongoDBAtlasInput.ExcludeGroups, and is useful for accessing the field via an interface.
func (v *PollerMongoDBAtlasInput) GetExcludeGroups() []string { return v.ExcludeGroups }

type PollerPubSubInput struct {
	ProjectId      string           `json:"projectId"`
	JsonKey        types.JsonObject `json:"jsonKey"`
	SubscriptionId string           `json:"subscriptionId"`
}

// GetProjectId returns PollerPubSubInput.ProjectId, and is useful for accessing the field via an interface.
func (v *PollerPubSubInput) GetProjectId() string { return v.ProjectId }

// GetJsonKey returns PollerPubSubInput.JsonKey, and is useful for accessing the field via an interface.
func (v *PollerPubSubInput) GetJsonKey() types.JsonObject { return v.JsonKey }

// GetSubscriptionId returns PollerPubSubInput.SubscriptionId, and is useful for accessing the field via an interface.
func (v *PollerPubSubInput) GetSubscriptionId() string { return v.SubscriptionId }

// PreferredPath includes the GraphQL fields of PreferredPath requested by the fragment PreferredPath.
// The GraphQL type's documentation follows.
//
// Properties that are expensive, and should not be requested as part of
// "list all paths" type operations:
// - destinationDataset
// - resolvedPath
// - managedBy
// It's OK to make these part of "list paths for given source dataset" though, as
// that's only one, and presumably you're likely to actually use it.
type PreferredPath struct {
	Id            string                               `json:"id"`
	Name          string                               `json:"name"`
	IconUrl       *string                              `json:"iconUrl"`
	Description   string                               `json:"description"`
	WorkspaceId   string                               `json:"workspaceId"`
	FolderId      string                               `json:"folderId"`
	SourceDataset string                               `json:"sourceDataset"`
	Path          []PreferredPathPathPreferredPathStep `json:"path"`
}

// GetId returns PreferredPath.Id, and is useful for accessing the field via an interface.
func (v *PreferredPath) GetId() string { return v.Id }

// GetName returns PreferredPath.Name, and is useful for accessing the field via an interface.
func (v *PreferredPath) GetName() string { return v.Name }

// GetIconUrl returns PreferredPath.IconUrl, and is useful for accessing the field via an interface.
func (v *PreferredPath) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns PreferredPath.Description, and is useful for accessing the field via an interface.
func (v *PreferredPath) GetDescription() string { return v.Description }

// GetWorkspaceId returns PreferredPath.WorkspaceId, and is useful for accessing the field via an interface.
func (v *PreferredPath) GetWorkspaceId() string { return v.WorkspaceId }

// GetFolderId returns PreferredPath.FolderId, and is useful for accessing the field via an interface.
func (v *PreferredPath) GetFolderId() string { return v.FolderId }

// GetSourceDataset returns PreferredPath.SourceDataset, and is useful for accessing the field via an interface.
func (v *PreferredPath) GetSourceDataset() string { return v.SourceDataset }

// GetPath returns PreferredPath.Path, and is useful for accessing the field via an interface.
func (v *PreferredPath) GetPath() []PreferredPathPathPreferredPathStep { return v.Path }

// An PreferredPath specifies some preferred destination to go to
// from a given dataset starting point in GraphLink, and also how
// to get there, specifically.
type PreferredPathInput struct {
	// Short name for the path, to use in menus, must be unique within folder
	Name *string `json:"name"`
	// Long description text for the path, at most 1000 characters.
	Description *string `json:"description"`
	// Which dataset ID to present this path starting out from. Note that this
	// must be an extant dataset when creating/updating the path, even if we
	// 'acceptInErrorState' for the steps, and even though it can become broken later.
	SourceDataset *string `json:"sourceDataset"`
	// Each step along the path to get to the destination. The destination
	// is inferred from the last element in the step.
	Path []PreferredPathStepInput `json:"path"`
	// Which folder is this path organized in? If not specified, will be put
	// in the default folder for the workspace.
	FolderId *string `json:"folderId"`
	// If managed by an app or other business object, provide it here. Only
	// the object that initially creates it can later update it.
	ManagedById *string `json:"managedById,omitempty"`
}

// GetName returns PreferredPathInput.Name, and is useful for accessing the field via an interface.
func (v *PreferredPathInput) GetName() *string { return v.Name }

// GetDescription returns PreferredPathInput.Description, and is useful for accessing the field via an interface.
func (v *PreferredPathInput) GetDescription() *string { return v.Description }

// GetSourceDataset returns PreferredPathInput.SourceDataset, and is useful for accessing the field via an interface.
func (v *PreferredPathInput) GetSourceDataset() *string { return v.SourceDataset }

// GetPath returns PreferredPathInput.Path, and is useful for accessing the field via an interface.
func (v *PreferredPathInput) GetPath() []PreferredPathStepInput { return v.Path }

// GetFolderId returns PreferredPathInput.FolderId, and is useful for accessing the field via an interface.
func (v *PreferredPathInput) GetFolderId() *string { return v.FolderId }

// GetManagedById returns PreferredPathInput.ManagedById, and is useful for accessing the field via an interface.
func (v *PreferredPathInput) GetManagedById() *string { return v.ManagedById }

// PreferredPathPathPreferredPathStep includes the requested fields of the GraphQL type PreferredPathStep.
// The GraphQL type's documentation follows.
//
// The valid combinations are: 'linkName' and possibly 'reverseFromDataset', or
// 'linkId' and possibly 'reverse'. See PreferredPathStepInput.
type PreferredPathPathPreferredPathStep struct {
	LinkId  *string `json:"linkId"`
	Reverse *bool   `json:"reverse"`
}

// GetLinkId returns PreferredPathPathPreferredPathStep.LinkId, and is useful for accessing the field via an interface.
func (v *PreferredPathPathPreferredPathStep) GetLinkId() *string { return v.LinkId }

// GetReverse returns PreferredPathPathPreferredPathStep.Reverse, and is useful for accessing the field via an interface.
func (v *PreferredPathPathPreferredPathStep) GetReverse() *bool { return v.Reverse }

// There are four modes for how to specify a step along the path:
// - using a foreign key that exists in the dataset
// - using a related key that exists pointint to the dataset
// - using a deferred foreign key specification as a forward key
// - using a deferred foreign key specification as a related key
type PreferredPathStepInput struct {
	// This is the name of the link to use -- not the name of the step.
	// It is an error if the link doesn't exist. Use 'linkName' with 'to' or 'from'.
	LinkName *string `json:"linkName,omitempty"`
	// If taking this step using a (reverse) related key, specify the dataset
	// to step TO in 'reverseFromDataset' (because the reverse link is "from" that dataset.)
	// Also specify 'linkName' when using 'reverseFromDataset'.
	ReverseFromDataset *string `json:"reverseFromDataset,omitempty"`
	// If specifying a deferred foreign key to use as the step, in forward or reverse
	// direction, specify this using 'linkId'. Do not use 'linkName' or 'reverseFromDataset'
	// when specifying 'linkId'.
	LinkId *string `json:"linkId,omitempty"`
	// If specifying a deferred foreign key to use as the step, in related (reverse)
	// direction, set reverse to 'true', in addition to the id in 'linkId'.
	Reverse *bool `json:"reverse,omitempty"`
}

// GetLinkName returns PreferredPathStepInput.LinkName, and is useful for accessing the field via an interface.
func (v *PreferredPathStepInput) GetLinkName() *string { return v.LinkName }

// GetReverseFromDataset returns PreferredPathStepInput.ReverseFromDataset, and is useful for accessing the field via an interface.
func (v *PreferredPathStepInput) GetReverseFromDataset() *string { return v.ReverseFromDataset }

// GetLinkId returns PreferredPathStepInput.LinkId, and is useful for accessing the field via an interface.
func (v *PreferredPathStepInput) GetLinkId() *string { return v.LinkId }

// GetReverse returns PreferredPathStepInput.Reverse, and is useful for accessing the field via an interface.
func (v *PreferredPathStepInput) GetReverse() *bool { return v.Reverse }

// PreferredPathWithStatus includes the GraphQL fields of PreferredPathWithStatus requested by the fragment PreferredPathWithStatus.
type PreferredPathWithStatus struct {
	// If this path is defined (saved with an ID,) return the path here. Note that a path
	// may be accepted and get an ID, yet be in error state in the same operation, if
	// 'acceptInErrorState' is true.
	Path *PreferredPathWithStatusPathPreferredPath `json:"path"`
	// If this path is in error state, returns a description of why here.
	Error *string `json:"error"`
}

// GetPath returns PreferredPathWithStatus.Path, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatus) GetPath() *PreferredPathWithStatusPathPreferredPath { return v.Path }

// GetError returns PreferredPathWithStatus.Error, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatus) GetError() *string { return v.Error }

// PreferredPathWithStatusPathPreferredPath includes the requested fields of the GraphQL type PreferredPath.
// The GraphQL type's documentation follows.
//
// Properties that are expensive, and should not be requested as part of
// "list all paths" type operations:
// - destinationDataset
// - resolvedPath
// - managedBy
// It's OK to make these part of "list paths for given source dataset" though, as
// that's only one, and presumably you're likely to actually use it.
type PreferredPathWithStatusPathPreferredPath struct {
	PreferredPath `json:"-"`
}

// GetId returns PreferredPathWithStatusPathPreferredPath.Id, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatusPathPreferredPath) GetId() string { return v.PreferredPath.Id }

// GetName returns PreferredPathWithStatusPathPreferredPath.Name, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatusPathPreferredPath) GetName() string { return v.PreferredPath.Name }

// GetIconUrl returns PreferredPathWithStatusPathPreferredPath.IconUrl, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatusPathPreferredPath) GetIconUrl() *string {
	return v.PreferredPath.IconUrl
}

// GetDescription returns PreferredPathWithStatusPathPreferredPath.Description, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatusPathPreferredPath) GetDescription() string {
	return v.PreferredPath.Description
}

// GetWorkspaceId returns PreferredPathWithStatusPathPreferredPath.WorkspaceId, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatusPathPreferredPath) GetWorkspaceId() string {
	return v.PreferredPath.WorkspaceId
}

// GetFolderId returns PreferredPathWithStatusPathPreferredPath.FolderId, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatusPathPreferredPath) GetFolderId() string {
	return v.PreferredPath.FolderId
}

// GetSourceDataset returns PreferredPathWithStatusPathPreferredPath.SourceDataset, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatusPathPreferredPath) GetSourceDataset() string {
	return v.PreferredPath.SourceDataset
}

// GetPath returns PreferredPathWithStatusPathPreferredPath.Path, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatusPathPreferredPath) GetPath() []PreferredPathPathPreferredPathStep {
	return v.PreferredPath.Path
}

func (v *PreferredPathWithStatusPathPreferredPath) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PreferredPathWithStatusPathPreferredPath
		graphql.NoUnmarshalJSON
	}
	firstPass.PreferredPathWithStatusPathPreferredPath = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PreferredPath)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPreferredPathWithStatusPathPreferredPath struct {
	Id string `json:"id"`

	Name string `json:"name"`

	IconUrl *string `json:"iconUrl"`

	Description string `json:"description"`

	WorkspaceId string `json:"workspaceId"`

	FolderId string `json:"folderId"`

	SourceDataset string `json:"sourceDataset"`

	Path []PreferredPathPathPreferredPathStep `json:"path"`
}

func (v *PreferredPathWithStatusPathPreferredPath) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PreferredPathWithStatusPathPreferredPath) __premarshalJSON() (*__premarshalPreferredPathWithStatusPathPreferredPath, error) {
	var retval __premarshalPreferredPathWithStatusPathPreferredPath

	retval.Id = v.PreferredPath.Id
	retval.Name = v.PreferredPath.Name
	retval.IconUrl = v.PreferredPath.IconUrl
	retval.Description = v.PreferredPath.Description
	retval.WorkspaceId = v.PreferredPath.WorkspaceId
	retval.FolderId = v.PreferredPath.FolderId
	retval.SourceDataset = v.PreferredPath.SourceDataset
	retval.Path = v.PreferredPath.Path
	return &retval, nil
}

type PrimitiveValueInput struct {
	Bool      *bool              `json:"bool"`
	Float64   *float64           `json:"float64"`
	Int64     *types.Int64Scalar `json:"int64"`
	String    *string            `json:"string"`
	Timestamp *types.TimeScalar  `json:"timestamp"`
	Duration  *types.Int64Scalar `json:"duration"`
}

// GetBool returns PrimitiveValueInput.Bool, and is useful for accessing the field via an interface.
func (v *PrimitiveValueInput) GetBool() *bool { return v.Bool }

// GetFloat64 returns PrimitiveValueInput.Float64, and is useful for accessing the field via an interface.
func (v *PrimitiveValueInput) GetFloat64() *float64 { return v.Float64 }

// GetInt64 returns PrimitiveValueInput.Int64, and is useful for accessing the field via an interface.
func (v *PrimitiveValueInput) GetInt64() *types.Int64Scalar { return v.Int64 }

// GetString returns PrimitiveValueInput.String, and is useful for accessing the field via an interface.
func (v *PrimitiveValueInput) GetString() *string { return v.String }

// GetTimestamp returns PrimitiveValueInput.Timestamp, and is useful for accessing the field via an interface.
func (v *PrimitiveValueInput) GetTimestamp() *types.TimeScalar { return v.Timestamp }

// GetDuration returns PrimitiveValueInput.Duration, and is useful for accessing the field via an interface.
func (v *PrimitiveValueInput) GetDuration() *types.Int64Scalar { return v.Duration }

type QueryParams struct {
	// Please specify exact one of startTime and startTimeSinceEpoch.
	StartTime           *types.TimeScalar `json:"startTime"`
	StartTimeSinceEpoch *TimeSinceEpoch   `json:"startTimeSinceEpoch"`
	// Please specify exact one of endTime and endTimeSinceEpoch.
	EndTime           *types.TimeScalar `json:"endTime"`
	EndTimeSinceEpoch *TimeSinceEpoch   `json:"endTimeSinceEpoch"`
	// Queries may have some parameter values bound
	OpalParameters []ParameterBindingInput `json:"opalParameters"`
}

// GetStartTime returns QueryParams.StartTime, and is useful for accessing the field via an interface.
func (v *QueryParams) GetStartTime() *types.TimeScalar { return v.StartTime }

// GetStartTimeSinceEpoch returns QueryParams.StartTimeSinceEpoch, and is useful for accessing the field via an interface.
func (v *QueryParams) GetStartTimeSinceEpoch() *TimeSinceEpoch { return v.StartTimeSinceEpoch }

// GetEndTime returns QueryParams.EndTime, and is useful for accessing the field via an interface.
func (v *QueryParams) GetEndTime() *types.TimeScalar { return v.EndTime }

// GetEndTimeSinceEpoch returns QueryParams.EndTimeSinceEpoch, and is useful for accessing the field via an interface.
func (v *QueryParams) GetEndTimeSinceEpoch() *TimeSinceEpoch { return v.EndTimeSinceEpoch }

// GetOpalParameters returns QueryParams.OpalParameters, and is useful for accessing the field via an interface.
func (v *QueryParams) GetOpalParameters() []ParameterBindingInput { return v.OpalParameters }

type ResourceIdInput struct {
	DatasetId       string                `json:"datasetId"`
	PrimaryKeyValue []ColumnAndValueInput `json:"primaryKeyValue"`
	TimeRange       *TimeRangeInput       `json:"timeRange"`
}

// GetDatasetId returns ResourceIdInput.DatasetId, and is useful for accessing the field via an interface.
func (v *ResourceIdInput) GetDatasetId() string { return v.DatasetId }

// GetPrimaryKeyValue returns ResourceIdInput.PrimaryKeyValue, and is useful for accessing the field via an interface.
func (v *ResourceIdInput) GetPrimaryKeyValue() []ColumnAndValueInput { return v.PrimaryKeyValue }

// GetTimeRange returns ResourceIdInput.TimeRange, and is useful for accessing the field via an interface.
func (v *ResourceIdInput) GetTimeRange() *TimeRangeInput { return v.TimeRange }

// What pieces of result to include in the response to an OPAL query.
type ResultKind string

const (
	ResultKindResultkindschema          ResultKind = "ResultKindSchema"
	ResultKindResultkinddata            ResultKind = "ResultKindData"
	ResultKindResultkindstats           ResultKind = "ResultKindStats"
	ResultKindResultkindsuppress        ResultKind = "ResultKindSuppress"
	ResultKindResultkindprogress        ResultKind = "ResultKindProgress"
	ResultKindResultkindmetricdiscovery ResultKind = "ResultKindMetricDiscovery"
)

// ResultStatus includes the GraphQL fields of ResultStatus requested by the fragment ResultStatus.
type ResultStatus struct {
	Success      bool              `json:"success"`
	ErrorMessage string            `json:"errorMessage"`
	DetailedInfo *types.JsonObject `json:"detailedInfo"`
}

// GetSuccess returns ResultStatus.Success, and is useful for accessing the field via an interface.
func (v *ResultStatus) GetSuccess() bool { return v.Success }

// GetErrorMessage returns ResultStatus.ErrorMessage, and is useful for accessing the field via an interface.
func (v *ResultStatus) GetErrorMessage() string { return v.ErrorMessage }

// GetDetailedInfo returns ResultStatus.DetailedInfo, and is useful for accessing the field via an interface.
func (v *ResultStatus) GetDetailedInfo() *types.JsonObject { return v.DetailedInfo }

type RollupFilterInput struct {
	Mode RollupFilterMode `json:"mode"`
}

// GetMode returns RollupFilterInput.Mode, and is useful for accessing the field via an interface.
func (v *RollupFilterInput) GetMode() RollupFilterMode { return v.Mode }

type RollupFilterMode string

const (
	RollupFilterModeLast RollupFilterMode = "Last"
	RollupFilterModeAll  RollupFilterMode = "All"
)

type RollupOptionInput struct {
	// If unrollColumns is set, the columns specified will be unrolled after being
	// grouped by primary key and ordered by time. Empty unrollColumns will produce
	// 1 row for each primary key (because all non-primary key columns are rolled
	// up). If a column C having values [0,1,0] at times [0,1,2] for a given primary
	// key is specified in unrollColumns, 3 rows will be produced for that primary
	// key, with the values of C being 0, 1, 0 in each row, respectively.
	UnrollColumns []string `json:"unrollColumns"`
	// If set to true, explicitly disables rollup, even for a Resource
	ForceNoRollup *bool `json:"forceNoRollup"`
}

// GetUnrollColumns returns RollupOptionInput.UnrollColumns, and is useful for accessing the field via an interface.
func (v *RollupOptionInput) GetUnrollColumns() []string { return v.UnrollColumns }

// GetForceNoRollup returns RollupOptionInput.ForceNoRollup, and is useful for accessing the field via an interface.
func (v *RollupOptionInput) GetForceNoRollup() *bool { return v.ForceNoRollup }

type SaveMode string

const (
	// Only update the dataset ID specified in the operation, disregarding dependencies
	SaveModeUpdatedataset SaveMode = "UpdateDataset"
	// Update the dataset ID specified, and its dependencies, but don't change anything if there's any error that's not ignored
	SaveModeUpdatedatasetanddependenciesunlessnewerrors SaveMode = "UpdateDatasetAndDependenciesUnlessNewErrors"
	// Update the dataset ID specified, and its dependencies, as far as can be done without errors, return errors
	SaveModeUpdatedatasetanddependenciesignoringallerrors SaveMode = "UpdateDatasetAndDependenciesIgnoringAllErrors"
	// Return what would happen if you updated the dataset ID (only) disregarding dependencies. Do not change database.
	SaveModePreflightdataset SaveMode = "PreflightDataset"
	// Return what would happen if you updated the dataset ID, including effects on dependencies. Do not change database.
	SaveModePreflightdatasetanddependencies SaveMode = "PreflightDatasetAndDependencies"
)

type SourceLocInput struct {
	Row types.Int64Scalar `json:"row"`
	Col types.Int64Scalar `json:"col"`
}

// GetRow returns SourceLocInput.Row, and is useful for accessing the field via an interface.
func (v *SourceLocInput) GetRow() types.Int64Scalar { return v.Row }

// GetCol returns SourceLocInput.Col, and is useful for accessing the field via an interface.
func (v *SourceLocInput) GetCol() types.Int64Scalar { return v.Col }

type SourceTableDefinitionInput struct {
	Schema                string                            `json:"schema"`
	TableName             string                            `json:"tableName"`
	Fields                []SourceTableFieldDefinitionInput `json:"fields"`
	ValidFromField        *string                           `json:"validFromField"`
	BatchSeqField         *string                           `json:"batchSeqField"`
	IsInsertOnly          *bool                             `json:"isInsertOnly,omitempty"`
	SourceUpdateTableName *string                           `json:"sourceUpdateTableName"`
}

// GetSchema returns SourceTableDefinitionInput.Schema, and is useful for accessing the field via an interface.
func (v *SourceTableDefinitionInput) GetSchema() string { return v.Schema }

// GetTableName returns SourceTableDefinitionInput.TableName, and is useful for accessing the field via an interface.
func (v *SourceTableDefinitionInput) GetTableName() string { return v.TableName }

// GetFields returns SourceTableDefinitionInput.Fields, and is useful for accessing the field via an interface.
func (v *SourceTableDefinitionInput) GetFields() []SourceTableFieldDefinitionInput { return v.Fields }

// GetValidFromField returns SourceTableDefinitionInput.ValidFromField, and is useful for accessing the field via an interface.
func (v *SourceTableDefinitionInput) GetValidFromField() *string { return v.ValidFromField }

// GetBatchSeqField returns SourceTableDefinitionInput.BatchSeqField, and is useful for accessing the field via an interface.
func (v *SourceTableDefinitionInput) GetBatchSeqField() *string { return v.BatchSeqField }

// GetIsInsertOnly returns SourceTableDefinitionInput.IsInsertOnly, and is useful for accessing the field via an interface.
func (v *SourceTableDefinitionInput) GetIsInsertOnly() *bool { return v.IsInsertOnly }

// GetSourceUpdateTableName returns SourceTableDefinitionInput.SourceUpdateTableName, and is useful for accessing the field via an interface.
func (v *SourceTableDefinitionInput) GetSourceUpdateTableName() *string {
	return v.SourceUpdateTableName
}

type SourceTableFieldDefinitionInput struct {
	Name    string `json:"name"`
	SqlType string `json:"sqlType"`
}

// GetName returns SourceTableFieldDefinitionInput.Name, and is useful for accessing the field via an interface.
func (v *SourceTableFieldDefinitionInput) GetName() string { return v.Name }

// GetSqlType returns SourceTableFieldDefinitionInput.SqlType, and is useful for accessing the field via an interface.
func (v *SourceTableFieldDefinitionInput) GetSqlType() string { return v.SqlType }

type StageInput struct {
	// we need the label to be able to reference this stage in later Stages' InputDefinitionInput
	// XXX: Obsolete, replaced by "stageId" below. Ignored if "stageId" is set.
	Label   *string `json:"label"`
	StageID *string `json:"stageID"`
	// unique ID that other stages can reference in their InputDefinitionInput
	StageId *string `json:"stageId"`
	// Which inputs are defined for this stage?
	Inputs []InputDefinitionInput `json:"inputs"`
	// What is the processing?
	Pipeline string `json:"pipeline"`
	// How do we arrange presentation? (ordering etc)
	// Note that later stages referencing this stage will NOT see the stage presentation processing
	Presentation *StagePresentationInput `json:"presentation"`
	// UI presentation data to use when storing transforms
	Layout *types.JsonObject `json:"layout"`
	// If set, enables paginatedResults in initial TaskResult of ResultKindData.
	Pagination *PaginationInput `json:"pagination"`
	// If set, run this stage with progressive execution
	Progressive *bool `json:"progressive"`
	// If set, backend will try to run this stage with best effort binding mode
	BestEffortBinding *bool `json:"bestEffortBinding"`
	// A location within the pipeline. Used to support "run query up to cursor" type functionality, where this location
	// defines the last verb within the query or subquery to run.
	RunUntilLocation *SourceLocInput `json:"runUntilLocation"`
}

// GetLabel returns StageInput.Label, and is useful for accessing the field via an interface.
func (v *StageInput) GetLabel() *string { return v.Label }

// GetStageID returns StageInput.StageID, and is useful for accessing the field via an interface.
func (v *StageInput) GetStageID() *string { return v.StageID }

// GetStageId returns StageInput.StageId, and is useful for accessing the field via an interface.
func (v *StageInput) GetStageId() *string { return v.StageId }

// GetInputs returns StageInput.Inputs, and is useful for accessing the field via an interface.
func (v *StageInput) GetInputs() []InputDefinitionInput { return v.Inputs }

// GetPipeline returns StageInput.Pipeline, and is useful for accessing the field via an interface.
func (v *StageInput) GetPipeline() string { return v.Pipeline }

// GetPresentation returns StageInput.Presentation, and is useful for accessing the field via an interface.
func (v *StageInput) GetPresentation() *StagePresentationInput { return v.Presentation }

// GetLayout returns StageInput.Layout, and is useful for accessing the field via an interface.
func (v *StageInput) GetLayout() *types.JsonObject { return v.Layout }

// GetPagination returns StageInput.Pagination, and is useful for accessing the field via an interface.
func (v *StageInput) GetPagination() *PaginationInput { return v.Pagination }

// GetProgressive returns StageInput.Progressive, and is useful for accessing the field via an interface.
func (v *StageInput) GetProgressive() *bool { return v.Progressive }

// GetBestEffortBinding returns StageInput.BestEffortBinding, and is useful for accessing the field via an interface.
func (v *StageInput) GetBestEffortBinding() *bool { return v.BestEffortBinding }

// GetRunUntilLocation returns StageInput.RunUntilLocation, and is useful for accessing the field via an interface.
func (v *StageInput) GetRunUntilLocation() *SourceLocInput { return v.RunUntilLocation }

type StagePresentationInput struct {
	// limit can be per-query in addition to per-request; the min() is applied
	Limit *types.Int64Scalar `json:"limit"`
	// defaultStats, if specified, calculates stats for any column that matches a
	// predetermined set of rules, and returns those stats.
	DefaultStats *DefaultStatsInput `json:"defaultStats"`
	// orderColumns determines order of returned data rows
	OrderColumns []ColumnOrderInput `json:"orderColumns"`
	// when linkify is true, the server will resolve all declared foreign keys
	// and create one new field for each containing that user-readable name of the
	// target of the key (see design doc in Notion)
	Linkify *bool `json:"linkify"`
	// When rollup is set, resources will be rolled up into the query time window
	// Columns will be aggregated into arrays.
	Rollup      *RollupOptionInput `json:"rollup"`
	ResultKinds []*ResultKind      `json:"resultKinds"`
	// When wantBuckets is set, time-binning verbs without explicit resolution specification
	// will automatically find a human-friendly resolution and generate the wanted number of
	// buckets. When exact number of buckets is not possible, more buckets will be generated.
	WantBuckets *types.Int64Scalar `json:"wantBuckets"`
}

// GetLimit returns StagePresentationInput.Limit, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetLimit() *types.Int64Scalar { return v.Limit }

// GetDefaultStats returns StagePresentationInput.DefaultStats, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetDefaultStats() *DefaultStatsInput { return v.DefaultStats }

// GetOrderColumns returns StagePresentationInput.OrderColumns, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetOrderColumns() []ColumnOrderInput { return v.OrderColumns }

// GetLinkify returns StagePresentationInput.Linkify, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetLinkify() *bool { return v.Linkify }

// GetRollup returns StagePresentationInput.Rollup, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetRollup() *RollupOptionInput { return v.Rollup }

// GetResultKinds returns StagePresentationInput.ResultKinds, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetResultKinds() []*ResultKind { return v.ResultKinds }

// GetWantBuckets returns StagePresentationInput.WantBuckets, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetWantBuckets() *types.Int64Scalar { return v.WantBuckets }

// StageQuery includes the GraphQL fields of StageQuery requested by the fragment StageQuery.
type StageQuery struct {
	Id       *string                           `json:"id"`
	Pipeline string                            `json:"pipeline"`
	Params   *types.JsonObject                 `json:"params"`
	Layout   *types.JsonObject                 `json:"layout"`
	Input    []*StageQueryInputInputDefinition `json:"input"`
}

// GetId returns StageQuery.Id, and is useful for accessing the field via an interface.
func (v *StageQuery) GetId() *string { return v.Id }

// GetPipeline returns StageQuery.Pipeline, and is useful for accessing the field via an interface.
func (v *StageQuery) GetPipeline() string { return v.Pipeline }

// GetParams returns StageQuery.Params, and is useful for accessing the field via an interface.
func (v *StageQuery) GetParams() *types.JsonObject { return v.Params }

// GetLayout returns StageQuery.Layout, and is useful for accessing the field via an interface.
func (v *StageQuery) GetLayout() *types.JsonObject { return v.Layout }

// GetInput returns StageQuery.Input, and is useful for accessing the field via an interface.
func (v *StageQuery) GetInput() []*StageQueryInputInputDefinition { return v.Input }

type StageQueryInput struct {
	StageID *string `json:"stageID,omitempty"`
	StageId *string `json:"stageId,omitempty"`
	// make id required when we've removed all deprecated use of stageId
	Id       *string                `json:"id,omitempty"`
	Input    []InputDefinitionInput `json:"input"`
	Pipeline string                 `json:"pipeline"`
	Layout   *types.JsonObject      `json:"layout"`
}

// GetStageID returns StageQueryInput.StageID, and is useful for accessing the field via an interface.
func (v *StageQueryInput) GetStageID() *string { return v.StageID }

// GetStageId returns StageQueryInput.StageId, and is useful for accessing the field via an interface.
func (v *StageQueryInput) GetStageId() *string { return v.StageId }

// GetId returns StageQueryInput.Id, and is useful for accessing the field via an interface.
func (v *StageQueryInput) GetId() *string { return v.Id }

// GetInput returns StageQueryInput.Input, and is useful for accessing the field via an interface.
func (v *StageQueryInput) GetInput() []InputDefinitionInput { return v.Input }

// GetPipeline returns StageQueryInput.Pipeline, and is useful for accessing the field via an interface.
func (v *StageQueryInput) GetPipeline() string { return v.Pipeline }

// GetLayout returns StageQueryInput.Layout, and is useful for accessing the field via an interface.
func (v *StageQueryInput) GetLayout() *types.JsonObject { return v.Layout }

// StageQueryInputInputDefinition includes the requested fields of the GraphQL type InputDefinition.
type StageQueryInputInputDefinition struct {
	// Assign the short and unique user mnemonic for this input, used in @tableref expressions
	InputName string    `json:"inputName"`
	InputRole InputRole `json:"inputRole"`
	// One of the input definition fields is used; the others are null
	// because GO doesn't have unions.
	DatasetId   *string `json:"datasetId"`
	DatasetPath *string `json:"datasetPath"`
	// Only set stageId to reference input that comes from an actual stage in the same query
	StageId *string `json:"stageId"`
}

// GetInputName returns StageQueryInputInputDefinition.InputName, and is useful for accessing the field via an interface.
func (v *StageQueryInputInputDefinition) GetInputName() string { return v.InputName }

// GetInputRole returns StageQueryInputInputDefinition.InputRole, and is useful for accessing the field via an interface.
func (v *StageQueryInputInputDefinition) GetInputRole() InputRole { return v.InputRole }

// GetDatasetId returns StageQueryInputInputDefinition.DatasetId, and is useful for accessing the field via an interface.
func (v *StageQueryInputInputDefinition) GetDatasetId() *string { return v.DatasetId }

// GetDatasetPath returns StageQueryInputInputDefinition.DatasetPath, and is useful for accessing the field via an interface.
func (v *StageQueryInputInputDefinition) GetDatasetPath() *string { return v.DatasetPath }

// GetStageId returns StageQueryInputInputDefinition.StageId, and is useful for accessing the field via an interface.
func (v *StageQueryInputInputDefinition) GetStageId() *string { return v.StageId }

// TaskResult includes the GraphQL fields of TaskResult requested by the fragment TaskResult.
type TaskResult struct {
	// TODO: Move query ID generation out of QueryManager and closer to the UI,
	// and make the field mandatory. We want to always provide users with a
	// query ID for bug reporting and investigations.
	QueryId string  `json:"queryId"`
	StageId *string `json:"stageId"`
	// The time range which this set of results cover.
	StartTime *types.TimeScalar `json:"startTime"`
	EndTime   *types.TimeScalar `json:"endTime"`
	// If there's a compiler or execution error, they are returned here. Multiple
	// errors are joined into a single string, so for multiple parse errors, it's
	// better to get those from parsedPipeline to be able to indicate each error
	// separately.
	Error *string `json:"error"`
	// You used to paginate the data yourself out of S3 -- not needed anymore
	ResultCursor *interface{} `json:"resultCursor"`
	// how to understand the columns in the result from Snowflake --
	ResultSchema *TaskResultResultSchemaTaskResultSchema `json:"resultSchema"`
}

// GetQueryId returns TaskResult.QueryId, and is useful for accessing the field via an interface.
func (v *TaskResult) GetQueryId() string { return v.QueryId }

// GetStageId returns TaskResult.StageId, and is useful for accessing the field via an interface.
func (v *TaskResult) GetStageId() *string { return v.StageId }

// GetStartTime returns TaskResult.StartTime, and is useful for accessing the field via an interface.
func (v *TaskResult) GetStartTime() *types.TimeScalar { return v.StartTime }

// GetEndTime returns TaskResult.EndTime, and is useful for accessing the field via an interface.
func (v *TaskResult) GetEndTime() *types.TimeScalar { return v.EndTime }

// GetError returns TaskResult.Error, and is useful for accessing the field via an interface.
func (v *TaskResult) GetError() *string { return v.Error }

// GetResultCursor returns TaskResult.ResultCursor, and is useful for accessing the field via an interface.
func (v *TaskResult) GetResultCursor() *interface{} { return v.ResultCursor }

// GetResultSchema returns TaskResult.ResultSchema, and is useful for accessing the field via an interface.
func (v *TaskResult) GetResultSchema() *TaskResultResultSchemaTaskResultSchema { return v.ResultSchema }

// TaskResultResultSchemaTaskResultSchema includes the requested fields of the GraphQL type TaskResultSchema.
type TaskResultResultSchemaTaskResultSchema struct {
	// this is the same schema as Typedef.definition
	TypedefDefinition *types.JsonObject `json:"typedefDefinition"`
}

// GetTypedefDefinition returns TaskResultResultSchemaTaskResultSchema.TypedefDefinition, and is useful for accessing the field via an interface.
func (v *TaskResultResultSchemaTaskResultSchema) GetTypedefDefinition() *types.JsonObject {
	return v.TypedefDefinition
}

type ThresholdAggFunction string

const (
	ThresholdAggFunctionAtalltimes  ThresholdAggFunction = "AtAllTimes"
	ThresholdAggFunctionAtleastonce ThresholdAggFunction = "AtLeastOnce"
	ThresholdAggFunctionOnaverage   ThresholdAggFunction = "OnAverage"
	ThresholdAggFunctionIntotal     ThresholdAggFunction = "InTotal"
)

type TimeFunction string

const (
	TimeFunctionNever                  TimeFunction = "Never"
	TimeFunctionAtleastonce            TimeFunction = "AtLeastOnce"
	TimeFunctionAtalltimes             TimeFunction = "AtAllTimes"
	TimeFunctionAtleastpercentagetime  TimeFunction = "AtLeastPercentageTime"
	TimeFunctionLessthanpercentagetime TimeFunction = "LessThanPercentageTime"
	TimeFunctionNoevents               TimeFunction = "NoEvents"
	TimeFunctionAllevents              TimeFunction = "AllEvents"
	TimeFunctionCounttimes             TimeFunction = "CountTimes"
)

type TimeRangeInput struct {
	Start *types.TimeScalar `json:"start"`
	End   *types.TimeScalar `json:"end"`
}

// GetStart returns TimeRangeInput.Start, and is useful for accessing the field via an interface.
func (v *TimeRangeInput) GetStart() *types.TimeScalar { return v.Start }

// GetEnd returns TimeRangeInput.End, and is useful for accessing the field via an interface.
func (v *TimeRangeInput) GetEnd() *types.TimeScalar { return v.End }

type TimeSinceEpoch struct {
	Value *types.Int64Scalar `json:"value"`
	Unit  *TimeUnit          `json:"unit"`
}

// GetValue returns TimeSinceEpoch.Value, and is useful for accessing the field via an interface.
func (v *TimeSinceEpoch) GetValue() *types.Int64Scalar { return v.Value }

// GetUnit returns TimeSinceEpoch.Unit, and is useful for accessing the field via an interface.
func (v *TimeSinceEpoch) GetUnit() *TimeUnit { return v.Unit }

type TimeUnit string

const (
	TimeUnitSecond      TimeUnit = "Second"
	TimeUnitMillisecond TimeUnit = "Millisecond"
	TimeUnitMicrosecond TimeUnit = "Microsecond"
	TimeUnitNanosecond  TimeUnit = "Nanosecond"
)

type ValueArrayInput struct {
	Value []PrimitiveValueInput `json:"value"`
}

// GetValue returns ValueArrayInput.Value, and is useful for accessing the field via an interface.
func (v *ValueArrayInput) GetValue() []PrimitiveValueInput { return v.Value }

// ValueDatasetrefInput looks a bit like InputDefinitionInput, EXCEPT
// you can't specify a parameterId as the value of a ValueDatasetrefInput
// (because that would make little sense.)
type ValueDatasetrefInput struct {
	DatasetId   *string `json:"datasetId"`
	DatasetPath *string `json:"datasetPath"`
	StageId     *string `json:"stageId"`
}

// GetDatasetId returns ValueDatasetrefInput.DatasetId, and is useful for accessing the field via an interface.
func (v *ValueDatasetrefInput) GetDatasetId() *string { return v.DatasetId }

// GetDatasetPath returns ValueDatasetrefInput.DatasetPath, and is useful for accessing the field via an interface.
func (v *ValueDatasetrefInput) GetDatasetPath() *string { return v.DatasetPath }

// GetStageId returns ValueDatasetrefInput.StageId, and is useful for accessing the field via an interface.
func (v *ValueDatasetrefInput) GetStageId() *string { return v.StageId }

// The ValueInput specifies a value for a parameter. To specify a null value, specify
// the particular field, but with the JSON value null. This is needed because values
// are always of a particular type, and a generic null is not typed.
type ValueInput struct {
	Bool       *bool                 `json:"bool,omitempty"`
	Float64    *float64              `json:"float64,omitempty"`
	Int64      *types.Int64Scalar    `json:"int64,omitempty"`
	String     *string               `json:"string,omitempty"`
	Timestamp  *types.TimeScalar     `json:"timestamp,omitempty"`
	Duration   *types.Int64Scalar    `json:"duration,omitempty"`
	Array      *ValueArrayInput      `json:"array,omitempty"`
	Link       *ValueLinkInput       `json:"link,omitempty"`
	Datasetref *ValueDatasetrefInput `json:"datasetref,omitempty"`
}

// GetBool returns ValueInput.Bool, and is useful for accessing the field via an interface.
func (v *ValueInput) GetBool() *bool { return v.Bool }

// GetFloat64 returns ValueInput.Float64, and is useful for accessing the field via an interface.
func (v *ValueInput) GetFloat64() *float64 { return v.Float64 }

// GetInt64 returns ValueInput.Int64, and is useful for accessing the field via an interface.
func (v *ValueInput) GetInt64() *types.Int64Scalar { return v.Int64 }

// GetString returns ValueInput.String, and is useful for accessing the field via an interface.
func (v *ValueInput) GetString() *string { return v.String }

// GetTimestamp returns ValueInput.Timestamp, and is useful for accessing the field via an interface.
func (v *ValueInput) GetTimestamp() *types.TimeScalar { return v.Timestamp }

// GetDuration returns ValueInput.Duration, and is useful for accessing the field via an interface.
func (v *ValueInput) GetDuration() *types.Int64Scalar { return v.Duration }

// GetArray returns ValueInput.Array, and is useful for accessing the field via an interface.
func (v *ValueInput) GetArray() *ValueArrayInput { return v.Array }

// GetLink returns ValueInput.Link, and is useful for accessing the field via an interface.
func (v *ValueInput) GetLink() *ValueLinkInput { return v.Link }

// GetDatasetref returns ValueInput.Datasetref, and is useful for accessing the field via an interface.
func (v *ValueInput) GetDatasetref() *ValueDatasetrefInput { return v.Datasetref }

type ValueKeyValueInput struct {
	Name  string              `json:"name"`
	Value PrimitiveValueInput `json:"value"`
}

// GetName returns ValueKeyValueInput.Name, and is useful for accessing the field via an interface.
func (v *ValueKeyValueInput) GetName() string { return v.Name }

// GetValue returns ValueKeyValueInput.Value, and is useful for accessing the field via an interface.
func (v *ValueKeyValueInput) GetValue() PrimitiveValueInput { return v.Value }

type ValueLinkInput struct {
	DatasetId       string               `json:"datasetId"`
	PrimaryKeyValue []ValueKeyValueInput `json:"primaryKeyValue"`
	StoredLabel     *string              `json:"storedLabel"`
}

// GetDatasetId returns ValueLinkInput.DatasetId, and is useful for accessing the field via an interface.
func (v *ValueLinkInput) GetDatasetId() string { return v.DatasetId }

// GetPrimaryKeyValue returns ValueLinkInput.PrimaryKeyValue, and is useful for accessing the field via an interface.
func (v *ValueLinkInput) GetPrimaryKeyValue() []ValueKeyValueInput { return v.PrimaryKeyValue }

// GetStoredLabel returns ValueLinkInput.StoredLabel, and is useful for accessing the field via an interface.
func (v *ValueLinkInput) GetStoredLabel() *string { return v.StoredLabel }

// These are the OPAL native types that can go into worksheet parameters.  Some
// of the native OPAL types aren't (currently?) exposed to the worksheet
// parameters, but it's likely we will expand this to the full roster over time.
// Also, there will be other places where we send "values" into the API. For
// example, we've dodged it so far in places like monitors, by saying "threshold
// is always float, and facet is always string," but a generic monitor
// specification should absolutely use ValueInput / ValueType.
type ValueType string

const (
	// be explicit about the "empty" value for the null/unknown case
	ValueTypeNone       ValueType = "NONE"
	ValueTypeBool       ValueType = "BOOL"
	ValueTypeFloat64    ValueType = "FLOAT64"
	ValueTypeInt64      ValueType = "INT64"
	ValueTypeString     ValueType = "STRING"
	ValueTypeTimestamp  ValueType = "TIMESTAMP"
	ValueTypeDuration   ValueType = "DURATION"
	ValueTypeArray      ValueType = "ARRAY"
	ValueTypeLink       ValueType = "LINK"
	ValueTypeDatasetref ValueType = "DATASETREF"
)

type ValueTypeSpecInput struct {
	Type            ValueType           `json:"type"`
	ArrayItemType   *ValueTypeSpecInput `json:"arrayItemType"`
	KeyForDatasetId *string             `json:"keyForDatasetId"`
}

// GetType returns ValueTypeSpecInput.Type, and is useful for accessing the field via an interface.
func (v *ValueTypeSpecInput) GetType() ValueType { return v.Type }

// GetArrayItemType returns ValueTypeSpecInput.ArrayItemType, and is useful for accessing the field via an interface.
func (v *ValueTypeSpecInput) GetArrayItemType() *ValueTypeSpecInput { return v.ArrayItemType }

// GetKeyForDatasetId returns ValueTypeSpecInput.KeyForDatasetId, and is useful for accessing the field via an interface.
func (v *ValueTypeSpecInput) GetKeyForDatasetId() *string { return v.KeyForDatasetId }

type WebhookActionInput struct {
	UrlTemplate  *string              `json:"urlTemplate"`
	Method       *string              `json:"method"`
	Headers      []WebhookHeaderInput `json:"headers"`
	BodyTemplate *string              `json:"bodyTemplate"`
}

// GetUrlTemplate returns WebhookActionInput.UrlTemplate, and is useful for accessing the field via an interface.
func (v *WebhookActionInput) GetUrlTemplate() *string { return v.UrlTemplate }

// GetMethod returns WebhookActionInput.Method, and is useful for accessing the field via an interface.
func (v *WebhookActionInput) GetMethod() *string { return v.Method }

// GetHeaders returns WebhookActionInput.Headers, and is useful for accessing the field via an interface.
func (v *WebhookActionInput) GetHeaders() []WebhookHeaderInput { return v.Headers }

// GetBodyTemplate returns WebhookActionInput.BodyTemplate, and is useful for accessing the field via an interface.
func (v *WebhookActionInput) GetBodyTemplate() *string { return v.BodyTemplate }

type WebhookHeaderInput struct {
	Header        string `json:"header"`
	ValueTemplate string `json:"valueTemplate"`
}

// GetHeader returns WebhookHeaderInput.Header, and is useful for accessing the field via an interface.
func (v *WebhookHeaderInput) GetHeader() string { return v.Header }

// GetValueTemplate returns WebhookHeaderInput.ValueTemplate, and is useful for accessing the field via an interface.
func (v *WebhookHeaderInput) GetValueTemplate() string { return v.ValueTemplate }

// Worksheet includes the GraphQL fields of Worksheet requested by the fragment Worksheet.
type Worksheet struct {
	Id          string                     `json:"id"`
	Label       string                     `json:"label"`
	Icon        *string                    `json:"icon"`
	ManagedById *string                    `json:"managedById"`
	Workspace   *WorksheetWorkspaceProject `json:"workspace"`
	Stages      []StageQuery               `json:"stages"`
}

// GetId returns Worksheet.Id, and is useful for accessing the field via an interface.
func (v *Worksheet) GetId() string { return v.Id }

// GetLabel returns Worksheet.Label, and is useful for accessing the field via an interface.
func (v *Worksheet) GetLabel() string { return v.Label }

// GetIcon returns Worksheet.Icon, and is useful for accessing the field via an interface.
func (v *Worksheet) GetIcon() *string { return v.Icon }

// GetManagedById returns Worksheet.ManagedById, and is useful for accessing the field via an interface.
func (v *Worksheet) GetManagedById() *string { return v.ManagedById }

// GetWorkspace returns Worksheet.Workspace, and is useful for accessing the field via an interface.
func (v *Worksheet) GetWorkspace() *WorksheetWorkspaceProject { return v.Workspace }

// GetStages returns Worksheet.Stages, and is useful for accessing the field via an interface.
func (v *Worksheet) GetStages() []StageQuery { return v.Stages }

type WorksheetInput struct {
	// if id is not specified, a new worksheet is created
	Id              *string                 `json:"id"`
	Label           string                  `json:"label"`
	WorkspaceId     string                  `json:"workspaceId"`
	ManagedById     *string                 `json:"managedById"`
	Layout          *types.JsonObject       `json:"layout"`
	Icon            *string                 `json:"icon"`
	Stages          []StageQueryInput       `json:"stages"`
	Parameters      []ParameterSpecInput    `json:"parameters"`
	ParameterValues []ParameterBindingInput `json:"parameterValues"`
}

// GetId returns WorksheetInput.Id, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetId() *string { return v.Id }

// GetLabel returns WorksheetInput.Label, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetLabel() string { return v.Label }

// GetWorkspaceId returns WorksheetInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetManagedById returns WorksheetInput.ManagedById, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetManagedById() *string { return v.ManagedById }

// GetLayout returns WorksheetInput.Layout, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetLayout() *types.JsonObject { return v.Layout }

// GetIcon returns WorksheetInput.Icon, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetIcon() *string { return v.Icon }

// GetStages returns WorksheetInput.Stages, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetStages() []StageQueryInput { return v.Stages }

// GetParameters returns WorksheetInput.Parameters, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetParameters() []ParameterSpecInput { return v.Parameters }

// GetParameterValues returns WorksheetInput.ParameterValues, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetParameterValues() []ParameterBindingInput { return v.ParameterValues }

// WorksheetWorkspaceProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Project and Workspace are the same thing We call it Workspace in the UI
// design now, so at some point, maybe update the API to match the updated
// design?
type WorksheetWorkspaceProject struct {
	Id string `json:"id"`
}

// GetId returns WorksheetWorkspaceProject.Id, and is useful for accessing the field via an interface.
func (v *WorksheetWorkspaceProject) GetId() string { return v.Id }

// Workspace includes the GraphQL fields of Project requested by the fragment Workspace.
// The GraphQL type's documentation follows.
//
// Project and Workspace are the same thing We call it Workspace in the UI
// design now, so at some point, maybe update the API to match the updated
// design?
type Workspace struct {
	Id       string                      `json:"id"`
	Label    string                      `json:"label"`
	Datasets []*WorkspaceDatasetsDataset `json:"datasets"`
}

// GetId returns Workspace.Id, and is useful for accessing the field via an interface.
func (v *Workspace) GetId() string { return v.Id }

// GetLabel returns Workspace.Label, and is useful for accessing the field via an interface.
func (v *Workspace) GetLabel() string { return v.Label }

// GetDatasets returns Workspace.Datasets, and is useful for accessing the field via an interface.
func (v *Workspace) GetDatasets() []*WorkspaceDatasetsDataset { return v.Datasets }

// WorkspaceDatasetsDataset includes the requested fields of the GraphQL type Dataset.
type WorkspaceDatasetsDataset struct {
	Id string `json:"id"`
	// deprecated in favor of name
	Label string `json:"label"`
}

// GetId returns WorkspaceDatasetsDataset.Id, and is useful for accessing the field via an interface.
func (v *WorkspaceDatasetsDataset) GetId() string { return v.Id }

// GetLabel returns WorkspaceDatasetsDataset.Label, and is useful for accessing the field via an interface.
func (v *WorkspaceDatasetsDataset) GetLabel() string { return v.Label }

type WorkspaceInput struct {
	Label    *string           `json:"label"`
	Timezone *string           `json:"timezone"`
	Layout   *types.JsonObject `json:"layout"`
}

// GetLabel returns WorkspaceInput.Label, and is useful for accessing the field via an interface.
func (v *WorkspaceInput) GetLabel() *string { return v.Label }

// GetTimezone returns WorkspaceInput.Timezone, and is useful for accessing the field via an interface.
func (v *WorkspaceInput) GetTimezone() *string { return v.Timezone }

// GetLayout returns WorkspaceInput.Layout, and is useful for accessing the field via an interface.
func (v *WorkspaceInput) GetLayout() *types.JsonObject { return v.Layout }

// __clearDefaultDashboardInput is used internally by genqlient
type __clearDefaultDashboardInput struct {
	Dsid string `json:"dsid"`
}

// GetDsid returns __clearDefaultDashboardInput.Dsid, and is useful for accessing the field via an interface.
func (v *__clearDefaultDashboardInput) GetDsid() string { return v.Dsid }

// __createAppInput is used internally by genqlient
type __createAppInput struct {
	WorkspaceId string   `json:"workspaceId"`
	Config      AppInput `json:"config"`
}

// GetWorkspaceId returns __createAppInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createAppInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetConfig returns __createAppInput.Config, and is useful for accessing the field via an interface.
func (v *__createAppInput) GetConfig() AppInput { return v.Config }

// __createBoardInput is used internally by genqlient
type __createBoardInput struct {
	DatasetId string     `json:"datasetId"`
	BoardType BoardType  `json:"boardType"`
	Board     BoardInput `json:"board"`
}

// GetDatasetId returns __createBoardInput.DatasetId, and is useful for accessing the field via an interface.
func (v *__createBoardInput) GetDatasetId() string { return v.DatasetId }

// GetBoardType returns __createBoardInput.BoardType, and is useful for accessing the field via an interface.
func (v *__createBoardInput) GetBoardType() BoardType { return v.BoardType }

// GetBoard returns __createBoardInput.Board, and is useful for accessing the field via an interface.
func (v *__createBoardInput) GetBoard() BoardInput { return v.Board }

// __createChannelActionInput is used internally by genqlient
type __createChannelActionInput struct {
	WorkspaceId string      `json:"workspaceId"`
	Action      ActionInput `json:"action"`
}

// GetWorkspaceId returns __createChannelActionInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createChannelActionInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetAction returns __createChannelActionInput.Action, and is useful for accessing the field via an interface.
func (v *__createChannelActionInput) GetAction() ActionInput { return v.Action }

// __createChannelInput is used internally by genqlient
type __createChannelInput struct {
	WorkspaceId string       `json:"workspaceId"`
	Channel     ChannelInput `json:"channel"`
}

// GetWorkspaceId returns __createChannelInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createChannelInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetChannel returns __createChannelInput.Channel, and is useful for accessing the field via an interface.
func (v *__createChannelInput) GetChannel() ChannelInput { return v.Channel }

// __createDatastreamInput is used internally by genqlient
type __createDatastreamInput struct {
	WorkspaceId string          `json:"workspaceId"`
	Datastream  DatastreamInput `json:"datastream"`
}

// GetWorkspaceId returns __createDatastreamInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createDatastreamInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetDatastream returns __createDatastreamInput.Datastream, and is useful for accessing the field via an interface.
func (v *__createDatastreamInput) GetDatastream() DatastreamInput { return v.Datastream }

// __createDatastreamTokenInput is used internally by genqlient
type __createDatastreamTokenInput struct {
	DatastreamId string               `json:"datastreamId"`
	Token        DatastreamTokenInput `json:"token"`
}

// GetDatastreamId returns __createDatastreamTokenInput.DatastreamId, and is useful for accessing the field via an interface.
func (v *__createDatastreamTokenInput) GetDatastreamId() string { return v.DatastreamId }

// GetToken returns __createDatastreamTokenInput.Token, and is useful for accessing the field via an interface.
func (v *__createDatastreamTokenInput) GetToken() DatastreamTokenInput { return v.Token }

// __createDeferredForeignKeyInput is used internally by genqlient
type __createDeferredForeignKeyInput struct {
	WorkspaceId string                  `json:"workspaceId"`
	KeyInput    DeferredForeignKeyInput `json:"keyInput"`
}

// GetWorkspaceId returns __createDeferredForeignKeyInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createDeferredForeignKeyInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetKeyInput returns __createDeferredForeignKeyInput.KeyInput, and is useful for accessing the field via an interface.
func (v *__createDeferredForeignKeyInput) GetKeyInput() DeferredForeignKeyInput { return v.KeyInput }

// __createFolderInput is used internally by genqlient
type __createFolderInput struct {
	WorkspaceId string      `json:"workspaceId"`
	Config      FolderInput `json:"config"`
}

// GetWorkspaceId returns __createFolderInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createFolderInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetConfig returns __createFolderInput.Config, and is useful for accessing the field via an interface.
func (v *__createFolderInput) GetConfig() FolderInput { return v.Config }

// __createMonitorInput is used internally by genqlient
type __createMonitorInput struct {
	WorkspaceId string       `json:"workspaceId"`
	Monitor     MonitorInput `json:"monitor"`
}

// GetWorkspaceId returns __createMonitorInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createMonitorInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetMonitor returns __createMonitorInput.Monitor, and is useful for accessing the field via an interface.
func (v *__createMonitorInput) GetMonitor() MonitorInput { return v.Monitor }

// __createOrUpdateBookmarkGroupInput is used internally by genqlient
type __createOrUpdateBookmarkGroupInput struct {
	Id    *string            `json:"id"`
	Group BookmarkGroupInput `json:"group"`
}

// GetId returns __createOrUpdateBookmarkGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__createOrUpdateBookmarkGroupInput) GetId() *string { return v.Id }

// GetGroup returns __createOrUpdateBookmarkGroupInput.Group, and is useful for accessing the field via an interface.
func (v *__createOrUpdateBookmarkGroupInput) GetGroup() BookmarkGroupInput { return v.Group }

// __createOrUpdateBookmarkInput is used internally by genqlient
type __createOrUpdateBookmarkInput struct {
	Id       *string       `json:"id"`
	Bookmark BookmarkInput `json:"bookmark"`
}

// GetId returns __createOrUpdateBookmarkInput.Id, and is useful for accessing the field via an interface.
func (v *__createOrUpdateBookmarkInput) GetId() *string { return v.Id }

// GetBookmark returns __createOrUpdateBookmarkInput.Bookmark, and is useful for accessing the field via an interface.
func (v *__createOrUpdateBookmarkInput) GetBookmark() BookmarkInput { return v.Bookmark }

// __createPollerInput is used internally by genqlient
type __createPollerInput struct {
	WorkspaceId string      `json:"workspaceId"`
	Poller      PollerInput `json:"poller"`
}

// GetWorkspaceId returns __createPollerInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createPollerInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetPoller returns __createPollerInput.Poller, and is useful for accessing the field via an interface.
func (v *__createPollerInput) GetPoller() PollerInput { return v.Poller }

// __createPreferredPathInput is used internally by genqlient
type __createPreferredPathInput struct {
	WorkspaceId string             `json:"workspaceId"`
	Config      PreferredPathInput `json:"config"`
}

// GetWorkspaceId returns __createPreferredPathInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createPreferredPathInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetConfig returns __createPreferredPathInput.Config, and is useful for accessing the field via an interface.
func (v *__createPreferredPathInput) GetConfig() PreferredPathInput { return v.Config }

// __createWorkspaceInput is used internally by genqlient
type __createWorkspaceInput struct {
	Config WorkspaceInput `json:"config"`
}

// GetConfig returns __createWorkspaceInput.Config, and is useful for accessing the field via an interface.
func (v *__createWorkspaceInput) GetConfig() WorkspaceInput { return v.Config }

// __deleteAppInput is used internally by genqlient
type __deleteAppInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteAppInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteAppInput) GetId() string { return v.Id }

// __deleteBoardInput is used internally by genqlient
type __deleteBoardInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteBoardInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteBoardInput) GetId() string { return v.Id }

// __deleteBookmarkGroupInput is used internally by genqlient
type __deleteBookmarkGroupInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteBookmarkGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteBookmarkGroupInput) GetId() string { return v.Id }

// __deleteBookmarkInput is used internally by genqlient
type __deleteBookmarkInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteBookmarkInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteBookmarkInput) GetId() string { return v.Id }

// __deleteChannelActionInput is used internally by genqlient
type __deleteChannelActionInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteChannelActionInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteChannelActionInput) GetId() string { return v.Id }

// __deleteChannelInput is used internally by genqlient
type __deleteChannelInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteChannelInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteChannelInput) GetId() string { return v.Id }

// __deleteDashboardInput is used internally by genqlient
type __deleteDashboardInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteDashboardInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteDashboardInput) GetId() string { return v.Id }

// __deleteDatasetInput is used internally by genqlient
type __deleteDatasetInput struct {
	Id  string                   `json:"id"`
	Dep *DependencyHandlingInput `json:"dep"`
}

// GetId returns __deleteDatasetInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteDatasetInput) GetId() string { return v.Id }

// GetDep returns __deleteDatasetInput.Dep, and is useful for accessing the field via an interface.
func (v *__deleteDatasetInput) GetDep() *DependencyHandlingInput { return v.Dep }

// __deleteDatastreamInput is used internally by genqlient
type __deleteDatastreamInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteDatastreamInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteDatastreamInput) GetId() string { return v.Id }

// __deleteDatastreamTokenInput is used internally by genqlient
type __deleteDatastreamTokenInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteDatastreamTokenInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteDatastreamTokenInput) GetId() string { return v.Id }

// __deleteDeferredForeignKeyInput is used internally by genqlient
type __deleteDeferredForeignKeyInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteDeferredForeignKeyInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteDeferredForeignKeyInput) GetId() string { return v.Id }

// __deleteFolderInput is used internally by genqlient
type __deleteFolderInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteFolderInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteFolderInput) GetId() string { return v.Id }

// __deleteMonitorInput is used internally by genqlient
type __deleteMonitorInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteMonitorInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteMonitorInput) GetId() string { return v.Id }

// __deletePollerInput is used internally by genqlient
type __deletePollerInput struct {
	Id string `json:"id"`
}

// GetId returns __deletePollerInput.Id, and is useful for accessing the field via an interface.
func (v *__deletePollerInput) GetId() string { return v.Id }

// __deletePreferredPathInput is used internally by genqlient
type __deletePreferredPathInput struct {
	Id string `json:"id"`
}

// GetId returns __deletePreferredPathInput.Id, and is useful for accessing the field via an interface.
func (v *__deletePreferredPathInput) GetId() string { return v.Id }

// __deleteWorksheetInput is used internally by genqlient
type __deleteWorksheetInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteWorksheetInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteWorksheetInput) GetId() string { return v.Id }

// __deleteWorkspaceInput is used internally by genqlient
type __deleteWorkspaceInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteWorkspaceInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteWorkspaceInput) GetId() string { return v.Id }

// __getAppInput is used internally by genqlient
type __getAppInput struct {
	Id string `json:"id"`
}

// GetId returns __getAppInput.Id, and is useful for accessing the field via an interface.
func (v *__getAppInput) GetId() string { return v.Id }

// __getBoardInput is used internally by genqlient
type __getBoardInput struct {
	Id string `json:"id"`
}

// GetId returns __getBoardInput.Id, and is useful for accessing the field via an interface.
func (v *__getBoardInput) GetId() string { return v.Id }

// __getBookmarkGroupInput is used internally by genqlient
type __getBookmarkGroupInput struct {
	Id string `json:"id"`
}

// GetId returns __getBookmarkGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__getBookmarkGroupInput) GetId() string { return v.Id }

// __getBookmarkInput is used internally by genqlient
type __getBookmarkInput struct {
	Id string `json:"id"`
}

// GetId returns __getBookmarkInput.Id, and is useful for accessing the field via an interface.
func (v *__getBookmarkInput) GetId() string { return v.Id }

// __getChannelActionInput is used internally by genqlient
type __getChannelActionInput struct {
	Id string `json:"id"`
}

// GetId returns __getChannelActionInput.Id, and is useful for accessing the field via an interface.
func (v *__getChannelActionInput) GetId() string { return v.Id }

// __getChannelInput is used internally by genqlient
type __getChannelInput struct {
	Id string `json:"id"`
}

// GetId returns __getChannelInput.Id, and is useful for accessing the field via an interface.
func (v *__getChannelInput) GetId() string { return v.Id }

// __getDashboardInput is used internally by genqlient
type __getDashboardInput struct {
	Id string `json:"id"`
}

// GetId returns __getDashboardInput.Id, and is useful for accessing the field via an interface.
func (v *__getDashboardInput) GetId() string { return v.Id }

// __getDatasetInput is used internally by genqlient
type __getDatasetInput struct {
	Id string `json:"id"`
}

// GetId returns __getDatasetInput.Id, and is useful for accessing the field via an interface.
func (v *__getDatasetInput) GetId() string { return v.Id }

// __getDatasetQueryOutputInput is used internally by genqlient
type __getDatasetQueryOutputInput struct {
	Query  []*StageInput `json:"query"`
	Params QueryParams   `json:"params"`
}

// GetQuery returns __getDatasetQueryOutputInput.Query, and is useful for accessing the field via an interface.
func (v *__getDatasetQueryOutputInput) GetQuery() []*StageInput { return v.Query }

// GetParams returns __getDatasetQueryOutputInput.Params, and is useful for accessing the field via an interface.
func (v *__getDatasetQueryOutputInput) GetParams() QueryParams { return v.Params }

// __getDatastreamInput is used internally by genqlient
type __getDatastreamInput struct {
	Id string `json:"id"`
}

// GetId returns __getDatastreamInput.Id, and is useful for accessing the field via an interface.
func (v *__getDatastreamInput) GetId() string { return v.Id }

// __getDatastreamTokenInput is used internally by genqlient
type __getDatastreamTokenInput struct {
	Id string `json:"id"`
}

// GetId returns __getDatastreamTokenInput.Id, and is useful for accessing the field via an interface.
func (v *__getDatastreamTokenInput) GetId() string { return v.Id }

// __getDefaultDashboardInput is used internally by genqlient
type __getDefaultDashboardInput struct {
	Dsid string `json:"dsid"`
}

// GetDsid returns __getDefaultDashboardInput.Dsid, and is useful for accessing the field via an interface.
func (v *__getDefaultDashboardInput) GetDsid() string { return v.Dsid }

// __getDeferredForeignKeyInput is used internally by genqlient
type __getDeferredForeignKeyInput struct {
	Id string `json:"id"`
}

// GetId returns __getDeferredForeignKeyInput.Id, and is useful for accessing the field via an interface.
func (v *__getDeferredForeignKeyInput) GetId() string { return v.Id }

// __getFolderInput is used internally by genqlient
type __getFolderInput struct {
	Id string `json:"id"`
}

// GetId returns __getFolderInput.Id, and is useful for accessing the field via an interface.
func (v *__getFolderInput) GetId() string { return v.Id }

// __getMonitorInput is used internally by genqlient
type __getMonitorInput struct {
	Id string `json:"id"`
}

// GetId returns __getMonitorInput.Id, and is useful for accessing the field via an interface.
func (v *__getMonitorInput) GetId() string { return v.Id }

// __getPollerInput is used internally by genqlient
type __getPollerInput struct {
	Id string `json:"id"`
}

// GetId returns __getPollerInput.Id, and is useful for accessing the field via an interface.
func (v *__getPollerInput) GetId() string { return v.Id }

// __getPreferredPathInput is used internally by genqlient
type __getPreferredPathInput struct {
	Id string `json:"id"`
}

// GetId returns __getPreferredPathInput.Id, and is useful for accessing the field via an interface.
func (v *__getPreferredPathInput) GetId() string { return v.Id }

// __getWorksheetInput is used internally by genqlient
type __getWorksheetInput struct {
	Id string `json:"id"`
}

// GetId returns __getWorksheetInput.Id, and is useful for accessing the field via an interface.
func (v *__getWorksheetInput) GetId() string { return v.Id }

// __getWorkspaceInput is used internally by genqlient
type __getWorkspaceInput struct {
	Id string `json:"id"`
}

// GetId returns __getWorkspaceInput.Id, and is useful for accessing the field via an interface.
func (v *__getWorkspaceInput) GetId() string { return v.Id }

// __lookupAppInput is used internally by genqlient
type __lookupAppInput struct {
	WorkspaceId string `json:"workspaceId"`
	Name        string `json:"name"`
}

// GetWorkspaceId returns __lookupAppInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__lookupAppInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetName returns __lookupAppInput.Name, and is useful for accessing the field via an interface.
func (v *__lookupAppInput) GetName() string { return v.Name }

// __lookupDatasetInput is used internally by genqlient
type __lookupDatasetInput struct {
	WorkspaceId string `json:"workspaceId"`
	Name        string `json:"name"`
}

// GetWorkspaceId returns __lookupDatasetInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__lookupDatasetInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetName returns __lookupDatasetInput.Name, and is useful for accessing the field via an interface.
func (v *__lookupDatasetInput) GetName() string { return v.Name }

// __lookupDatastreamInput is used internally by genqlient
type __lookupDatastreamInput struct {
	WorkspaceId string `json:"workspaceId"`
	Name        string `json:"name"`
}

// GetWorkspaceId returns __lookupDatastreamInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__lookupDatastreamInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetName returns __lookupDatastreamInput.Name, and is useful for accessing the field via an interface.
func (v *__lookupDatastreamInput) GetName() string { return v.Name }

// __lookupFolderInput is used internally by genqlient
type __lookupFolderInput struct {
	WorkspaceId string `json:"workspaceId"`
	Name        string `json:"name"`
}

// GetWorkspaceId returns __lookupFolderInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__lookupFolderInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetName returns __lookupFolderInput.Name, and is useful for accessing the field via an interface.
func (v *__lookupFolderInput) GetName() string { return v.Name }

// __lookupMonitorInput is used internally by genqlient
type __lookupMonitorInput struct {
	WorkspaceId string `json:"workspaceId"`
	Name        string `json:"name"`
}

// GetWorkspaceId returns __lookupMonitorInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__lookupMonitorInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetName returns __lookupMonitorInput.Name, and is useful for accessing the field via an interface.
func (v *__lookupMonitorInput) GetName() string { return v.Name }

// __lookupWorkspaceInput is used internally by genqlient
type __lookupWorkspaceInput struct {
	Name string `json:"name"`
}

// GetName returns __lookupWorkspaceInput.Name, and is useful for accessing the field via an interface.
func (v *__lookupWorkspaceInput) GetName() string { return v.Name }

// __saveDashboardInput is used internally by genqlient
type __saveDashboardInput struct {
	DashboardInput DashboardInput `json:"dashboardInput"`
}

// GetDashboardInput returns __saveDashboardInput.DashboardInput, and is useful for accessing the field via an interface.
func (v *__saveDashboardInput) GetDashboardInput() DashboardInput { return v.DashboardInput }

// __saveDatasetInput is used internally by genqlient
type __saveDatasetInput struct {
	WorkspaceId string                   `json:"workspaceId"`
	Dataset     DatasetInput             `json:"dataset"`
	Query       MultiStageQueryInput     `json:"query"`
	Dep         *DependencyHandlingInput `json:"dep"`
}

// GetWorkspaceId returns __saveDatasetInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__saveDatasetInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetDataset returns __saveDatasetInput.Dataset, and is useful for accessing the field via an interface.
func (v *__saveDatasetInput) GetDataset() DatasetInput { return v.Dataset }

// GetQuery returns __saveDatasetInput.Query, and is useful for accessing the field via an interface.
func (v *__saveDatasetInput) GetQuery() MultiStageQueryInput { return v.Query }

// GetDep returns __saveDatasetInput.Dep, and is useful for accessing the field via an interface.
func (v *__saveDatasetInput) GetDep() *DependencyHandlingInput { return v.Dep }

// __saveSourceDatasetInput is used internally by genqlient
type __saveSourceDatasetInput struct {
	WorkspaceId       string                     `json:"workspaceId"`
	DatasetDefinition DatasetDefinitionInput     `json:"datasetDefinition"`
	SourceTable       SourceTableDefinitionInput `json:"sourceTable"`
	Dep               *DependencyHandlingInput   `json:"dep"`
}

// GetWorkspaceId returns __saveSourceDatasetInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__saveSourceDatasetInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetDatasetDefinition returns __saveSourceDatasetInput.DatasetDefinition, and is useful for accessing the field via an interface.
func (v *__saveSourceDatasetInput) GetDatasetDefinition() DatasetDefinitionInput {
	return v.DatasetDefinition
}

// GetSourceTable returns __saveSourceDatasetInput.SourceTable, and is useful for accessing the field via an interface.
func (v *__saveSourceDatasetInput) GetSourceTable() SourceTableDefinitionInput { return v.SourceTable }

// GetDep returns __saveSourceDatasetInput.Dep, and is useful for accessing the field via an interface.
func (v *__saveSourceDatasetInput) GetDep() *DependencyHandlingInput { return v.Dep }

// __saveWorksheetInput is used internally by genqlient
type __saveWorksheetInput struct {
	WorksheetInput WorksheetInput `json:"worksheetInput"`
}

// GetWorksheetInput returns __saveWorksheetInput.WorksheetInput, and is useful for accessing the field via an interface.
func (v *__saveWorksheetInput) GetWorksheetInput() WorksheetInput { return v.WorksheetInput }

// __setChannelsForChannelActionInput is used internally by genqlient
type __setChannelsForChannelActionInput struct {
	ActionId   string   `json:"actionId"`
	ChannelIds []string `json:"channelIds"`
}

// GetActionId returns __setChannelsForChannelActionInput.ActionId, and is useful for accessing the field via an interface.
func (v *__setChannelsForChannelActionInput) GetActionId() string { return v.ActionId }

// GetChannelIds returns __setChannelsForChannelActionInput.ChannelIds, and is useful for accessing the field via an interface.
func (v *__setChannelsForChannelActionInput) GetChannelIds() []string { return v.ChannelIds }

// __setDefaultDashboardInput is used internally by genqlient
type __setDefaultDashboardInput struct {
	Dsid   string `json:"dsid"`
	Dashid string `json:"dashid"`
}

// GetDsid returns __setDefaultDashboardInput.Dsid, and is useful for accessing the field via an interface.
func (v *__setDefaultDashboardInput) GetDsid() string { return v.Dsid }

// GetDashid returns __setDefaultDashboardInput.Dashid, and is useful for accessing the field via an interface.
func (v *__setDefaultDashboardInput) GetDashid() string { return v.Dashid }

// __setMonitorsForChannelInput is used internally by genqlient
type __setMonitorsForChannelInput struct {
	ChannelId  string   `json:"channelId"`
	MonitorIds []string `json:"monitorIds"`
}

// GetChannelId returns __setMonitorsForChannelInput.ChannelId, and is useful for accessing the field via an interface.
func (v *__setMonitorsForChannelInput) GetChannelId() string { return v.ChannelId }

// GetMonitorIds returns __setMonitorsForChannelInput.MonitorIds, and is useful for accessing the field via an interface.
func (v *__setMonitorsForChannelInput) GetMonitorIds() []string { return v.MonitorIds }

// __updateAppInput is used internally by genqlient
type __updateAppInput struct {
	Id     string   `json:"id"`
	Config AppInput `json:"config"`
}

// GetId returns __updateAppInput.Id, and is useful for accessing the field via an interface.
func (v *__updateAppInput) GetId() string { return v.Id }

// GetConfig returns __updateAppInput.Config, and is useful for accessing the field via an interface.
func (v *__updateAppInput) GetConfig() AppInput { return v.Config }

// __updateBoardInput is used internally by genqlient
type __updateBoardInput struct {
	Id    string     `json:"id"`
	Board BoardInput `json:"board"`
}

// GetId returns __updateBoardInput.Id, and is useful for accessing the field via an interface.
func (v *__updateBoardInput) GetId() string { return v.Id }

// GetBoard returns __updateBoardInput.Board, and is useful for accessing the field via an interface.
func (v *__updateBoardInput) GetBoard() BoardInput { return v.Board }

// __updateChannelActionInput is used internally by genqlient
type __updateChannelActionInput struct {
	Id     string      `json:"id"`
	Action ActionInput `json:"action"`
}

// GetId returns __updateChannelActionInput.Id, and is useful for accessing the field via an interface.
func (v *__updateChannelActionInput) GetId() string { return v.Id }

// GetAction returns __updateChannelActionInput.Action, and is useful for accessing the field via an interface.
func (v *__updateChannelActionInput) GetAction() ActionInput { return v.Action }

// __updateChannelInput is used internally by genqlient
type __updateChannelInput struct {
	Id      string       `json:"id"`
	Channel ChannelInput `json:"channel"`
}

// GetId returns __updateChannelInput.Id, and is useful for accessing the field via an interface.
func (v *__updateChannelInput) GetId() string { return v.Id }

// GetChannel returns __updateChannelInput.Channel, and is useful for accessing the field via an interface.
func (v *__updateChannelInput) GetChannel() ChannelInput { return v.Channel }

// __updateDatastreamInput is used internally by genqlient
type __updateDatastreamInput struct {
	Id         string          `json:"id"`
	Datastream DatastreamInput `json:"datastream"`
}

// GetId returns __updateDatastreamInput.Id, and is useful for accessing the field via an interface.
func (v *__updateDatastreamInput) GetId() string { return v.Id }

// GetDatastream returns __updateDatastreamInput.Datastream, and is useful for accessing the field via an interface.
func (v *__updateDatastreamInput) GetDatastream() DatastreamInput { return v.Datastream }

// __updateDatastreamTokenInput is used internally by genqlient
type __updateDatastreamTokenInput struct {
	Id    string               `json:"id"`
	Token DatastreamTokenInput `json:"token"`
}

// GetId returns __updateDatastreamTokenInput.Id, and is useful for accessing the field via an interface.
func (v *__updateDatastreamTokenInput) GetId() string { return v.Id }

// GetToken returns __updateDatastreamTokenInput.Token, and is useful for accessing the field via an interface.
func (v *__updateDatastreamTokenInput) GetToken() DatastreamTokenInput { return v.Token }

// __updateDeferredForeignKeyInput is used internally by genqlient
type __updateDeferredForeignKeyInput struct {
	Id       string                  `json:"id"`
	KeyInput DeferredForeignKeyInput `json:"keyInput"`
}

// GetId returns __updateDeferredForeignKeyInput.Id, and is useful for accessing the field via an interface.
func (v *__updateDeferredForeignKeyInput) GetId() string { return v.Id }

// GetKeyInput returns __updateDeferredForeignKeyInput.KeyInput, and is useful for accessing the field via an interface.
func (v *__updateDeferredForeignKeyInput) GetKeyInput() DeferredForeignKeyInput { return v.KeyInput }

// __updateFolderInput is used internally by genqlient
type __updateFolderInput struct {
	Id     string      `json:"id"`
	Config FolderInput `json:"config"`
}

// GetId returns __updateFolderInput.Id, and is useful for accessing the field via an interface.
func (v *__updateFolderInput) GetId() string { return v.Id }

// GetConfig returns __updateFolderInput.Config, and is useful for accessing the field via an interface.
func (v *__updateFolderInput) GetConfig() FolderInput { return v.Config }

// __updateMonitorInput is used internally by genqlient
type __updateMonitorInput struct {
	Id      string       `json:"id"`
	Monitor MonitorInput `json:"monitor"`
}

// GetId returns __updateMonitorInput.Id, and is useful for accessing the field via an interface.
func (v *__updateMonitorInput) GetId() string { return v.Id }

// GetMonitor returns __updateMonitorInput.Monitor, and is useful for accessing the field via an interface.
func (v *__updateMonitorInput) GetMonitor() MonitorInput { return v.Monitor }

// __updatePollerInput is used internally by genqlient
type __updatePollerInput struct {
	Id     string      `json:"id"`
	Poller PollerInput `json:"poller"`
}

// GetId returns __updatePollerInput.Id, and is useful for accessing the field via an interface.
func (v *__updatePollerInput) GetId() string { return v.Id }

// GetPoller returns __updatePollerInput.Poller, and is useful for accessing the field via an interface.
func (v *__updatePollerInput) GetPoller() PollerInput { return v.Poller }

// __updatePreferredPathInput is used internally by genqlient
type __updatePreferredPathInput struct {
	Id     string             `json:"id"`
	Config PreferredPathInput `json:"config"`
}

// GetId returns __updatePreferredPathInput.Id, and is useful for accessing the field via an interface.
func (v *__updatePreferredPathInput) GetId() string { return v.Id }

// GetConfig returns __updatePreferredPathInput.Config, and is useful for accessing the field via an interface.
func (v *__updatePreferredPathInput) GetConfig() PreferredPathInput { return v.Config }

// __updateWorkspaceInput is used internally by genqlient
type __updateWorkspaceInput struct {
	Id     string         `json:"id"`
	Config WorkspaceInput `json:"config"`
}

// GetId returns __updateWorkspaceInput.Id, and is useful for accessing the field via an interface.
func (v *__updateWorkspaceInput) GetId() string { return v.Id }

// GetConfig returns __updateWorkspaceInput.Config, and is useful for accessing the field via an interface.
func (v *__updateWorkspaceInput) GetConfig() WorkspaceInput { return v.Config }

// clearDefaultDashboardResponse is returned by clearDefaultDashboard on success.
type clearDefaultDashboardResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns clearDefaultDashboardResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *clearDefaultDashboardResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// createAppResponse is returned by createApp on success.
type createAppResponse struct {
	App App `json:"app"`
}

// GetApp returns createAppResponse.App, and is useful for accessing the field via an interface.
func (v *createAppResponse) GetApp() App { return v.App }

// createBoardResponse is returned by createBoard on success.
type createBoardResponse struct {
	Board Board `json:"board"`
}

// GetBoard returns createBoardResponse.Board, and is useful for accessing the field via an interface.
func (v *createBoardResponse) GetBoard() Board { return v.Board }

// createChannelActionResponse is returned by createChannelAction on success.
type createChannelActionResponse struct {
	ChannelAction *ChannelAction `json:"-"`
}

// GetChannelAction returns createChannelActionResponse.ChannelAction, and is useful for accessing the field via an interface.
func (v *createChannelActionResponse) GetChannelAction() *ChannelAction { return v.ChannelAction }

func (v *createChannelActionResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createChannelActionResponse
		ChannelAction json.RawMessage `json:"channelAction"`
		graphql.NoUnmarshalJSON
	}
	firstPass.createChannelActionResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ChannelAction
		src := firstPass.ChannelAction
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ChannelAction)
			err = __unmarshalChannelAction(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal createChannelActionResponse.ChannelAction: %w", err)
			}
		}
	}
	return nil
}

type __premarshalcreateChannelActionResponse struct {
	ChannelAction json.RawMessage `json:"channelAction"`
}

func (v *createChannelActionResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createChannelActionResponse) __premarshalJSON() (*__premarshalcreateChannelActionResponse, error) {
	var retval __premarshalcreateChannelActionResponse

	{

		dst := &retval.ChannelAction
		src := v.ChannelAction
		if src != nil {
			var err error
			*dst, err = __marshalChannelAction(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal createChannelActionResponse.ChannelAction: %w", err)
			}
		}
	}
	return &retval, nil
}

// createChannelResponse is returned by createChannel on success.
type createChannelResponse struct {
	Channel *Channel `json:"channel"`
}

// GetChannel returns createChannelResponse.Channel, and is useful for accessing the field via an interface.
func (v *createChannelResponse) GetChannel() *Channel { return v.Channel }

// createDatastreamResponse is returned by createDatastream on success.
type createDatastreamResponse struct {
	Datastream Datastream `json:"datastream"`
}

// GetDatastream returns createDatastreamResponse.Datastream, and is useful for accessing the field via an interface.
func (v *createDatastreamResponse) GetDatastream() Datastream { return v.Datastream }

// createDatastreamTokenResponse is returned by createDatastreamToken on success.
type createDatastreamTokenResponse struct {
	DatastreamToken DatastreamToken `json:"datastreamToken"`
}

// GetDatastreamToken returns createDatastreamTokenResponse.DatastreamToken, and is useful for accessing the field via an interface.
func (v *createDatastreamTokenResponse) GetDatastreamToken() DatastreamToken {
	return v.DatastreamToken
}

// createDeferredForeignKeyResponse is returned by createDeferredForeignKey on success.
type createDeferredForeignKeyResponse struct {
	DeferredForeignKey *DeferredForeignKey `json:"deferredForeignKey"`
}

// GetDeferredForeignKey returns createDeferredForeignKeyResponse.DeferredForeignKey, and is useful for accessing the field via an interface.
func (v *createDeferredForeignKeyResponse) GetDeferredForeignKey() *DeferredForeignKey {
	return v.DeferredForeignKey
}

// createFolderResponse is returned by createFolder on success.
type createFolderResponse struct {
	Folder Folder `json:"folder"`
}

// GetFolder returns createFolderResponse.Folder, and is useful for accessing the field via an interface.
func (v *createFolderResponse) GetFolder() Folder { return v.Folder }

// createMonitorMonitorMonitorUpdateResult includes the requested fields of the GraphQL type MonitorUpdateResult.
type createMonitorMonitorMonitorUpdateResult struct {
	Monitor Monitor `json:"monitor"`
}

// GetMonitor returns createMonitorMonitorMonitorUpdateResult.Monitor, and is useful for accessing the field via an interface.
func (v *createMonitorMonitorMonitorUpdateResult) GetMonitor() Monitor { return v.Monitor }

// createMonitorResponse is returned by createMonitor on success.
type createMonitorResponse struct {
	Monitor *createMonitorMonitorMonitorUpdateResult `json:"monitor"`
}

// GetMonitor returns createMonitorResponse.Monitor, and is useful for accessing the field via an interface.
func (v *createMonitorResponse) GetMonitor() *createMonitorMonitorMonitorUpdateResult {
	return v.Monitor
}

// createOrUpdateBookmarkGroupResponse is returned by createOrUpdateBookmarkGroup on success.
type createOrUpdateBookmarkGroupResponse struct {
	BookmarkGroup BookmarkGroup `json:"bookmarkGroup"`
}

// GetBookmarkGroup returns createOrUpdateBookmarkGroupResponse.BookmarkGroup, and is useful for accessing the field via an interface.
func (v *createOrUpdateBookmarkGroupResponse) GetBookmarkGroup() BookmarkGroup {
	return v.BookmarkGroup
}

// createOrUpdateBookmarkResponse is returned by createOrUpdateBookmark on success.
type createOrUpdateBookmarkResponse struct {
	Bookmark Bookmark `json:"bookmark"`
}

// GetBookmark returns createOrUpdateBookmarkResponse.Bookmark, and is useful for accessing the field via an interface.
func (v *createOrUpdateBookmarkResponse) GetBookmark() Bookmark { return v.Bookmark }

// createPollerResponse is returned by createPoller on success.
type createPollerResponse struct {
	Poller Poller `json:"poller"`
}

// GetPoller returns createPollerResponse.Poller, and is useful for accessing the field via an interface.
func (v *createPollerResponse) GetPoller() Poller { return v.Poller }

// createPreferredPathResponse is returned by createPreferredPath on success.
type createPreferredPathResponse struct {
	// Create a preferred path. The name must be unique in the containing folder.
	// When 'acceptInErrorState" is true, the API will accept a save/update for a
	// path, even if it means that the path will be left in error state, else
	// an error will be returned.
	PreferredPathWithStatus PreferredPathWithStatus `json:"preferredPathWithStatus"`
}

// GetPreferredPathWithStatus returns createPreferredPathResponse.PreferredPathWithStatus, and is useful for accessing the field via an interface.
func (v *createPreferredPathResponse) GetPreferredPathWithStatus() PreferredPathWithStatus {
	return v.PreferredPathWithStatus
}

// createWorkspaceResponse is returned by createWorkspace on success.
type createWorkspaceResponse struct {
	// When creating a workspace, all users for the customer will be granted
	// access to it through the ACL system. This is because we don't yet have
	// a UI to deal with selective access.
	Workspace *Workspace `json:"workspace"`
}

// GetWorkspace returns createWorkspaceResponse.Workspace, and is useful for accessing the field via an interface.
func (v *createWorkspaceResponse) GetWorkspace() *Workspace { return v.Workspace }

// deleteAppResponse is returned by deleteApp on success.
type deleteAppResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteAppResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteAppResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteBoardResponse is returned by deleteBoard on success.
type deleteBoardResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteBoardResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteBoardResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteBookmarkGroupResponse is returned by deleteBookmarkGroup on success.
type deleteBookmarkGroupResponse struct {
	// Deleting a bookmark group will also delete the bookmarks. This is not undo-able;
	// we really wipe them from the database!
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteBookmarkGroupResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteBookmarkGroupResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteBookmarkResponse is returned by deleteBookmark on success.
type deleteBookmarkResponse struct {
	// Deleting a bookmark is not undoable; we really wipe it from the database!
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteBookmarkResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteBookmarkResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteChannelActionResponse is returned by deleteChannelAction on success.
type deleteChannelActionResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteChannelActionResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteChannelActionResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteChannelResponse is returned by deleteChannel on success.
type deleteChannelResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteChannelResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteChannelResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteDashboardResponse is returned by deleteDashboard on success.
type deleteDashboardResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteDashboardResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteDashboardResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteDatasetResponse is returned by deleteDataset on success.
type deleteDatasetResponse struct {
	ResultStatus *ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteDatasetResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteDatasetResponse) GetResultStatus() *ResultStatus { return v.ResultStatus }

// deleteDatastreamResponse is returned by deleteDatastream on success.
type deleteDatastreamResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteDatastreamResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteDatastreamResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteDatastreamTokenResponse is returned by deleteDatastreamToken on success.
type deleteDatastreamTokenResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteDatastreamTokenResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteDatastreamTokenResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteDeferredForeignKeyResponse is returned by deleteDeferredForeignKey on success.
type deleteDeferredForeignKeyResponse struct {
	ResultStatus *ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteDeferredForeignKeyResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteDeferredForeignKeyResponse) GetResultStatus() *ResultStatus { return v.ResultStatus }

// deleteFolderResponse is returned by deleteFolder on success.
type deleteFolderResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteFolderResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteFolderResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteMonitorResponse is returned by deleteMonitor on success.
type deleteMonitorResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteMonitorResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteMonitorResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deletePollerResponse is returned by deletePoller on success.
type deletePollerResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deletePollerResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deletePollerResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deletePreferredPathResponse is returned by deletePreferredPath on success.
type deletePreferredPathResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deletePreferredPathResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deletePreferredPathResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteWorksheetResponse is returned by deleteWorksheet on success.
type deleteWorksheetResponse struct {
	ResultStatus *ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteWorksheetResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteWorksheetResponse) GetResultStatus() *ResultStatus { return v.ResultStatus }

// deleteWorkspaceResponse is returned by deleteWorkspace on success.
type deleteWorkspaceResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteWorkspaceResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteWorkspaceResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// getAppResponse is returned by getApp on success.
type getAppResponse struct {
	App App `json:"app"`
}

// GetApp returns getAppResponse.App, and is useful for accessing the field via an interface.
func (v *getAppResponse) GetApp() App { return v.App }

// getBoardResponse is returned by getBoard on success.
type getBoardResponse struct {
	Board Board `json:"board"`
}

// GetBoard returns getBoardResponse.Board, and is useful for accessing the field via an interface.
func (v *getBoardResponse) GetBoard() Board { return v.Board }

// getBookmarkGroupResponse is returned by getBookmarkGroup on success.
type getBookmarkGroupResponse struct {
	BookmarkGroup BookmarkGroup `json:"bookmarkGroup"`
}

// GetBookmarkGroup returns getBookmarkGroupResponse.BookmarkGroup, and is useful for accessing the field via an interface.
func (v *getBookmarkGroupResponse) GetBookmarkGroup() BookmarkGroup { return v.BookmarkGroup }

// getBookmarkResponse is returned by getBookmark on success.
type getBookmarkResponse struct {
	Bookmark Bookmark `json:"bookmark"`
}

// GetBookmark returns getBookmarkResponse.Bookmark, and is useful for accessing the field via an interface.
func (v *getBookmarkResponse) GetBookmark() Bookmark { return v.Bookmark }

// getChannelActionResponse is returned by getChannelAction on success.
type getChannelActionResponse struct {
	ChannelAction *ChannelAction `json:"-"`
}

// GetChannelAction returns getChannelActionResponse.ChannelAction, and is useful for accessing the field via an interface.
func (v *getChannelActionResponse) GetChannelAction() *ChannelAction { return v.ChannelAction }

func (v *getChannelActionResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getChannelActionResponse
		ChannelAction json.RawMessage `json:"channelAction"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getChannelActionResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ChannelAction
		src := firstPass.ChannelAction
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ChannelAction)
			err = __unmarshalChannelAction(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal getChannelActionResponse.ChannelAction: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetChannelActionResponse struct {
	ChannelAction json.RawMessage `json:"channelAction"`
}

func (v *getChannelActionResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getChannelActionResponse) __premarshalJSON() (*__premarshalgetChannelActionResponse, error) {
	var retval __premarshalgetChannelActionResponse

	{

		dst := &retval.ChannelAction
		src := v.ChannelAction
		if src != nil {
			var err error
			*dst, err = __marshalChannelAction(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal getChannelActionResponse.ChannelAction: %w", err)
			}
		}
	}
	return &retval, nil
}

// getChannelResponse is returned by getChannel on success.
type getChannelResponse struct {
	Channel *Channel `json:"channel"`
}

// GetChannel returns getChannelResponse.Channel, and is useful for accessing the field via an interface.
func (v *getChannelResponse) GetChannel() *Channel { return v.Channel }

// getDashboardResponse is returned by getDashboard on success.
type getDashboardResponse struct {
	Dashboard Dashboard `json:"dashboard"`
}

// GetDashboard returns getDashboardResponse.Dashboard, and is useful for accessing the field via an interface.
func (v *getDashboardResponse) GetDashboard() Dashboard { return v.Dashboard }

// getDatasetQueryOutputResponse is returned by getDatasetQueryOutput on success.
type getDatasetQueryOutputResponse struct {
	// Given some datasets and pipeline expressions, run the query and extract the
	// query results.  Errors in input specification come back as GQL/HTTP errors,
	// but syntax errors in the parsed query come back in the parsedPipeline result
	// set for each query.
	//
	// Times out after 2 minutes.
	TaskResult []*TaskResult `json:"taskResult"`
}

// GetTaskResult returns getDatasetQueryOutputResponse.TaskResult, and is useful for accessing the field via an interface.
func (v *getDatasetQueryOutputResponse) GetTaskResult() []*TaskResult { return v.TaskResult }

// getDatasetResponse is returned by getDataset on success.
type getDatasetResponse struct {
	Dataset *Dataset `json:"dataset"`
}

// GetDataset returns getDatasetResponse.Dataset, and is useful for accessing the field via an interface.
func (v *getDatasetResponse) GetDataset() *Dataset { return v.Dataset }

// getDatastreamResponse is returned by getDatastream on success.
type getDatastreamResponse struct {
	Datastream Datastream `json:"datastream"`
}

// GetDatastream returns getDatastreamResponse.Datastream, and is useful for accessing the field via an interface.
func (v *getDatastreamResponse) GetDatastream() Datastream { return v.Datastream }

// getDatastreamTokenResponse is returned by getDatastreamToken on success.
type getDatastreamTokenResponse struct {
	DatastreamToken DatastreamToken `json:"datastreamToken"`
}

// GetDatastreamToken returns getDatastreamTokenResponse.DatastreamToken, and is useful for accessing the field via an interface.
func (v *getDatastreamTokenResponse) GetDatastreamToken() DatastreamToken { return v.DatastreamToken }

// getDefaultDashboardResponse is returned by getDefaultDashboard on success.
type getDefaultDashboardResponse struct {
	// Default dashboard ID for a given dataset ID. May be null.
	DefaultDashboard *string `json:"defaultDashboard"`
}

// GetDefaultDashboard returns getDefaultDashboardResponse.DefaultDashboard, and is useful for accessing the field via an interface.
func (v *getDefaultDashboardResponse) GetDefaultDashboard() *string { return v.DefaultDashboard }

// getDeferredForeignKeyResponse is returned by getDeferredForeignKey on success.
type getDeferredForeignKeyResponse struct {
	DeferredForeignKey *DeferredForeignKey `json:"deferredForeignKey"`
}

// GetDeferredForeignKey returns getDeferredForeignKeyResponse.DeferredForeignKey, and is useful for accessing the field via an interface.
func (v *getDeferredForeignKeyResponse) GetDeferredForeignKey() *DeferredForeignKey {
	return v.DeferredForeignKey
}

// getFolderResponse is returned by getFolder on success.
type getFolderResponse struct {
	Folder Folder `json:"folder"`
}

// GetFolder returns getFolderResponse.Folder, and is useful for accessing the field via an interface.
func (v *getFolderResponse) GetFolder() Folder { return v.Folder }

// getMonitorResponse is returned by getMonitor on success.
type getMonitorResponse struct {
	Monitor Monitor `json:"monitor"`
}

// GetMonitor returns getMonitorResponse.Monitor, and is useful for accessing the field via an interface.
func (v *getMonitorResponse) GetMonitor() Monitor { return v.Monitor }

// getPollerResponse is returned by getPoller on success.
type getPollerResponse struct {
	Poller Poller `json:"poller"`
}

// GetPoller returns getPollerResponse.Poller, and is useful for accessing the field via an interface.
func (v *getPollerResponse) GetPoller() Poller { return v.Poller }

// getPreferredPathResponse is returned by getPreferredPath on success.
type getPreferredPathResponse struct {
	PreferredPathWithStatus PreferredPathWithStatus `json:"preferredPathWithStatus"`
}

// GetPreferredPathWithStatus returns getPreferredPathResponse.PreferredPathWithStatus, and is useful for accessing the field via an interface.
func (v *getPreferredPathResponse) GetPreferredPathWithStatus() PreferredPathWithStatus {
	return v.PreferredPathWithStatus
}

// getWorksheetResponse is returned by getWorksheet on success.
type getWorksheetResponse struct {
	Worksheet *Worksheet `json:"worksheet"`
}

// GetWorksheet returns getWorksheetResponse.Worksheet, and is useful for accessing the field via an interface.
func (v *getWorksheetResponse) GetWorksheet() *Worksheet { return v.Worksheet }

// getWorkspaceResponse is returned by getWorkspace on success.
type getWorkspaceResponse struct {
	Workspace *Workspace `json:"workspace"`
}

// GetWorkspace returns getWorkspaceResponse.Workspace, and is useful for accessing the field via an interface.
func (v *getWorkspaceResponse) GetWorkspace() *Workspace { return v.Workspace }

// listDatasetsDatasetsProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Project and Workspace are the same thing We call it Workspace in the UI
// design now, so at some point, maybe update the API to match the updated
// design?
type listDatasetsDatasetsProject struct {
	Datasets []*Dataset `json:"datasets"`
}

// GetDatasets returns listDatasetsDatasetsProject.Datasets, and is useful for accessing the field via an interface.
func (v *listDatasetsDatasetsProject) GetDatasets() []*Dataset { return v.Datasets }

// listDatasetsResponse is returned by listDatasets on success.
type listDatasetsResponse struct {
	Datasets []*listDatasetsDatasetsProject `json:"datasets"`
}

// GetDatasets returns listDatasetsResponse.Datasets, and is useful for accessing the field via an interface.
func (v *listDatasetsResponse) GetDatasets() []*listDatasetsDatasetsProject { return v.Datasets }

// listWorkspacesResponse is returned by listWorkspaces on success.
type listWorkspacesResponse struct {
	Workspaces []*Workspace `json:"workspaces"`
}

// GetWorkspaces returns listWorkspacesResponse.Workspaces, and is useful for accessing the field via an interface.
func (v *listWorkspacesResponse) GetWorkspaces() []*Workspace { return v.Workspaces }

// lookupAppResponse is returned by lookupApp on success.
type lookupAppResponse struct {
	Apps []App `json:"apps"`
}

// GetApps returns lookupAppResponse.Apps, and is useful for accessing the field via an interface.
func (v *lookupAppResponse) GetApps() []App { return v.Apps }

// lookupDatasetDatasetProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Project and Workspace are the same thing We call it Workspace in the UI
// design now, so at some point, maybe update the API to match the updated
// design?
type lookupDatasetDatasetProject struct {
	Dataset *Dataset `json:"dataset"`
}

// GetDataset returns lookupDatasetDatasetProject.Dataset, and is useful for accessing the field via an interface.
func (v *lookupDatasetDatasetProject) GetDataset() *Dataset { return v.Dataset }

// lookupDatasetResponse is returned by lookupDataset on success.
type lookupDatasetResponse struct {
	Dataset *lookupDatasetDatasetProject `json:"dataset"`
}

// GetDataset returns lookupDatasetResponse.Dataset, and is useful for accessing the field via an interface.
func (v *lookupDatasetResponse) GetDataset() *lookupDatasetDatasetProject { return v.Dataset }

// lookupDatastreamDatastreamProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Project and Workspace are the same thing We call it Workspace in the UI
// design now, so at some point, maybe update the API to match the updated
// design?
type lookupDatastreamDatastreamProject struct {
	Datastream Datastream `json:"datastream"`
}

// GetDatastream returns lookupDatastreamDatastreamProject.Datastream, and is useful for accessing the field via an interface.
func (v *lookupDatastreamDatastreamProject) GetDatastream() Datastream { return v.Datastream }

// lookupDatastreamResponse is returned by lookupDatastream on success.
type lookupDatastreamResponse struct {
	Datastream *lookupDatastreamDatastreamProject `json:"datastream"`
}

// GetDatastream returns lookupDatastreamResponse.Datastream, and is useful for accessing the field via an interface.
func (v *lookupDatastreamResponse) GetDatastream() *lookupDatastreamDatastreamProject {
	return v.Datastream
}

// lookupFolderFolderProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Project and Workspace are the same thing We call it Workspace in the UI
// design now, so at some point, maybe update the API to match the updated
// design?
type lookupFolderFolderProject struct {
	Folder Folder `json:"folder"`
}

// GetFolder returns lookupFolderFolderProject.Folder, and is useful for accessing the field via an interface.
func (v *lookupFolderFolderProject) GetFolder() Folder { return v.Folder }

// lookupFolderResponse is returned by lookupFolder on success.
type lookupFolderResponse struct {
	Folder *lookupFolderFolderProject `json:"folder"`
}

// GetFolder returns lookupFolderResponse.Folder, and is useful for accessing the field via an interface.
func (v *lookupFolderResponse) GetFolder() *lookupFolderFolderProject { return v.Folder }

// lookupMonitorMonitorProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Project and Workspace are the same thing We call it Workspace in the UI
// design now, so at some point, maybe update the API to match the updated
// design?
type lookupMonitorMonitorProject struct {
	Monitor Monitor `json:"monitor"`
}

// GetMonitor returns lookupMonitorMonitorProject.Monitor, and is useful for accessing the field via an interface.
func (v *lookupMonitorMonitorProject) GetMonitor() Monitor { return v.Monitor }

// lookupMonitorResponse is returned by lookupMonitor on success.
type lookupMonitorResponse struct {
	Monitor *lookupMonitorMonitorProject `json:"monitor"`
}

// GetMonitor returns lookupMonitorResponse.Monitor, and is useful for accessing the field via an interface.
func (v *lookupMonitorResponse) GetMonitor() *lookupMonitorMonitorProject { return v.Monitor }

// lookupWorkspaceResponse is returned by lookupWorkspace on success.
type lookupWorkspaceResponse struct {
	Workspace *Workspace `json:"workspace"`
}

// GetWorkspace returns lookupWorkspaceResponse.Workspace, and is useful for accessing the field via an interface.
func (v *lookupWorkspaceResponse) GetWorkspace() *Workspace { return v.Workspace }

// primitiveValueFields includes the GraphQL fields of PrimitiveValue requested by the fragment primitiveValueFields.
type primitiveValueFields struct {
	Bool    *bool              `json:"bool"`
	Float64 *float64           `json:"float64"`
	Int64   *types.Int64Scalar `json:"int64"`
	String  *string            `json:"string"`
}

// GetBool returns primitiveValueFields.Bool, and is useful for accessing the field via an interface.
func (v *primitiveValueFields) GetBool() *bool { return v.Bool }

// GetFloat64 returns primitiveValueFields.Float64, and is useful for accessing the field via an interface.
func (v *primitiveValueFields) GetFloat64() *float64 { return v.Float64 }

// GetInt64 returns primitiveValueFields.Int64, and is useful for accessing the field via an interface.
func (v *primitiveValueFields) GetInt64() *types.Int64Scalar { return v.Int64 }

// GetString returns primitiveValueFields.String, and is useful for accessing the field via an interface.
func (v *primitiveValueFields) GetString() *string { return v.String }

// saveDashboardResponse is returned by saveDashboard on success.
type saveDashboardResponse struct {
	Dashboard Dashboard `json:"dashboard"`
}

// GetDashboard returns saveDashboardResponse.Dashboard, and is useful for accessing the field via an interface.
func (v *saveDashboardResponse) GetDashboard() Dashboard { return v.Dashboard }

// saveDatasetDatasetDatasetSaveResult includes the requested fields of the GraphQL type DatasetSaveResult.
type saveDatasetDatasetDatasetSaveResult struct {
	// this is what you got out when saving
	Dataset *Dataset `json:"dataset"`
}

// GetDataset returns saveDatasetDatasetDatasetSaveResult.Dataset, and is useful for accessing the field via an interface.
func (v *saveDatasetDatasetDatasetSaveResult) GetDataset() *Dataset { return v.Dataset }

// saveDatasetResponse is returned by saveDataset on success.
type saveDatasetResponse struct {
	// saveDataset will create a dataset if you don't provide an input id.
	// It will also make sure that the provided transform is published with
	// that dataset. This is the general "update the things" function to use.
	// If dependencyHandling is not specified, then the default is to apply
	// changes but ignore downstream datasets or errors therein.
	Dataset *saveDatasetDatasetDatasetSaveResult `json:"dataset"`
}

// GetDataset returns saveDatasetResponse.Dataset, and is useful for accessing the field via an interface.
func (v *saveDatasetResponse) GetDataset() *saveDatasetDatasetDatasetSaveResult { return v.Dataset }

// saveSourceDatasetDatasetDatasetSaveResult includes the requested fields of the GraphQL type DatasetSaveResult.
type saveSourceDatasetDatasetDatasetSaveResult struct {
	// this is what you got out when saving
	Dataset *Dataset `json:"dataset"`
}

// GetDataset returns saveSourceDatasetDatasetDatasetSaveResult.Dataset, and is useful for accessing the field via an interface.
func (v *saveSourceDatasetDatasetDatasetSaveResult) GetDataset() *Dataset { return v.Dataset }

// saveSourceDatasetResponse is returned by saveSourceDataset on success.
type saveSourceDatasetResponse struct {
	Dataset *saveSourceDatasetDatasetDatasetSaveResult `json:"dataset"`
}

// GetDataset returns saveSourceDatasetResponse.Dataset, and is useful for accessing the field via an interface.
func (v *saveSourceDatasetResponse) GetDataset() *saveSourceDatasetDatasetDatasetSaveResult {
	return v.Dataset
}

// saveWorksheetResponse is returned by saveWorksheet on success.
type saveWorksheetResponse struct {
	Worksheet *Worksheet `json:"worksheet"`
}

// GetWorksheet returns saveWorksheetResponse.Worksheet, and is useful for accessing the field via an interface.
func (v *saveWorksheetResponse) GetWorksheet() *Worksheet { return v.Worksheet }

// setChannelsForChannelActionResponse is returned by setChannelsForChannelAction on success.
type setChannelsForChannelActionResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns setChannelsForChannelActionResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *setChannelsForChannelActionResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// setDefaultDashboardResponse is returned by setDefaultDashboard on success.
type setDefaultDashboardResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns setDefaultDashboardResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *setDefaultDashboardResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// setMonitorsForChannelResponse is returned by setMonitorsForChannel on success.
type setMonitorsForChannelResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns setMonitorsForChannelResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *setMonitorsForChannelResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// updateAppResponse is returned by updateApp on success.
type updateAppResponse struct {
	App App `json:"app"`
}

// GetApp returns updateAppResponse.App, and is useful for accessing the field via an interface.
func (v *updateAppResponse) GetApp() App { return v.App }

// updateBoardResponse is returned by updateBoard on success.
type updateBoardResponse struct {
	Board Board `json:"board"`
}

// GetBoard returns updateBoardResponse.Board, and is useful for accessing the field via an interface.
func (v *updateBoardResponse) GetBoard() Board { return v.Board }

// updateChannelActionResponse is returned by updateChannelAction on success.
type updateChannelActionResponse struct {
	ChannelAction *ChannelAction `json:"-"`
}

// GetChannelAction returns updateChannelActionResponse.ChannelAction, and is useful for accessing the field via an interface.
func (v *updateChannelActionResponse) GetChannelAction() *ChannelAction { return v.ChannelAction }

func (v *updateChannelActionResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateChannelActionResponse
		ChannelAction json.RawMessage `json:"channelAction"`
		graphql.NoUnmarshalJSON
	}
	firstPass.updateChannelActionResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ChannelAction
		src := firstPass.ChannelAction
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ChannelAction)
			err = __unmarshalChannelAction(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal updateChannelActionResponse.ChannelAction: %w", err)
			}
		}
	}
	return nil
}

type __premarshalupdateChannelActionResponse struct {
	ChannelAction json.RawMessage `json:"channelAction"`
}

func (v *updateChannelActionResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateChannelActionResponse) __premarshalJSON() (*__premarshalupdateChannelActionResponse, error) {
	var retval __premarshalupdateChannelActionResponse

	{

		dst := &retval.ChannelAction
		src := v.ChannelAction
		if src != nil {
			var err error
			*dst, err = __marshalChannelAction(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal updateChannelActionResponse.ChannelAction: %w", err)
			}
		}
	}
	return &retval, nil
}

// updateChannelResponse is returned by updateChannel on success.
type updateChannelResponse struct {
	Channel *Channel `json:"channel"`
}

// GetChannel returns updateChannelResponse.Channel, and is useful for accessing the field via an interface.
func (v *updateChannelResponse) GetChannel() *Channel { return v.Channel }

// updateDatastreamResponse is returned by updateDatastream on success.
type updateDatastreamResponse struct {
	Datastream Datastream `json:"datastream"`
}

// GetDatastream returns updateDatastreamResponse.Datastream, and is useful for accessing the field via an interface.
func (v *updateDatastreamResponse) GetDatastream() Datastream { return v.Datastream }

// updateDatastreamTokenResponse is returned by updateDatastreamToken on success.
type updateDatastreamTokenResponse struct {
	DatastreamToken DatastreamToken `json:"datastreamToken"`
}

// GetDatastreamToken returns updateDatastreamTokenResponse.DatastreamToken, and is useful for accessing the field via an interface.
func (v *updateDatastreamTokenResponse) GetDatastreamToken() DatastreamToken {
	return v.DatastreamToken
}

// updateDeferredForeignKeyResponse is returned by updateDeferredForeignKey on success.
type updateDeferredForeignKeyResponse struct {
	DeferredForeignKey *DeferredForeignKey `json:"deferredForeignKey"`
}

// GetDeferredForeignKey returns updateDeferredForeignKeyResponse.DeferredForeignKey, and is useful for accessing the field via an interface.
func (v *updateDeferredForeignKeyResponse) GetDeferredForeignKey() *DeferredForeignKey {
	return v.DeferredForeignKey
}

// updateFolderResponse is returned by updateFolder on success.
type updateFolderResponse struct {
	Folder Folder `json:"folder"`
}

// GetFolder returns updateFolderResponse.Folder, and is useful for accessing the field via an interface.
func (v *updateFolderResponse) GetFolder() Folder { return v.Folder }

// updateMonitorMonitorMonitorUpdateResult includes the requested fields of the GraphQL type MonitorUpdateResult.
type updateMonitorMonitorMonitorUpdateResult struct {
	Monitor Monitor `json:"monitor"`
}

// GetMonitor returns updateMonitorMonitorMonitorUpdateResult.Monitor, and is useful for accessing the field via an interface.
func (v *updateMonitorMonitorMonitorUpdateResult) GetMonitor() Monitor { return v.Monitor }

// updateMonitorResponse is returned by updateMonitor on success.
type updateMonitorResponse struct {
	Monitor *updateMonitorMonitorMonitorUpdateResult `json:"monitor"`
}

// GetMonitor returns updateMonitorResponse.Monitor, and is useful for accessing the field via an interface.
func (v *updateMonitorResponse) GetMonitor() *updateMonitorMonitorMonitorUpdateResult {
	return v.Monitor
}

// updatePollerResponse is returned by updatePoller on success.
type updatePollerResponse struct {
	Poller Poller `json:"poller"`
}

// GetPoller returns updatePollerResponse.Poller, and is useful for accessing the field via an interface.
func (v *updatePollerResponse) GetPoller() Poller { return v.Poller }

// updatePreferredPathResponse is returned by updatePreferredPath on success.
type updatePreferredPathResponse struct {
	// Update a preferred path. When 'acceptInErrorState" is true, the API will accept
	// a save/update for a path, even if it means that the path will be left in error
	// state, else an error will be returned.
	PreferredPathWithStatus PreferredPathWithStatus `json:"preferredPathWithStatus"`
}

// GetPreferredPathWithStatus returns updatePreferredPathResponse.PreferredPathWithStatus, and is useful for accessing the field via an interface.
func (v *updatePreferredPathResponse) GetPreferredPathWithStatus() PreferredPathWithStatus {
	return v.PreferredPathWithStatus
}

// updateWorkspaceResponse is returned by updateWorkspace on success.
type updateWorkspaceResponse struct {
	Workspace *Workspace `json:"workspace"`
}

// GetWorkspace returns updateWorkspaceResponse.Workspace, and is useful for accessing the field via an interface.
func (v *updateWorkspaceResponse) GetWorkspace() *Workspace { return v.Workspace }

// valueFields includes the GraphQL fields of Value requested by the fragment valueFields.
type valueFields struct {
	Bool       *bool                                 `json:"bool"`
	Float64    *float64                              `json:"float64"`
	Int64      *types.Int64Scalar                    `json:"int64"`
	String     *string                               `json:"string"`
	Array      *valueFieldsArrayValueArray           `json:"array"`
	Link       *valueFieldsLinkValueLink             `json:"link"`
	Datasetref *valueFieldsDatasetrefValueDatasetref `json:"datasetref"`
}

// GetBool returns valueFields.Bool, and is useful for accessing the field via an interface.
func (v *valueFields) GetBool() *bool { return v.Bool }

// GetFloat64 returns valueFields.Float64, and is useful for accessing the field via an interface.
func (v *valueFields) GetFloat64() *float64 { return v.Float64 }

// GetInt64 returns valueFields.Int64, and is useful for accessing the field via an interface.
func (v *valueFields) GetInt64() *types.Int64Scalar { return v.Int64 }

// GetString returns valueFields.String, and is useful for accessing the field via an interface.
func (v *valueFields) GetString() *string { return v.String }

// GetArray returns valueFields.Array, and is useful for accessing the field via an interface.
func (v *valueFields) GetArray() *valueFieldsArrayValueArray { return v.Array }

// GetLink returns valueFields.Link, and is useful for accessing the field via an interface.
func (v *valueFields) GetLink() *valueFieldsLinkValueLink { return v.Link }

// GetDatasetref returns valueFields.Datasetref, and is useful for accessing the field via an interface.
func (v *valueFields) GetDatasetref() *valueFieldsDatasetrefValueDatasetref { return v.Datasetref }

// valueFieldsArrayValueArray includes the requested fields of the GraphQL type ValueArray.
type valueFieldsArrayValueArray struct {
	Value []valueFieldsArrayValueArrayValuePrimitiveValue `json:"value"`
}

// GetValue returns valueFieldsArrayValueArray.Value, and is useful for accessing the field via an interface.
func (v *valueFieldsArrayValueArray) GetValue() []valueFieldsArrayValueArrayValuePrimitiveValue {
	return v.Value
}

// valueFieldsArrayValueArrayValuePrimitiveValue includes the requested fields of the GraphQL type PrimitiveValue.
type valueFieldsArrayValueArrayValuePrimitiveValue struct {
	primitiveValueFields `json:"-"`
}

// GetBool returns valueFieldsArrayValueArrayValuePrimitiveValue.Bool, and is useful for accessing the field via an interface.
func (v *valueFieldsArrayValueArrayValuePrimitiveValue) GetBool() *bool {
	return v.primitiveValueFields.Bool
}

// GetFloat64 returns valueFieldsArrayValueArrayValuePrimitiveValue.Float64, and is useful for accessing the field via an interface.
func (v *valueFieldsArrayValueArrayValuePrimitiveValue) GetFloat64() *float64 {
	return v.primitiveValueFields.Float64
}

// GetInt64 returns valueFieldsArrayValueArrayValuePrimitiveValue.Int64, and is useful for accessing the field via an interface.
func (v *valueFieldsArrayValueArrayValuePrimitiveValue) GetInt64() *types.Int64Scalar {
	return v.primitiveValueFields.Int64
}

// GetString returns valueFieldsArrayValueArrayValuePrimitiveValue.String, and is useful for accessing the field via an interface.
func (v *valueFieldsArrayValueArrayValuePrimitiveValue) GetString() *string {
	return v.primitiveValueFields.String
}

func (v *valueFieldsArrayValueArrayValuePrimitiveValue) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*valueFieldsArrayValueArrayValuePrimitiveValue
		graphql.NoUnmarshalJSON
	}
	firstPass.valueFieldsArrayValueArrayValuePrimitiveValue = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.primitiveValueFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalvalueFieldsArrayValueArrayValuePrimitiveValue struct {
	Bool *bool `json:"bool"`

	Float64 *float64 `json:"float64"`

	Int64 *types.Int64Scalar `json:"int64"`

	String *string `json:"string"`
}

func (v *valueFieldsArrayValueArrayValuePrimitiveValue) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *valueFieldsArrayValueArrayValuePrimitiveValue) __premarshalJSON() (*__premarshalvalueFieldsArrayValueArrayValuePrimitiveValue, error) {
	var retval __premarshalvalueFieldsArrayValueArrayValuePrimitiveValue

	retval.Bool = v.primitiveValueFields.Bool
	retval.Float64 = v.primitiveValueFields.Float64
	retval.Int64 = v.primitiveValueFields.Int64
	retval.String = v.primitiveValueFields.String
	return &retval, nil
}

// valueFieldsDatasetrefValueDatasetref includes the requested fields of the GraphQL type ValueDatasetref.
type valueFieldsDatasetrefValueDatasetref struct {
	DatasetId   *string `json:"datasetId"`
	DatasetPath *string `json:"datasetPath"`
	StageId     *string `json:"stageId"`
}

// GetDatasetId returns valueFieldsDatasetrefValueDatasetref.DatasetId, and is useful for accessing the field via an interface.
func (v *valueFieldsDatasetrefValueDatasetref) GetDatasetId() *string { return v.DatasetId }

// GetDatasetPath returns valueFieldsDatasetrefValueDatasetref.DatasetPath, and is useful for accessing the field via an interface.
func (v *valueFieldsDatasetrefValueDatasetref) GetDatasetPath() *string { return v.DatasetPath }

// GetStageId returns valueFieldsDatasetrefValueDatasetref.StageId, and is useful for accessing the field via an interface.
func (v *valueFieldsDatasetrefValueDatasetref) GetStageId() *string { return v.StageId }

// valueFieldsLinkValueLink includes the requested fields of the GraphQL type ValueLink.
type valueFieldsLinkValueLink struct {
	DatasetId       string                                                 `json:"datasetId"`
	PrimaryKeyValue []valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValue `json:"primaryKeyValue"`
	StoredLabel     *string                                                `json:"storedLabel"`
}

// GetDatasetId returns valueFieldsLinkValueLink.DatasetId, and is useful for accessing the field via an interface.
func (v *valueFieldsLinkValueLink) GetDatasetId() string { return v.DatasetId }

// GetPrimaryKeyValue returns valueFieldsLinkValueLink.PrimaryKeyValue, and is useful for accessing the field via an interface.
func (v *valueFieldsLinkValueLink) GetPrimaryKeyValue() []valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValue {
	return v.PrimaryKeyValue
}

// GetStoredLabel returns valueFieldsLinkValueLink.StoredLabel, and is useful for accessing the field via an interface.
func (v *valueFieldsLinkValueLink) GetStoredLabel() *string { return v.StoredLabel }

// valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValue includes the requested fields of the GraphQL type ValueKeyValue.
type valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValue struct {
	Name  string                                                                  `json:"name"`
	Value valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue `json:"value"`
}

// GetName returns valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValue.Name, and is useful for accessing the field via an interface.
func (v *valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValue) GetName() string { return v.Name }

// GetValue returns valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValue.Value, and is useful for accessing the field via an interface.
func (v *valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValue) GetValue() valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue {
	return v.Value
}

// valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue includes the requested fields of the GraphQL type PrimitiveValue.
type valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue struct {
	primitiveValueFields `json:"-"`
}

// GetBool returns valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue.Bool, and is useful for accessing the field via an interface.
func (v *valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue) GetBool() *bool {
	return v.primitiveValueFields.Bool
}

// GetFloat64 returns valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue.Float64, and is useful for accessing the field via an interface.
func (v *valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue) GetFloat64() *float64 {
	return v.primitiveValueFields.Float64
}

// GetInt64 returns valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue.Int64, and is useful for accessing the field via an interface.
func (v *valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue) GetInt64() *types.Int64Scalar {
	return v.primitiveValueFields.Int64
}

// GetString returns valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue.String, and is useful for accessing the field via an interface.
func (v *valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue) GetString() *string {
	return v.primitiveValueFields.String
}

func (v *valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue
		graphql.NoUnmarshalJSON
	}
	firstPass.valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.primitiveValueFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalvalueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue struct {
	Bool *bool `json:"bool"`

	Float64 *float64 `json:"float64"`

	Int64 *types.Int64Scalar `json:"int64"`

	String *string `json:"string"`
}

func (v *valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *valueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue) __premarshalJSON() (*__premarshalvalueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue, error) {
	var retval __premarshalvalueFieldsLinkValueLinkPrimaryKeyValueValueKeyValueValuePrimitiveValue

	retval.Bool = v.primitiveValueFields.Bool
	retval.Float64 = v.primitiveValueFields.Float64
	retval.Int64 = v.primitiveValueFields.Int64
	retval.String = v.primitiveValueFields.String
	return &retval, nil
}

func clearDefaultDashboard(
	ctx context.Context,
	client graphql.Client,
	dsid string,
) (*clearDefaultDashboardResponse, error) {
	req := &graphql.Request{
		OpName: "clearDefaultDashboard",
		Query: `
mutation clearDefaultDashboard ($dsid: ObjectId!) {
	resultStatus: clearDefaultDashboard(dsid: $dsid) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__clearDefaultDashboardInput{
			Dsid: dsid,
		},
	}
	var err error

	var data clearDefaultDashboardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createApp(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	config AppInput,
) (*createAppResponse, error) {
	req := &graphql.Request{
		OpName: "createApp",
		Query: `
mutation createApp ($workspaceId: ObjectId!, $config: AppInput!) {
	app: createApp(workspaceId: $workspaceId, app: $config) {
		... App
	}
}
fragment App on App {
	id
	name
	iconUrl
	description
	workspaceId
	folderId
	config {
		moduleId
		version
	}
	status {
		state
		internalError
	}
	outputs
}
`,
		Variables: &__createAppInput{
			WorkspaceId: workspaceId,
			Config:      config,
		},
	}
	var err error

	var data createAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createBoard(
	ctx context.Context,
	client graphql.Client,
	datasetId string,
	boardType BoardType,
	board BoardInput,
) (*createBoardResponse, error) {
	req := &graphql.Request{
		OpName: "createBoard",
		Query: `
mutation createBoard ($datasetId: ObjectId!, $boardType: BoardType!, $board: BoardInput!) {
	board: createBoard(datasetId: $datasetId, type: $boardType, board: $board) {
		... Board
	}
}
fragment Board on Board {
	id
	datasetId
	name
	type
	boardJson: board
	source
}
`,
		Variables: &__createBoardInput{
			DatasetId: datasetId,
			BoardType: boardType,
			Board:     board,
		},
	}
	var err error

	var data createBoardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createChannel(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	channel ChannelInput,
) (*createChannelResponse, error) {
	req := &graphql.Request{
		OpName: "createChannel",
		Query: `
mutation createChannel ($workspaceId: ObjectId!, $channel: ChannelInput!) {
	channel: createChannel(workspaceId: $workspaceId, channel: $channel) {
		... Channel
	}
}
fragment Channel on Channel {
	id
	name
	iconUrl
	description
	workspaceId
	monitors {
		id
	}
}
`,
		Variables: &__createChannelInput{
			WorkspaceId: workspaceId,
			Channel:     channel,
		},
	}
	var err error

	var data createChannelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createChannelAction(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	action ActionInput,
) (*createChannelActionResponse, error) {
	req := &graphql.Request{
		OpName: "createChannelAction",
		Query: `
mutation createChannelAction ($workspaceId: ObjectId!, $action: ActionInput!) {
	channelAction: createChannelAction(workspaceId: $workspaceId, action: $action) {
		__typename
		... ChannelAction
	}
}
fragment ChannelAction on ChannelAction {
	id
	name
	iconUrl
	description
	notifyOnClose
	workspaceId
	channels {
		id
	}
	rateLimit
	__typename
	... on WebhookAction {
		urlTemplate
		bodyTemplate
		method
		headers {
			header
			valueTemplate
		}
	}
	... on EmailAction {
		targetAddresses
		subjectTemplate
		bodyTemplate
		isHtml
	}
}
`,
		Variables: &__createChannelActionInput{
			WorkspaceId: workspaceId,
			Action:      action,
		},
	}
	var err error

	var data createChannelActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createDatastream(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	datastream DatastreamInput,
) (*createDatastreamResponse, error) {
	req := &graphql.Request{
		OpName: "createDatastream",
		Query: `
mutation createDatastream ($workspaceId: ObjectId!, $datastream: DatastreamInput!) {
	datastream: createDatastream(workspaceId: $workspaceId, datastream: $datastream) {
		... Datastream
	}
}
fragment Datastream on Datastream {
	id
	name
	iconUrl
	description
	workspaceId
	datasetId
}
`,
		Variables: &__createDatastreamInput{
			WorkspaceId: workspaceId,
			Datastream:  datastream,
		},
	}
	var err error

	var data createDatastreamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createDatastreamToken(
	ctx context.Context,
	client graphql.Client,
	datastreamId string,
	token DatastreamTokenInput,
) (*createDatastreamTokenResponse, error) {
	req := &graphql.Request{
		OpName: "createDatastreamToken",
		Query: `
mutation createDatastreamToken ($datastreamId: ObjectId!, $token: DatastreamTokenInput!) {
	datastreamToken: createDatastreamToken(datastreamId: $datastreamId, token: $token) {
		... DatastreamToken
	}
}
fragment DatastreamToken on DatastreamToken {
	id
	name
	description
	disabled
	datastreamId
	secret
}
`,
		Variables: &__createDatastreamTokenInput{
			DatastreamId: datastreamId,
			Token:        token,
		},
	}
	var err error

	var data createDatastreamTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createDeferredForeignKey(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	keyInput DeferredForeignKeyInput,
) (*createDeferredForeignKeyResponse, error) {
	req := &graphql.Request{
		OpName: "createDeferredForeignKey",
		Query: `
mutation createDeferredForeignKey ($workspaceId: ObjectId!, $keyInput: DeferredForeignKeyInput!) {
	deferredForeignKey: createDeferredForeignKey(workspaceId: $workspaceId, data: $keyInput) {
		... DeferredForeignKey
	}
}
fragment DeferredForeignKey on DeferredForeignKey {
	id
	workspaceId
	sourceDataset {
		datasetId
	}
	targetDataset {
		datasetId
	}
	srcFields
	dstFields
	label
	resolution {
		sourceId
		targetId
	}
	status {
		errorText
	}
}
`,
		Variables: &__createDeferredForeignKeyInput{
			WorkspaceId: workspaceId,
			KeyInput:    keyInput,
		},
	}
	var err error

	var data createDeferredForeignKeyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createFolder(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	config FolderInput,
) (*createFolderResponse, error) {
	req := &graphql.Request{
		OpName: "createFolder",
		Query: `
mutation createFolder ($workspaceId: ObjectId!, $config: FolderInput!) {
	folder: createFolder(workspaceId: $workspaceId, folder: $config) {
		... Folder
	}
}
fragment Folder on Folder {
	id
	name
	iconUrl
	description
	workspaceId
}
`,
		Variables: &__createFolderInput{
			WorkspaceId: workspaceId,
			Config:      config,
		},
	}
	var err error

	var data createFolderResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// More workarounds for server-side struggles
func createMonitor(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	monitor MonitorInput,
) (*createMonitorResponse, error) {
	req := &graphql.Request{
		OpName: "createMonitor",
		Query: `
mutation createMonitor ($workspaceId: ObjectId!, $monitor: MonitorInput!) {
	monitor: createMonitor(workspaceId: $workspaceId, monitor: $monitor) {
		monitor {
			... Monitor
		}
	}
}
fragment Monitor on Monitor {
	workspaceId
	id
	name
	description
	iconUrl
	disabled
	freshnessGoal
	useDefaultFreshness
	source
	managedById
	query {
		outputStage
		stages {
			... StageQuery
		}
	}
	rule {
		__typename
		sourceColumn
		groupByGroups {
			groupName
			columns
		}
		... on MonitorRuleCount {
			compareFunction
			compareValues
			lookbackTime
		}
		... on MonitorRuleChange {
			changeType
			compareFunction
			compareValues
			aggregateFunction
			lookbackTime
			baselineTime
		}
		... on MonitorRuleFacet {
			facetFunction
			facetValues
			timeFunction
			timeValue
			lookbackTime
		}
		... on MonitorRuleThreshold {
			compareFunction
			compareValues
			lookbackTime
			thresholdAggFunction
		}
		... on MonitorRulePromote {
			kindField
			descriptionField
			primaryKey
		}
	}
	notificationSpec {
		merge
		importance
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`,
		Variables: &__createMonitorInput{
			WorkspaceId: workspaceId,
			Monitor:     monitor,
		},
	}
	var err error

	var data createMonitorResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createOrUpdateBookmark(
	ctx context.Context,
	client graphql.Client,
	id *string,
	bookmark BookmarkInput,
) (*createOrUpdateBookmarkResponse, error) {
	req := &graphql.Request{
		OpName: "createOrUpdateBookmark",
		Query: `
mutation createOrUpdateBookmark ($id: ObjectId, $bookmark: BookmarkInput!) {
	bookmark: createOrUpdateBookmark(id: $id, bookmark: $bookmark) {
		... Bookmark
	}
}
fragment Bookmark on Bookmark {
	id
	name
	iconUrl
	targetId
	targetIdKind
	groupId
}
`,
		Variables: &__createOrUpdateBookmarkInput{
			Id:       id,
			Bookmark: bookmark,
		},
	}
	var err error

	var data createOrUpdateBookmarkResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createOrUpdateBookmarkGroup(
	ctx context.Context,
	client graphql.Client,
	id *string,
	group BookmarkGroupInput,
) (*createOrUpdateBookmarkGroupResponse, error) {
	req := &graphql.Request{
		OpName: "createOrUpdateBookmarkGroup",
		Query: `
mutation createOrUpdateBookmarkGroup ($id: ObjectId, $group: BookmarkGroupInput!) {
	bookmarkGroup: createOrUpdateBookmarkGroup(id: $id, group: $group) {
		... BookmarkGroup
	}
}
fragment BookmarkGroup on BookmarkGroup {
	id
	name
	iconUrl
	workspaceId
}
`,
		Variables: &__createOrUpdateBookmarkGroupInput{
			Id:    id,
			Group: group,
		},
	}
	var err error

	var data createOrUpdateBookmarkGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createPoller(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	poller PollerInput,
) (*createPollerResponse, error) {
	req := &graphql.Request{
		OpName: "createPoller",
		Query: `
mutation createPoller ($workspaceId: ObjectId!, $poller: PollerInput!) {
	poller: createPoller(workspaceId: $workspaceId, poller: $poller) {
		... Poller
	}
}
fragment Poller on Poller {
	id
	workspaceId
	customerId
	datastreamId
	disabled
	kind
	config {
		__typename
		name
		retries
		interval
		tags
		chunk {
			enabled
			size
		}
		... on PollerPubSubConfig {
			projectId
			jsonKey
			subscriptionId
		}
		... on PollerHTTPConfig {
			method
			body
			endpoint
			contentType
			headers
			template {
				... HttpRequestConfig
			}
			requests {
				... HttpRequestConfig
			}
			rules {
				match {
					... HttpRequestConfig
				}
				follow
				decoder {
					type
				}
			}
		}
		... on PollerGCPMonitoringConfig {
			projectId
			jsonKey
			includeMetricTypePrefixes
			excludeMetricTypePrefixes
			rateLimit
			totalLimit
		}
		... on PollerMongoDBAtlasConfig {
			publicKey
			privateKey
			includeGroups
			excludeGroups
		}
	}
}
fragment HttpRequestConfig on PollerHTTPRequestConfig {
	url
	method
	username
	password
	headers
	params
}
`,
		Variables: &__createPollerInput{
			WorkspaceId: workspaceId,
			Poller:      poller,
		},
	}
	var err error

	var data createPollerResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// More workarounds for server-side struggles
func createPreferredPath(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	config PreferredPathInput,
) (*createPreferredPathResponse, error) {
	req := &graphql.Request{
		OpName: "createPreferredPath",
		Query: `
mutation createPreferredPath ($workspaceId: ObjectId!, $config: PreferredPathInput!) {
	preferredPathWithStatus: createPreferredPath(workspaceId: $workspaceId, path: $config) {
		... PreferredPathWithStatus
	}
}
fragment PreferredPathWithStatus on PreferredPathWithStatus {
	path {
		... PreferredPath
	}
	error
}
fragment PreferredPath on PreferredPath {
	id
	name
	iconUrl
	description
	workspaceId
	folderId
	sourceDataset
	path {
		linkId
		reverse
	}
}
`,
		Variables: &__createPreferredPathInput{
			WorkspaceId: workspaceId,
			Config:      config,
		},
	}
	var err error

	var data createPreferredPathResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createWorkspace(
	ctx context.Context,
	client graphql.Client,
	config WorkspaceInput,
) (*createWorkspaceResponse, error) {
	req := &graphql.Request{
		OpName: "createWorkspace",
		Query: `
mutation createWorkspace ($config: WorkspaceInput!) {
	workspace: createWorkspace(definition: $config) {
		... Workspace
	}
}
fragment Workspace on Project {
	id
	label
	datasets {
		id
		label
	}
}
`,
		Variables: &__createWorkspaceInput{
			Config: config,
		},
	}
	var err error

	var data createWorkspaceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteApp(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteAppResponse, error) {
	req := &graphql.Request{
		OpName: "deleteApp",
		Query: `
mutation deleteApp ($id: ObjectId!) {
	resultStatus: deleteApp(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deleteAppInput{
			Id: id,
		},
	}
	var err error

	var data deleteAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteBoard(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteBoardResponse, error) {
	req := &graphql.Request{
		OpName: "deleteBoard",
		Query: `
mutation deleteBoard ($id: ObjectId!) {
	resultStatus: deleteBoard(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deleteBoardInput{
			Id: id,
		},
	}
	var err error

	var data deleteBoardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteBookmark(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteBookmarkResponse, error) {
	req := &graphql.Request{
		OpName: "deleteBookmark",
		Query: `
mutation deleteBookmark ($id: ObjectId!) {
	resultStatus: deleteBookmark(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deleteBookmarkInput{
			Id: id,
		},
	}
	var err error

	var data deleteBookmarkResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteBookmarkGroup(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteBookmarkGroupResponse, error) {
	req := &graphql.Request{
		OpName: "deleteBookmarkGroup",
		Query: `
mutation deleteBookmarkGroup ($id: ObjectId!) {
	resultStatus: deleteBookmarkGroup(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deleteBookmarkGroupInput{
			Id: id,
		},
	}
	var err error

	var data deleteBookmarkGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteChannel(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteChannelResponse, error) {
	req := &graphql.Request{
		OpName: "deleteChannel",
		Query: `
mutation deleteChannel ($id: ObjectId!) {
	resultStatus: deleteChannel(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deleteChannelInput{
			Id: id,
		},
	}
	var err error

	var data deleteChannelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteChannelAction(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteChannelActionResponse, error) {
	req := &graphql.Request{
		OpName: "deleteChannelAction",
		Query: `
mutation deleteChannelAction ($id: ObjectId!) {
	resultStatus: deleteChannelAction(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deleteChannelActionInput{
			Id: id,
		},
	}
	var err error

	var data deleteChannelActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteDashboard(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteDashboardResponse, error) {
	req := &graphql.Request{
		OpName: "deleteDashboard",
		Query: `
mutation deleteDashboard ($id: ObjectId!) {
	resultStatus: deleteDashboard(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deleteDashboardInput{
			Id: id,
		},
	}
	var err error

	var data deleteDashboardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteDataset(
	ctx context.Context,
	client graphql.Client,
	id string,
	dep *DependencyHandlingInput,
) (*deleteDatasetResponse, error) {
	req := &graphql.Request{
		OpName: "deleteDataset",
		Query: `
mutation deleteDataset ($id: ObjectId!, $dep: DependencyHandlingInput) {
	resultStatus: deleteDataset(dsid: $id, dependencyHandling: $dep) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deleteDatasetInput{
			Id:  id,
			Dep: dep,
		},
	}
	var err error

	var data deleteDatasetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteDatastream(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteDatastreamResponse, error) {
	req := &graphql.Request{
		OpName: "deleteDatastream",
		Query: `
mutation deleteDatastream ($id: ObjectId!) {
	resultStatus: deleteDatastream(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deleteDatastreamInput{
			Id: id,
		},
	}
	var err error

	var data deleteDatastreamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteDatastreamToken(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteDatastreamTokenResponse, error) {
	req := &graphql.Request{
		OpName: "deleteDatastreamToken",
		Query: `
mutation deleteDatastreamToken ($id: String!) {
	resultStatus: deleteDatastreamToken(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deleteDatastreamTokenInput{
			Id: id,
		},
	}
	var err error

	var data deleteDatastreamTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteDeferredForeignKey(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteDeferredForeignKeyResponse, error) {
	req := &graphql.Request{
		OpName: "deleteDeferredForeignKey",
		Query: `
mutation deleteDeferredForeignKey ($id: ObjectId!) {
	resultStatus: deleteDeferredForeignKey(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deleteDeferredForeignKeyInput{
			Id: id,
		},
	}
	var err error

	var data deleteDeferredForeignKeyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteFolder(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteFolderResponse, error) {
	req := &graphql.Request{
		OpName: "deleteFolder",
		Query: `
mutation deleteFolder ($id: ObjectId!) {
	resultStatus: deleteFolder(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deleteFolderInput{
			Id: id,
		},
	}
	var err error

	var data deleteFolderResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteMonitor(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteMonitorResponse, error) {
	req := &graphql.Request{
		OpName: "deleteMonitor",
		Query: `
mutation deleteMonitor ($id: ObjectId!) {
	resultStatus: deleteMonitor(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deleteMonitorInput{
			Id: id,
		},
	}
	var err error

	var data deleteMonitorResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deletePoller(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deletePollerResponse, error) {
	req := &graphql.Request{
		OpName: "deletePoller",
		Query: `
mutation deletePoller ($id: ObjectId!) {
	resultStatus: deletePoller(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deletePollerInput{
			Id: id,
		},
	}
	var err error

	var data deletePollerResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deletePreferredPath(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deletePreferredPathResponse, error) {
	req := &graphql.Request{
		OpName: "deletePreferredPath",
		Query: `
mutation deletePreferredPath ($id: ObjectId!) {
	resultStatus: deletePreferredPath(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deletePreferredPathInput{
			Id: id,
		},
	}
	var err error

	var data deletePreferredPathResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteWorksheet(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteWorksheetResponse, error) {
	req := &graphql.Request{
		OpName: "deleteWorksheet",
		Query: `
mutation deleteWorksheet ($id: ObjectId!) {
	resultStatus: deleteWorksheet(wks: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deleteWorksheetInput{
			Id: id,
		},
	}
	var err error

	var data deleteWorksheetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteWorkspace(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteWorkspaceResponse, error) {
	req := &graphql.Request{
		OpName: "deleteWorkspace",
		Query: `
mutation deleteWorkspace ($id: ObjectId!) {
	resultStatus: deleteWorkspace(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__deleteWorkspaceInput{
			Id: id,
		},
	}
	var err error

	var data deleteWorkspaceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getApp(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getAppResponse, error) {
	req := &graphql.Request{
		OpName: "getApp",
		Query: `
query getApp ($id: ObjectId!) {
	app(id: $id) {
		... App
	}
}
fragment App on App {
	id
	name
	iconUrl
	description
	workspaceId
	folderId
	config {
		moduleId
		version
	}
	status {
		state
		internalError
	}
	outputs
}
`,
		Variables: &__getAppInput{
			Id: id,
		},
	}
	var err error

	var data getAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getBoard(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getBoardResponse, error) {
	req := &graphql.Request{
		OpName: "getBoard",
		Query: `
query getBoard ($id: ObjectId!) {
	board: getBoard(id: $id) {
		... Board
	}
}
fragment Board on Board {
	id
	datasetId
	name
	type
	boardJson: board
	source
}
`,
		Variables: &__getBoardInput{
			Id: id,
		},
	}
	var err error

	var data getBoardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getBookmark(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getBookmarkResponse, error) {
	req := &graphql.Request{
		OpName: "getBookmark",
		Query: `
query getBookmark ($id: ObjectId!) {
	bookmark(id: $id) {
		... Bookmark
	}
}
fragment Bookmark on Bookmark {
	id
	name
	iconUrl
	targetId
	targetIdKind
	groupId
}
`,
		Variables: &__getBookmarkInput{
			Id: id,
		},
	}
	var err error

	var data getBookmarkResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getBookmarkGroup(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getBookmarkGroupResponse, error) {
	req := &graphql.Request{
		OpName: "getBookmarkGroup",
		Query: `
query getBookmarkGroup ($id: ObjectId!) {
	bookmarkGroup(id: $id) {
		... BookmarkGroup
	}
}
fragment BookmarkGroup on BookmarkGroup {
	id
	name
	iconUrl
	workspaceId
}
`,
		Variables: &__getBookmarkGroupInput{
			Id: id,
		},
	}
	var err error

	var data getBookmarkGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getChannel(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getChannelResponse, error) {
	req := &graphql.Request{
		OpName: "getChannel",
		Query: `
query getChannel ($id: ObjectId!) {
	channel: getChannel(id: $id) {
		... Channel
	}
}
fragment Channel on Channel {
	id
	name
	iconUrl
	description
	workspaceId
	monitors {
		id
	}
}
`,
		Variables: &__getChannelInput{
			Id: id,
		},
	}
	var err error

	var data getChannelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getChannelAction(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getChannelActionResponse, error) {
	req := &graphql.Request{
		OpName: "getChannelAction",
		Query: `
query getChannelAction ($id: ObjectId!) {
	channelAction: getChannelAction(id: $id) {
		__typename
		... ChannelAction
	}
}
fragment ChannelAction on ChannelAction {
	id
	name
	iconUrl
	description
	notifyOnClose
	workspaceId
	channels {
		id
	}
	rateLimit
	__typename
	... on WebhookAction {
		urlTemplate
		bodyTemplate
		method
		headers {
			header
			valueTemplate
		}
	}
	... on EmailAction {
		targetAddresses
		subjectTemplate
		bodyTemplate
		isHtml
	}
}
`,
		Variables: &__getChannelActionInput{
			Id: id,
		},
	}
	var err error

	var data getChannelActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getDashboard(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getDashboardResponse, error) {
	req := &graphql.Request{
		OpName: "getDashboard",
		Query: `
query getDashboard ($id: ObjectId!) {
	dashboard(id: $id) {
		... Dashboard
	}
}
fragment Dashboard on Dashboard {
	id
	name
	iconUrl
	workspaceId
	managedById
	folderId
	layout
	stages {
		id
		input {
			inputName
			inputRole
			datasetId
			datasetPath
			stageId
		}
		params
		layout
		pipeline
	}
	parameters {
		id
		name
		defaultValue {
			... valueFields
		}
		valueKind {
			type
			keyForDatasetId
			arrayItemType {
				type
				keyForDatasetId
			}
		}
	}
	parameterValues {
		id
		value {
			... valueFields
		}
	}
}
fragment valueFields on Value {
	bool
	float64
	int64
	string
	array {
		value {
			... primitiveValueFields
		}
	}
	link {
		datasetId
		primaryKeyValue {
			name
			value {
				... primitiveValueFields
			}
		}
		storedLabel
	}
	datasetref {
		datasetId
		datasetPath
		stageId
	}
}
fragment primitiveValueFields on PrimitiveValue {
	bool
	float64
	int64
	string
}
`,
		Variables: &__getDashboardInput{
			Id: id,
		},
	}
	var err error

	var data getDashboardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getDataset(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getDatasetResponse, error) {
	req := &graphql.Request{
		OpName: "getDataset",
		Query: `
query getDataset ($id: ObjectId!) {
	dataset(id: $id) {
		... Dataset
	}
}
fragment Dataset on Dataset {
	workspaceId
	id
	label
	freshnessDesired
	description
	iconUrl
	version
	lastSaved
	pathCost
	source
	managedById
	onDemandMaterializationLength
	foreignKeys {
		label
		targetDataset
		srcFields
		dstFields
	}
	transform {
		current {
			query {
				outputStage
				stages {
					... StageQuery
				}
			}
		}
	}
	typedef {
		label
		def {
			anykey
			fields {
				name
				type {
					rep
					nullable
				}
				isEnum
				isSearchable
				isHidden
				isConst
				isMetric
			}
		}
	}
	sourceTable {
		schema
		tableName
		sourceUpdateTableName
		isInsertOnly
		batchSeqField
		validFromField
		fields {
			name
			sqlType
		}
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`,
		Variables: &__getDatasetInput{
			Id: id,
		},
	}
	var err error

	var data getDatasetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getDatasetQueryOutput(
	ctx context.Context,
	client graphql.Client,
	query []*StageInput,
	params QueryParams,
) (*getDatasetQueryOutputResponse, error) {
	req := &graphql.Request{
		OpName: "getDatasetQueryOutput",
		Query: `
query getDatasetQueryOutput ($query: [StageInput!]!, $params: QueryParams!) {
	taskResult: datasetQueryOutput(query: $query, params: $params) {
		... TaskResult
	}
}
fragment TaskResult on TaskResult {
	queryId
	stageId
	startTime
	endTime
	error
	resultCursor
	resultSchema {
		typedefDefinition
	}
}
`,
		Variables: &__getDatasetQueryOutputInput{
			Query:  query,
			Params: params,
		},
	}
	var err error

	var data getDatasetQueryOutputResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getDatastream(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getDatastreamResponse, error) {
	req := &graphql.Request{
		OpName: "getDatastream",
		Query: `
query getDatastream ($id: ObjectId!) {
	datastream(id: $id) {
		... Datastream
	}
}
fragment Datastream on Datastream {
	id
	name
	iconUrl
	description
	workspaceId
	datasetId
}
`,
		Variables: &__getDatastreamInput{
			Id: id,
		},
	}
	var err error

	var data getDatastreamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getDatastreamToken(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getDatastreamTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getDatastreamToken",
		Query: `
query getDatastreamToken ($id: String!) {
	datastreamToken(id: $id) {
		... DatastreamToken
	}
}
fragment DatastreamToken on DatastreamToken {
	id
	name
	description
	disabled
	datastreamId
	secret
}
`,
		Variables: &__getDatastreamTokenInput{
			Id: id,
		},
	}
	var err error

	var data getDatastreamTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getDefaultDashboard(
	ctx context.Context,
	client graphql.Client,
	dsid string,
) (*getDefaultDashboardResponse, error) {
	req := &graphql.Request{
		OpName: "getDefaultDashboard",
		Query: `
query getDefaultDashboard ($dsid: ObjectId!) {
	defaultDashboard(dsid: $dsid)
}
`,
		Variables: &__getDefaultDashboardInput{
			Dsid: dsid,
		},
	}
	var err error

	var data getDefaultDashboardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getDeferredForeignKey(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getDeferredForeignKeyResponse, error) {
	req := &graphql.Request{
		OpName: "getDeferredForeignKey",
		Query: `
query getDeferredForeignKey ($id: ObjectId!) {
	deferredForeignKey(id: $id) {
		... DeferredForeignKey
	}
}
fragment DeferredForeignKey on DeferredForeignKey {
	id
	workspaceId
	sourceDataset {
		datasetId
	}
	targetDataset {
		datasetId
	}
	srcFields
	dstFields
	label
	resolution {
		sourceId
		targetId
	}
	status {
		errorText
	}
}
`,
		Variables: &__getDeferredForeignKeyInput{
			Id: id,
		},
	}
	var err error

	var data getDeferredForeignKeyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getFolder(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getFolderResponse, error) {
	req := &graphql.Request{
		OpName: "getFolder",
		Query: `
query getFolder ($id: ObjectId!) {
	folder(id: $id) {
		... Folder
	}
}
fragment Folder on Folder {
	id
	name
	iconUrl
	description
	workspaceId
}
`,
		Variables: &__getFolderInput{
			Id: id,
		},
	}
	var err error

	var data getFolderResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getMonitor(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getMonitorResponse, error) {
	req := &graphql.Request{
		OpName: "getMonitor",
		Query: `
query getMonitor ($id: ObjectId!) {
	monitor(id: $id) {
		... Monitor
	}
}
fragment Monitor on Monitor {
	workspaceId
	id
	name
	description
	iconUrl
	disabled
	freshnessGoal
	useDefaultFreshness
	source
	managedById
	query {
		outputStage
		stages {
			... StageQuery
		}
	}
	rule {
		__typename
		sourceColumn
		groupByGroups {
			groupName
			columns
		}
		... on MonitorRuleCount {
			compareFunction
			compareValues
			lookbackTime
		}
		... on MonitorRuleChange {
			changeType
			compareFunction
			compareValues
			aggregateFunction
			lookbackTime
			baselineTime
		}
		... on MonitorRuleFacet {
			facetFunction
			facetValues
			timeFunction
			timeValue
			lookbackTime
		}
		... on MonitorRuleThreshold {
			compareFunction
			compareValues
			lookbackTime
			thresholdAggFunction
		}
		... on MonitorRulePromote {
			kindField
			descriptionField
			primaryKey
		}
	}
	notificationSpec {
		merge
		importance
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`,
		Variables: &__getMonitorInput{
			Id: id,
		},
	}
	var err error

	var data getMonitorResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getPoller(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getPollerResponse, error) {
	req := &graphql.Request{
		OpName: "getPoller",
		Query: `
query getPoller ($id: ObjectId!) {
	poller(id: $id) {
		... Poller
	}
}
fragment Poller on Poller {
	id
	workspaceId
	customerId
	datastreamId
	disabled
	kind
	config {
		__typename
		name
		retries
		interval
		tags
		chunk {
			enabled
			size
		}
		... on PollerPubSubConfig {
			projectId
			jsonKey
			subscriptionId
		}
		... on PollerHTTPConfig {
			method
			body
			endpoint
			contentType
			headers
			template {
				... HttpRequestConfig
			}
			requests {
				... HttpRequestConfig
			}
			rules {
				match {
					... HttpRequestConfig
				}
				follow
				decoder {
					type
				}
			}
		}
		... on PollerGCPMonitoringConfig {
			projectId
			jsonKey
			includeMetricTypePrefixes
			excludeMetricTypePrefixes
			rateLimit
			totalLimit
		}
		... on PollerMongoDBAtlasConfig {
			publicKey
			privateKey
			includeGroups
			excludeGroups
		}
	}
}
fragment HttpRequestConfig on PollerHTTPRequestConfig {
	url
	method
	username
	password
	headers
	params
}
`,
		Variables: &__getPollerInput{
			Id: id,
		},
	}
	var err error

	var data getPollerResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getPreferredPath(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getPreferredPathResponse, error) {
	req := &graphql.Request{
		OpName: "getPreferredPath",
		Query: `
query getPreferredPath ($id: ObjectId!) {
	preferredPathWithStatus: preferredPath(id: $id) {
		... PreferredPathWithStatus
	}
}
fragment PreferredPathWithStatus on PreferredPathWithStatus {
	path {
		... PreferredPath
	}
	error
}
fragment PreferredPath on PreferredPath {
	id
	name
	iconUrl
	description
	workspaceId
	folderId
	sourceDataset
	path {
		linkId
		reverse
	}
}
`,
		Variables: &__getPreferredPathInput{
			Id: id,
		},
	}
	var err error

	var data getPreferredPathResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getWorksheet(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getWorksheetResponse, error) {
	req := &graphql.Request{
		OpName: "getWorksheet",
		Query: `
query getWorksheet ($id: ObjectId!) {
	worksheet(id: $id) {
		... Worksheet
	}
}
fragment Worksheet on Worksheet {
	id
	label
	icon
	managedById
	workspace {
		id
	}
	stages {
		... StageQuery
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`,
		Variables: &__getWorksheetInput{
			Id: id,
		},
	}
	var err error

	var data getWorksheetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getWorkspace(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getWorkspaceResponse, error) {
	req := &graphql.Request{
		OpName: "getWorkspace",
		Query: `
query getWorkspace ($id: ObjectId!) {
	workspace(id: $id) {
		... Workspace
	}
}
fragment Workspace on Project {
	id
	label
	datasets {
		id
		label
	}
}
`,
		Variables: &__getWorkspaceInput{
			Id: id,
		},
	}
	var err error

	var data getWorkspaceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func listDatasets(
	ctx context.Context,
	client graphql.Client,
) (*listDatasetsResponse, error) {
	req := &graphql.Request{
		OpName: "listDatasets",
		Query: `
query listDatasets {
	datasets: projects {
		datasets {
			... Dataset
		}
	}
}
fragment Dataset on Dataset {
	workspaceId
	id
	label
	freshnessDesired
	description
	iconUrl
	version
	lastSaved
	pathCost
	source
	managedById
	onDemandMaterializationLength
	foreignKeys {
		label
		targetDataset
		srcFields
		dstFields
	}
	transform {
		current {
			query {
				outputStage
				stages {
					... StageQuery
				}
			}
		}
	}
	typedef {
		label
		def {
			anykey
			fields {
				name
				type {
					rep
					nullable
				}
				isEnum
				isSearchable
				isHidden
				isConst
				isMetric
			}
		}
	}
	sourceTable {
		schema
		tableName
		sourceUpdateTableName
		isInsertOnly
		batchSeqField
		validFromField
		fields {
			name
			sqlType
		}
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`,
	}
	var err error

	var data listDatasetsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func listWorkspaces(
	ctx context.Context,
	client graphql.Client,
) (*listWorkspacesResponse, error) {
	req := &graphql.Request{
		OpName: "listWorkspaces",
		Query: `
query listWorkspaces {
	workspaces: projects {
		... Workspace
	}
}
fragment Workspace on Project {
	id
	label
	datasets {
		id
		label
	}
}
`,
	}
	var err error

	var data listWorkspacesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// LookupApp retrieves app by name.
// TODO: this should be bound to a folderId, not a workspace.
func lookupApp(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	name string,
) (*lookupAppResponse, error) {
	req := &graphql.Request{
		OpName: "lookupApp",
		Query: `
query lookupApp ($workspaceId: ObjectId!, $name: String!) {
	apps(workspaceId: $workspaceId, name: $name) {
		... App
	}
}
fragment App on App {
	id
	name
	iconUrl
	description
	workspaceId
	folderId
	config {
		moduleId
		version
	}
	status {
		state
		internalError
	}
	outputs
}
`,
		Variables: &__lookupAppInput{
			WorkspaceId: workspaceId,
			Name:        name,
		},
	}
	var err error

	var data lookupAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func lookupDataset(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	name string,
) (*lookupDatasetResponse, error) {
	req := &graphql.Request{
		OpName: "lookupDataset",
		Query: `
query lookupDataset ($workspaceId: ObjectId!, $name: String!) {
	dataset: workspace(id: $workspaceId) {
		dataset(label: $name) {
			... Dataset
		}
	}
}
fragment Dataset on Dataset {
	workspaceId
	id
	label
	freshnessDesired
	description
	iconUrl
	version
	lastSaved
	pathCost
	source
	managedById
	onDemandMaterializationLength
	foreignKeys {
		label
		targetDataset
		srcFields
		dstFields
	}
	transform {
		current {
			query {
				outputStage
				stages {
					... StageQuery
				}
			}
		}
	}
	typedef {
		label
		def {
			anykey
			fields {
				name
				type {
					rep
					nullable
				}
				isEnum
				isSearchable
				isHidden
				isConst
				isMetric
			}
		}
	}
	sourceTable {
		schema
		tableName
		sourceUpdateTableName
		isInsertOnly
		batchSeqField
		validFromField
		fields {
			name
			sqlType
		}
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`,
		Variables: &__lookupDatasetInput{
			WorkspaceId: workspaceId,
			Name:        name,
		},
	}
	var err error

	var data lookupDatasetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func lookupDatastream(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	name string,
) (*lookupDatastreamResponse, error) {
	req := &graphql.Request{
		OpName: "lookupDatastream",
		Query: `
query lookupDatastream ($workspaceId: ObjectId!, $name: String!) {
	datastream: workspace(id: $workspaceId) {
		datastream(name: $name) {
			... Datastream
		}
	}
}
fragment Datastream on Datastream {
	id
	name
	iconUrl
	description
	workspaceId
	datasetId
}
`,
		Variables: &__lookupDatastreamInput{
			WorkspaceId: workspaceId,
			Name:        name,
		},
	}
	var err error

	var data lookupDatastreamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func lookupFolder(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	name string,
) (*lookupFolderResponse, error) {
	req := &graphql.Request{
		OpName: "lookupFolder",
		Query: `
query lookupFolder ($workspaceId: ObjectId!, $name: String!) {
	folder: workspace(id: $workspaceId) {
		folder(name: $name) {
			... Folder
		}
	}
}
fragment Folder on Folder {
	id
	name
	iconUrl
	description
	workspaceId
}
`,
		Variables: &__lookupFolderInput{
			WorkspaceId: workspaceId,
			Name:        name,
		},
	}
	var err error

	var data lookupFolderResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func lookupMonitor(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	name string,
) (*lookupMonitorResponse, error) {
	req := &graphql.Request{
		OpName: "lookupMonitor",
		Query: `
query lookupMonitor ($workspaceId: ObjectId!, $name: String!) {
	monitor: workspace(id: $workspaceId) {
		monitor(name: $name) {
			... Monitor
		}
	}
}
fragment Monitor on Monitor {
	workspaceId
	id
	name
	description
	iconUrl
	disabled
	freshnessGoal
	useDefaultFreshness
	source
	managedById
	query {
		outputStage
		stages {
			... StageQuery
		}
	}
	rule {
		__typename
		sourceColumn
		groupByGroups {
			groupName
			columns
		}
		... on MonitorRuleCount {
			compareFunction
			compareValues
			lookbackTime
		}
		... on MonitorRuleChange {
			changeType
			compareFunction
			compareValues
			aggregateFunction
			lookbackTime
			baselineTime
		}
		... on MonitorRuleFacet {
			facetFunction
			facetValues
			timeFunction
			timeValue
			lookbackTime
		}
		... on MonitorRuleThreshold {
			compareFunction
			compareValues
			lookbackTime
			thresholdAggFunction
		}
		... on MonitorRulePromote {
			kindField
			descriptionField
			primaryKey
		}
	}
	notificationSpec {
		merge
		importance
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`,
		Variables: &__lookupMonitorInput{
			WorkspaceId: workspaceId,
			Name:        name,
		},
	}
	var err error

	var data lookupMonitorResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func lookupWorkspace(
	ctx context.Context,
	client graphql.Client,
	name string,
) (*lookupWorkspaceResponse, error) {
	req := &graphql.Request{
		OpName: "lookupWorkspace",
		Query: `
query lookupWorkspace ($name: String!) {
	workspace(label: $name) {
		... Workspace
	}
}
fragment Workspace on Project {
	id
	label
	datasets {
		id
		label
	}
}
`,
		Variables: &__lookupWorkspaceInput{
			Name: name,
		},
	}
	var err error

	var data lookupWorkspaceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func saveDashboard(
	ctx context.Context,
	client graphql.Client,
	dashboardInput DashboardInput,
) (*saveDashboardResponse, error) {
	req := &graphql.Request{
		OpName: "saveDashboard",
		Query: `
mutation saveDashboard ($dashboardInput: DashboardInput!) {
	dashboard: saveDashboard(dash: $dashboardInput) {
		... Dashboard
	}
}
fragment Dashboard on Dashboard {
	id
	name
	iconUrl
	workspaceId
	managedById
	folderId
	layout
	stages {
		id
		input {
			inputName
			inputRole
			datasetId
			datasetPath
			stageId
		}
		params
		layout
		pipeline
	}
	parameters {
		id
		name
		defaultValue {
			... valueFields
		}
		valueKind {
			type
			keyForDatasetId
			arrayItemType {
				type
				keyForDatasetId
			}
		}
	}
	parameterValues {
		id
		value {
			... valueFields
		}
	}
}
fragment valueFields on Value {
	bool
	float64
	int64
	string
	array {
		value {
			... primitiveValueFields
		}
	}
	link {
		datasetId
		primaryKeyValue {
			name
			value {
				... primitiveValueFields
			}
		}
		storedLabel
	}
	datasetref {
		datasetId
		datasetPath
		stageId
	}
}
fragment primitiveValueFields on PrimitiveValue {
	bool
	float64
	int64
	string
}
`,
		Variables: &__saveDashboardInput{
			DashboardInput: dashboardInput,
		},
	}
	var err error

	var data saveDashboardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func saveDataset(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	dataset DatasetInput,
	query MultiStageQueryInput,
	dep *DependencyHandlingInput,
) (*saveDatasetResponse, error) {
	req := &graphql.Request{
		OpName: "saveDataset",
		Query: `
mutation saveDataset ($workspaceId: ObjectId!, $dataset: DatasetInput!, $query: MultiStageQueryInput!, $dep: DependencyHandlingInput) {
	dataset: saveDataset(workspaceId: $workspaceId, dataset: $dataset, query: $query, dependencyHandling: $dep) {
		dataset {
			... Dataset
		}
	}
}
fragment Dataset on Dataset {
	workspaceId
	id
	label
	freshnessDesired
	description
	iconUrl
	version
	lastSaved
	pathCost
	source
	managedById
	onDemandMaterializationLength
	foreignKeys {
		label
		targetDataset
		srcFields
		dstFields
	}
	transform {
		current {
			query {
				outputStage
				stages {
					... StageQuery
				}
			}
		}
	}
	typedef {
		label
		def {
			anykey
			fields {
				name
				type {
					rep
					nullable
				}
				isEnum
				isSearchable
				isHidden
				isConst
				isMetric
			}
		}
	}
	sourceTable {
		schema
		tableName
		sourceUpdateTableName
		isInsertOnly
		batchSeqField
		validFromField
		fields {
			name
			sqlType
		}
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`,
		Variables: &__saveDatasetInput{
			WorkspaceId: workspaceId,
			Dataset:     dataset,
			Query:       query,
			Dep:         dep,
		},
	}
	var err error

	var data saveDatasetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func saveSourceDataset(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	datasetDefinition DatasetDefinitionInput,
	sourceTable SourceTableDefinitionInput,
	dep *DependencyHandlingInput,
) (*saveSourceDatasetResponse, error) {
	req := &graphql.Request{
		OpName: "saveSourceDataset",
		Query: `
mutation saveSourceDataset ($workspaceId: ObjectId!, $datasetDefinition: DatasetDefinitionInput!, $sourceTable: SourceTableDefinitionInput!, $dep: DependencyHandlingInput) {
	dataset: saveSourceDataset(workspaceId: $workspaceId, datasetDefinition: $datasetDefinition, sourceTable: $sourceTable, dependencyHandling: $dep) {
		dataset {
			... Dataset
		}
	}
}
fragment Dataset on Dataset {
	workspaceId
	id
	label
	freshnessDesired
	description
	iconUrl
	version
	lastSaved
	pathCost
	source
	managedById
	onDemandMaterializationLength
	foreignKeys {
		label
		targetDataset
		srcFields
		dstFields
	}
	transform {
		current {
			query {
				outputStage
				stages {
					... StageQuery
				}
			}
		}
	}
	typedef {
		label
		def {
			anykey
			fields {
				name
				type {
					rep
					nullable
				}
				isEnum
				isSearchable
				isHidden
				isConst
				isMetric
			}
		}
	}
	sourceTable {
		schema
		tableName
		sourceUpdateTableName
		isInsertOnly
		batchSeqField
		validFromField
		fields {
			name
			sqlType
		}
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`,
		Variables: &__saveSourceDatasetInput{
			WorkspaceId:       workspaceId,
			DatasetDefinition: datasetDefinition,
			SourceTable:       sourceTable,
			Dep:               dep,
		},
	}
	var err error

	var data saveSourceDatasetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func saveWorksheet(
	ctx context.Context,
	client graphql.Client,
	worksheetInput WorksheetInput,
) (*saveWorksheetResponse, error) {
	req := &graphql.Request{
		OpName: "saveWorksheet",
		Query: `
mutation saveWorksheet ($worksheetInput: WorksheetInput!) {
	worksheet: saveWorksheet(wks: $worksheetInput) {
		... Worksheet
	}
}
fragment Worksheet on Worksheet {
	id
	label
	icon
	managedById
	workspace {
		id
	}
	stages {
		... StageQuery
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`,
		Variables: &__saveWorksheetInput{
			WorksheetInput: worksheetInput,
		},
	}
	var err error

	var data saveWorksheetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func setChannelsForChannelAction(
	ctx context.Context,
	client graphql.Client,
	actionId string,
	channelIds []string,
) (*setChannelsForChannelActionResponse, error) {
	req := &graphql.Request{
		OpName: "setChannelsForChannelAction",
		Query: `
mutation setChannelsForChannelAction ($actionId: ObjectId!, $channelIds: [ObjectId!]!) {
	resultStatus: setChannelsForChannelAction(actionId: $actionId, channelIds: $channelIds) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__setChannelsForChannelActionInput{
			ActionId:   actionId,
			ChannelIds: channelIds,
		},
	}
	var err error

	var data setChannelsForChannelActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func setDefaultDashboard(
	ctx context.Context,
	client graphql.Client,
	dsid string,
	dashid string,
) (*setDefaultDashboardResponse, error) {
	req := &graphql.Request{
		OpName: "setDefaultDashboard",
		Query: `
mutation setDefaultDashboard ($dsid: ObjectId!, $dashid: ObjectId!) {
	resultStatus: setDefaultDashboard(dsid: $dsid, dashid: $dashid) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__setDefaultDashboardInput{
			Dsid:   dsid,
			Dashid: dashid,
		},
	}
	var err error

	var data setDefaultDashboardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func setMonitorsForChannel(
	ctx context.Context,
	client graphql.Client,
	channelId string,
	monitorIds []string,
) (*setMonitorsForChannelResponse, error) {
	req := &graphql.Request{
		OpName: "setMonitorsForChannel",
		Query: `
mutation setMonitorsForChannel ($channelId: ObjectId!, $monitorIds: [ObjectId!]!) {
	resultStatus: setMonitorsForChannel(channelId: $channelId, monitorIds: $monitorIds) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`,
		Variables: &__setMonitorsForChannelInput{
			ChannelId:  channelId,
			MonitorIds: monitorIds,
		},
	}
	var err error

	var data setMonitorsForChannelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateApp(
	ctx context.Context,
	client graphql.Client,
	id string,
	config AppInput,
) (*updateAppResponse, error) {
	req := &graphql.Request{
		OpName: "updateApp",
		Query: `
mutation updateApp ($id: ObjectId!, $config: AppInput!) {
	app: updateApp(id: $id, app: $config) {
		... App
	}
}
fragment App on App {
	id
	name
	iconUrl
	description
	workspaceId
	folderId
	config {
		moduleId
		version
	}
	status {
		state
		internalError
	}
	outputs
}
`,
		Variables: &__updateAppInput{
			Id:     id,
			Config: config,
		},
	}
	var err error

	var data updateAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateBoard(
	ctx context.Context,
	client graphql.Client,
	id string,
	board BoardInput,
) (*updateBoardResponse, error) {
	req := &graphql.Request{
		OpName: "updateBoard",
		Query: `
mutation updateBoard ($id: ObjectId!, $board: BoardInput!) {
	board: updateBoard(id: $id, board: $board) {
		... Board
	}
}
fragment Board on Board {
	id
	datasetId
	name
	type
	boardJson: board
	source
}
`,
		Variables: &__updateBoardInput{
			Id:    id,
			Board: board,
		},
	}
	var err error

	var data updateBoardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateChannel(
	ctx context.Context,
	client graphql.Client,
	id string,
	channel ChannelInput,
) (*updateChannelResponse, error) {
	req := &graphql.Request{
		OpName: "updateChannel",
		Query: `
mutation updateChannel ($id: ObjectId!, $channel: ChannelInput!) {
	channel: updateChannel(id: $id, channel: $channel) {
		... Channel
	}
}
fragment Channel on Channel {
	id
	name
	iconUrl
	description
	workspaceId
	monitors {
		id
	}
}
`,
		Variables: &__updateChannelInput{
			Id:      id,
			Channel: channel,
		},
	}
	var err error

	var data updateChannelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateChannelAction(
	ctx context.Context,
	client graphql.Client,
	id string,
	action ActionInput,
) (*updateChannelActionResponse, error) {
	req := &graphql.Request{
		OpName: "updateChannelAction",
		Query: `
mutation updateChannelAction ($id: ObjectId!, $action: ActionInput!) {
	channelAction: updateChannelAction(id: $id, action: $action) {
		__typename
		... ChannelAction
	}
}
fragment ChannelAction on ChannelAction {
	id
	name
	iconUrl
	description
	notifyOnClose
	workspaceId
	channels {
		id
	}
	rateLimit
	__typename
	... on WebhookAction {
		urlTemplate
		bodyTemplate
		method
		headers {
			header
			valueTemplate
		}
	}
	... on EmailAction {
		targetAddresses
		subjectTemplate
		bodyTemplate
		isHtml
	}
}
`,
		Variables: &__updateChannelActionInput{
			Id:     id,
			Action: action,
		},
	}
	var err error

	var data updateChannelActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateDatastream(
	ctx context.Context,
	client graphql.Client,
	id string,
	datastream DatastreamInput,
) (*updateDatastreamResponse, error) {
	req := &graphql.Request{
		OpName: "updateDatastream",
		Query: `
mutation updateDatastream ($id: ObjectId!, $datastream: DatastreamInput!) {
	datastream: updateDatastream(id: $id, datastream: $datastream) {
		... Datastream
	}
}
fragment Datastream on Datastream {
	id
	name
	iconUrl
	description
	workspaceId
	datasetId
}
`,
		Variables: &__updateDatastreamInput{
			Id:         id,
			Datastream: datastream,
		},
	}
	var err error

	var data updateDatastreamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateDatastreamToken(
	ctx context.Context,
	client graphql.Client,
	id string,
	token DatastreamTokenInput,
) (*updateDatastreamTokenResponse, error) {
	req := &graphql.Request{
		OpName: "updateDatastreamToken",
		Query: `
mutation updateDatastreamToken ($id: String!, $token: DatastreamTokenInput!) {
	datastreamToken: updateDatastreamToken(id: $id, token: $token) {
		... DatastreamToken
	}
}
fragment DatastreamToken on DatastreamToken {
	id
	name
	description
	disabled
	datastreamId
	secret
}
`,
		Variables: &__updateDatastreamTokenInput{
			Id:    id,
			Token: token,
		},
	}
	var err error

	var data updateDatastreamTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateDeferredForeignKey(
	ctx context.Context,
	client graphql.Client,
	id string,
	keyInput DeferredForeignKeyInput,
) (*updateDeferredForeignKeyResponse, error) {
	req := &graphql.Request{
		OpName: "updateDeferredForeignKey",
		Query: `
mutation updateDeferredForeignKey ($id: ObjectId!, $keyInput: DeferredForeignKeyInput!) {
	deferredForeignKey: updateDeferredForeignKey(id: $id, data: $keyInput) {
		... DeferredForeignKey
	}
}
fragment DeferredForeignKey on DeferredForeignKey {
	id
	workspaceId
	sourceDataset {
		datasetId
	}
	targetDataset {
		datasetId
	}
	srcFields
	dstFields
	label
	resolution {
		sourceId
		targetId
	}
	status {
		errorText
	}
}
`,
		Variables: &__updateDeferredForeignKeyInput{
			Id:       id,
			KeyInput: keyInput,
		},
	}
	var err error

	var data updateDeferredForeignKeyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateFolder(
	ctx context.Context,
	client graphql.Client,
	id string,
	config FolderInput,
) (*updateFolderResponse, error) {
	req := &graphql.Request{
		OpName: "updateFolder",
		Query: `
mutation updateFolder ($id: ObjectId!, $config: FolderInput!) {
	folder: updateFolder(id: $id, folder: $config) {
		... Folder
	}
}
fragment Folder on Folder {
	id
	name
	iconUrl
	description
	workspaceId
}
`,
		Variables: &__updateFolderInput{
			Id:     id,
			Config: config,
		},
	}
	var err error

	var data updateFolderResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// More workarounds for server-side struggles
func updateMonitor(
	ctx context.Context,
	client graphql.Client,
	id string,
	monitor MonitorInput,
) (*updateMonitorResponse, error) {
	req := &graphql.Request{
		OpName: "updateMonitor",
		Query: `
mutation updateMonitor ($id: ObjectId!, $monitor: MonitorInput!) {
	monitor: updateMonitor(id: $id, monitor: $monitor) {
		monitor {
			... Monitor
		}
	}
}
fragment Monitor on Monitor {
	workspaceId
	id
	name
	description
	iconUrl
	disabled
	freshnessGoal
	useDefaultFreshness
	source
	managedById
	query {
		outputStage
		stages {
			... StageQuery
		}
	}
	rule {
		__typename
		sourceColumn
		groupByGroups {
			groupName
			columns
		}
		... on MonitorRuleCount {
			compareFunction
			compareValues
			lookbackTime
		}
		... on MonitorRuleChange {
			changeType
			compareFunction
			compareValues
			aggregateFunction
			lookbackTime
			baselineTime
		}
		... on MonitorRuleFacet {
			facetFunction
			facetValues
			timeFunction
			timeValue
			lookbackTime
		}
		... on MonitorRuleThreshold {
			compareFunction
			compareValues
			lookbackTime
			thresholdAggFunction
		}
		... on MonitorRulePromote {
			kindField
			descriptionField
			primaryKey
		}
	}
	notificationSpec {
		merge
		importance
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`,
		Variables: &__updateMonitorInput{
			Id:      id,
			Monitor: monitor,
		},
	}
	var err error

	var data updateMonitorResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updatePoller(
	ctx context.Context,
	client graphql.Client,
	id string,
	poller PollerInput,
) (*updatePollerResponse, error) {
	req := &graphql.Request{
		OpName: "updatePoller",
		Query: `
mutation updatePoller ($id: ObjectId!, $poller: PollerInput!) {
	poller: updatePoller(id: $id, poller: $poller) {
		... Poller
	}
}
fragment Poller on Poller {
	id
	workspaceId
	customerId
	datastreamId
	disabled
	kind
	config {
		__typename
		name
		retries
		interval
		tags
		chunk {
			enabled
			size
		}
		... on PollerPubSubConfig {
			projectId
			jsonKey
			subscriptionId
		}
		... on PollerHTTPConfig {
			method
			body
			endpoint
			contentType
			headers
			template {
				... HttpRequestConfig
			}
			requests {
				... HttpRequestConfig
			}
			rules {
				match {
					... HttpRequestConfig
				}
				follow
				decoder {
					type
				}
			}
		}
		... on PollerGCPMonitoringConfig {
			projectId
			jsonKey
			includeMetricTypePrefixes
			excludeMetricTypePrefixes
			rateLimit
			totalLimit
		}
		... on PollerMongoDBAtlasConfig {
			publicKey
			privateKey
			includeGroups
			excludeGroups
		}
	}
}
fragment HttpRequestConfig on PollerHTTPRequestConfig {
	url
	method
	username
	password
	headers
	params
}
`,
		Variables: &__updatePollerInput{
			Id:     id,
			Poller: poller,
		},
	}
	var err error

	var data updatePollerResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// More workarounds for server-side struggles
func updatePreferredPath(
	ctx context.Context,
	client graphql.Client,
	id string,
	config PreferredPathInput,
) (*updatePreferredPathResponse, error) {
	req := &graphql.Request{
		OpName: "updatePreferredPath",
		Query: `
mutation updatePreferredPath ($id: ObjectId!, $config: PreferredPathInput!) {
	preferredPathWithStatus: updatePreferredPath(id: $id, path: $config) {
		... PreferredPathWithStatus
	}
}
fragment PreferredPathWithStatus on PreferredPathWithStatus {
	path {
		... PreferredPath
	}
	error
}
fragment PreferredPath on PreferredPath {
	id
	name
	iconUrl
	description
	workspaceId
	folderId
	sourceDataset
	path {
		linkId
		reverse
	}
}
`,
		Variables: &__updatePreferredPathInput{
			Id:     id,
			Config: config,
		},
	}
	var err error

	var data updatePreferredPathResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateWorkspace(
	ctx context.Context,
	client graphql.Client,
	id string,
	config WorkspaceInput,
) (*updateWorkspaceResponse, error) {
	req := &graphql.Request{
		OpName: "updateWorkspace",
		Query: `
mutation updateWorkspace ($id: ObjectId!, $config: WorkspaceInput!) {
	workspace: updateWorkspace(id: $id, definition: $config) {
		... Workspace
	}
}
fragment Workspace on Project {
	id
	label
	datasets {
		id
		label
	}
}
`,
		Variables: &__updateWorkspaceInput{
			Id:     id,
			Config: config,
		},
	}
	var err error

	var data updateWorkspaceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
